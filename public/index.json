[{"content":"How to find all primes under n? Sieve of Eratosthenes This algorithm is a very intuitive way to find all primes under n. We first create a list of numbers from 2 to n and then iterate over the list. For each number i, we mark all its multiples as non-prime. At the end, all numbers that are not marked are prime.\n1 2 3 4 5 6 7 8 9 10 11 12 13 vector\u0026lt;int\u0026gt; find_primes(int n) { vector\u0026lt;int\u0026gt; primes; vector\u0026lt;bool\u0026gt; is_prime(n + 1, true); for (int i = 2; i * i \u0026lt;= n; i++) { if (is_prime[i]) { primes.push_back(i); for (int j = i * i; j \u0026lt;= n; j += i) { is_prime[j] = false; } } } return primes; } Let\u0026rsquo;s analyze the time complexity. For each prime number p, we will iterate from p * p to n. Which means that the time complexity is $\\sum_{p \\text{ is prime}}^{p \\leq n} \\frac{n}{p} = n\\sum_{p \\text{ is prime}}^{p \\leq n} \\frac{1}{p} = n\\log\\log n$ (prime harmonic series).\nOf course, the actual time complexity should be better than $n\\log\\log n$. Since we only need to iterate over prime numbers that is smaller or equal to sqrt(n) (for (int i = 2; i * i \u0026lt;= n; i++)). This is sufficient to find all primes under n, since every composite number must have a prime factor that is smaller or equal to sqrt(n). And for each prime number, we actaully start from p * p instead of 2 * p (for (int j = i * i; j \u0026lt;= n; j += i)).\nCan we do better? In this algorithm, for each composite number c, we ran is_prime[c] = false multiple times. Take 12 as an example, is_prime[12] is set to false when i is 2, 3. Is it possible to set is_prime[12] to false only once?\nEuler\u0026rsquo;s Sieve In Euler\u0026rsquo;s sieve, every composite number is marked to false by its greatest proper factor (more accurately, we would mark it to false when it is smallest prime factor * greatest proper factor). Proper factor means the factor that is not the number itself.\nTake 12 as an example. is_prime[12] should be marked as false when the number we are iterating (the first for loop in Sieve of Eratosthenes) is 6, the greatest proper factor of 12. Let\u0026rsquo;s take a look how can we accomplish this.\nLet\u0026rsquo;s say the number we are iterating is c, a composite number. Our goal is to find every prime p such that the product p * c can be expressed as smallest prime factor * greatest proper factor, then mark is_prime[p * c] as false. Remember, the reason why we are doing this is because for each composite number, we only want to mark it as false once.\nWe could write c = p * q, where p is the smallest prime factor of c, and q is the greatest proper factor of c. If we have another prime number k that is greater than p, then k * c will not be in the form of smallest prime factor * greatest proper factor, since we could write the product as p * (k * q). If k is smaller or equal to p, then k * c will be in the form of smallest prime factor * greatest proper factor, we can mark k * c as non prime. It is not that trivial, you might need to think about it for a while.\nBasically, for each number i we are iterating, we find the product of i with all prime numbers smaller than the smallest prime factor of i.\nLet\u0026rsquo;s run the algorithm with an example. In the following example, n is 12.\nnumbers = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\rprimes = [] We start from i = 2. Since 2 is prime, we add it to primes. Then we iterate from 2 * 2 to 2 * 2, since 2 is the largest prime that is \u0026lt;= 2. In this round of iteration, we mark 4 as non-prime. I use a asterisk to mark numbers as non-prime.\nnumbers = [2, 3, *4, 5, 6, 7, 8, 9, 10, 11, 12]\rprimes = [2] Next, we start from i = 3. Since 3 is prime, we add it to primes. Then we iterate from 3 * 2 to 3 * 3. In this round of iteration, we mark 6, 9 as non-prime.\nnumbers = [2, 3, *4, 5, *6, 7, 8, *9, 10, 11, 12]\rprimes = [2, 3] Next, we start from i = 4. Since 4 is not prime, we will not add it to primes. We iterate from 4 * 2 to 4 * 2. In this round of iteration, we mark 8 as non-prime.\nnumbers = [2, 3, *4, 5, *6, 7, *8, *9, 10, 11, 12]\rprimes = [2, 3] Next, we start from i = 5. Since 5 is prime, we add it to primes. Then we iterate from 5 * 2 to 5 * 5. In this round of iteration, we mark 10 as non-prime.\nnumbers = [2, 3, *4, 5, *6, 7, *8, *9, *10, 11, 12]\rprimes = [2, 3, 5] Next, we start from i = 6. Since 6 is not prime, we will not add it to primes. We iterate from 6 * 2 to 6 * 2. In this round of iteration, we mark 12 as non-prime.\nnumbers = 2, 3, *4, 5, *6, 7, *8, *9, *10, 11, *12\rprimes = [2, 3, 5] We just do the same thing over and over. For each number, we will only mark it as non-prime once.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 vector\u0026lt;int\u0026gt; find_primes(int n) { vector\u0026lt;int\u0026gt; primes; vector\u0026lt;bool\u0026gt; is_prime(n + 1, true); for (int i = 2; i \u0026lt;= n; i++) { // i is greatest proper factor if (is_prime[i]) { primes.push_back(i); } for (int prime: primes) { if (i * prime \u0026gt; n) { break; } is_prime[i * prime] = false; if (i % prime == 0) { // prime is the smallest prime factor of i break; } } } return primes; } The time complexity of Euler\u0026rsquo;s sieve is $O(n)$ since we marked each number as non-prime only once. The interesting thing about Euler’s sieve is that it is called Euler’s sieve instead of sieve of Euler.\n","permalink":"http://localhost:1313/blog/posts/prime_sieves/","summary":"\u003ch1 id=\"how-to-find-all-primes-under-n\"\u003eHow to find all primes under \u003ccode\u003en\u003c/code\u003e?\u003c/h1\u003e\n\u003ch2 id=\"sieve-of-eratosthenes\"\u003eSieve of Eratosthenes\u003c/h2\u003e\n\u003cp\u003eThis algorithm is a very intuitive way to find all primes under \u003ccode\u003en\u003c/code\u003e. We first create a list of numbers from 2 to \u003ccode\u003en\u003c/code\u003e and then iterate over the list. For each number \u003ccode\u003ei\u003c/code\u003e, we mark all its multiples as non-prime. At the end, all numbers that are not marked are prime.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efind_primes\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eprimes\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eis_prime\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eis_prime\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eprimes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epush_back\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003eis_prime\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eprimes\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eLet\u0026rsquo;s analyze the time complexity. For each prime number \u003ccode\u003ep\u003c/code\u003e, we will iterate from \u003ccode\u003ep * p\u003c/code\u003e to \u003ccode\u003en\u003c/code\u003e. Which means that the time complexity is $\\sum_{p \\text{ is prime}}^{p \\leq n} \\frac{n}{p} = n\\sum_{p \\text{ is prime}}^{p \\leq n} \\frac{1}{p} = n\\log\\log n$ (prime harmonic series).\u003c/p\u003e","title":"Prime Sieves"},{"content":"This is a note of this paragraph.\nProblem Statement Given a set of servers, we need to distribute the load among them. The load can be anything like requests, data, etc. The goal is to minimize the number of reassignments when a server is added or removed. Also notice that the data on each server might not be the same.\nFirst intuition One way to distribute the load is to use a hash function to map the load to a server.\nrequest send to server[hash(request) % (number of servers)] This approach works well when the number of servers is fixed.\nFor example, if we have 3 servers numbered from 0 to 2, and 3 requests with hash value 1, 2, and 3, we can assign the requests to server 1 (1 % 3), 2 (2 % 3), and 0 (3 % 3) respectively.\nHowever, when a server is added or removed, the data needs to be reassigned to different servers. This is not ideal since it can lead to a lot of reassignments.\nFor example, if we add a server, now the same 3 requests will be assigned to servers 1 (1 % 4), 2 (2 % 4), and 3 (3 % 4) respectively. The first two requests are assigned to the same servers as before, but the third request is assigned to a different server. This means the data needs to be moved from server 0 to server 3.\nWhat is Consistent Hashing? In our first intuition, we used a hash function to map the load to a server. Consistent hashing is a technique that uses a hash function to map the load and the server to a circle. The circle is represented by a ring where the servers are placed at different points on the ring. The load is then mapped to the server that is closest to it in the clockwise direction.\nThere are $2^{32}$ points on the ring. We map servers and requests to points on the ring using a hash function. In the above example, we have 3 servers and 3 requests. The requests r0 and r1 will we mapped to server s1, and request r2 will be mapped to server s0.\nHowever, this design still has problems.\nThe servers are not uniformly distributed on the ring. This can lead to hotspots where a lot of requests are assigned to the same server. In the above example, the requests that are mapped between s2 and s1 will all go to s2. Which means server s1 will have more requests than s0 and s2, since there are more points between s2 and s1.\nEven if the servers are uniformly distributed, when we add or remove a server, it still might cause some servers to handle significantly more requests than others. Let\u0026rsquo;s say servers are uniformly distributed clockwise on the ring, when we remove one of the server, the next server that is closest to the removed server will take all the requests that were assigned to the removed server. Making it accept twice as many requests as the other servers.\nVirtual Nodes We can fix this with virtula nodes. Create multiple virtual nodes for each server and place them on the ring. This way, the servers are more uniformly distributed on the ring.\nIn the above example, we create three virtual nodes for each server. The request that mapped to s0-0, s0-1, or s0-2 will we remapped to the true server s0. This way, the requests are more evenly distributed among the servers, and even if we add or remove a server, the load will be evenly distributed to other servers.\n","permalink":"http://localhost:1313/blog/posts/consistent_hashing/","summary":"\u003cp\u003eThis is a note of this \u003ca href=\"https://xiaolincoding.com/os/8_network_system/hash.html\"\u003eparagraph\u003c/a\u003e.\u003c/p\u003e\n\u003ch1 id=\"problem-statement\"\u003eProblem Statement\u003c/h1\u003e\n\u003cp\u003eGiven a set of servers, we need to distribute the load among them. The load can be anything like requests, data, etc. The goal is to minimize the number of reassignments when a server is added or removed. Also notice that the data on each server might not be the same.\u003c/p\u003e\n\u003ch1 id=\"first-intuition\"\u003eFirst intuition\u003c/h1\u003e\n\u003cp\u003eOne way to distribute the load is to use a hash function to map the load to a server.\u003c/p\u003e","title":"Consistent Hashing"},{"content":"Why make? Make is a build automation tool that automatically builds executable programs and libraries from source code by reading files called Makefiles, which specify how to derive the target program. It avoids the need to manually type everything out every time you want to compile your code.\nSyntax Make has the following syntax:\ntarget: dependencies command For example, if you have a file called hello.c and you want to compile it into an executable called hello, you can write a Makefile like this:\nhello: hello.c gcc hello.c -o hello This Makefile has one target, hello, which depends on hello.c. The command to build the target is gcc -o hello hello.c. We could type make hello in the terminal to build the target.\nMore than one file? If hello.c depends on foo.c and bar.c, you can write a Makefile like this:\nhello: hello.c foo.o bar.o gcc hello.c foo.o bar.o -o hello foo.o: foo.c gcc -c foo.c -o foo.o bar.o: bar.c gcc -c bar.c -o bar.o When we compile using gcc -c, it compiles the source file into an object file instead of an executable. The .o file is a intermediate file that contains machine code but is not yet linked into an executable.\nWhen we run make hello, make will check if everything is up to date. If hello.c is newer than hello, make will run the command to build hello. If foo.c is newer than foo.o (or if foo.o doesn\u0026rsquo;t exist), make will run the command to build foo.o, but you need to provide the command to build foo.o in the Makefile.\nClean up When we want to publish our code, we don\u0026rsquo;t want to include the object files or the executable files. We can add a target called clean to remove the object files:\nhello: hello.c foo.o bar.o gcc hello.c foo.o bar.o -o hello foo.o: foo.c gcc -c foo.c -o foo.o bar.o: bar.c gcc -c bar.c -o bar.o clean: rm *.o main Now we can run make clean to remove the object files and executable files.\nTwo main functions? If we have two main functions in your code, hello.c and world.c, we can\u0026rsquo;t compile them into one executable. We can compile them into two separate executables like this:\nall: hello world hello: hello.c foo.o bar.o gcc hello.c foo.o -o hello world: world.c foo.o bar.o gcc world.c bar.o -o world foo.o: foo.c gcc -c foo.c -o foo.o bar.o: bar.c gcc -c bar.c -o bar.o clean: rm *.o hello world Now we can run make all to build both hello and world.\nConstants If we decide to change the compiler from gcc to clang, we would have to change every instance of gcc in the Makefile. We can use constants to avoid this:\nCC = gcc all: hello world hello: hello.c foo.o bar.o $(CC) hello.c foo.o -o hello world: world.c foo.o bar.o $(CC) world.c bar.o -o world foo.o: foo.c $(CC) -c foo.c -o foo.o bar.o: bar.c $(CC) -c bar.c -o bar.o clean: rm *.o hello world This also works for flags:\nCC = gcc DBGFLAGS = -g -D_DEBUG_ON_ OPTFLAGS = -O2 hello_opt: hello.c foo_opt.o $(CC) $(OPTFLAGS) hello.c foo_opt.o -o hello_opt foo_opt.o: foo.c $(CC) $(OPTFLAGS) -c foo.c -o foo_opt.o hello_dbg: hello.c foo_dbg.o $(CC) $(DBGFLAGS) hello.c foo_dbg.o -o hello_dbg foo_dbg.o: foo.c $(CC) $(DBGFLAGS) -c foo.c -o foo_dbg.o ","permalink":"http://localhost:1313/blog/posts/makefile/","summary":"\u003ch2 id=\"why-make\"\u003eWhy make?\u003c/h2\u003e\n\u003cp\u003eMake is a build automation tool that automatically builds executable programs and libraries from source code by reading files called Makefiles, which specify how to derive the target program. It avoids the need to manually type everything out every time you want to compile your code.\u003c/p\u003e\n\u003ch2 id=\"syntax\"\u003eSyntax\u003c/h2\u003e\n\u003cp\u003eMake has the following syntax:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-make\" data-lang=\"make\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nf\"\u003etarget\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003edependencies\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003ecommand\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFor example, if you have a file called \u003ccode\u003ehello.c\u003c/code\u003e and you want to compile it into an executable called \u003ccode\u003ehello\u003c/code\u003e, you can write a Makefile like this:\u003c/p\u003e","title":"Introduction to Makefile"},{"content":"This is a note from WHY IS THE HEAP SO SLOW?\nSystem Calls System calls are the apis provided by the operating system and we use them to request some service which only the operating system can do. System calls can be expensive in terms of performance.\nWhen a program is executed, it receives a new name, a process. A process has its own state stored in CPU through register.\nWhen the process makes a system call, the OS needs to use the CPU to serve the request. However, it cannot use the CPU directly, since it has the state of our process. OS will take a snapshot of the state and put it into the memory. Then restore it after execution of the request. Such behavior is called context switch, and context switch takes time and resources.\nMemory Layout The issue with the heap is that its hard to avoid memory fragmentation, and when memory fragmentation occurs, we need system calls to request for another chunk of memory.\nFor example, a server that can receive images from users and return black and white filter of the image to the users, and it is designed to handle multiple clients concurrently.\nWhen the server receives images, it spawns threads for each image. Smaller images are processed more quickly, and as soon as these smaller images are processed, the memory for these images are no longer needed, causing fragmentation on the heap.\nWhen we need to store more data in the heap, to avoid system calls, there are different ways to utilize the heap.\nFirst fit: choose the first hole that is large enough to accommodate our value Best fit: choose the smallest hole that is still large enough for our value Worst fit: choose the largest available hole where our value can fit Conclusion Pros\nDynamic size Large memory allocations Fast accessing times if used correctly Cons\nPerformance penalties Allocations require searching available sub-regions within the heap Allocation may require a System Call Runtime errors Memory leaks Null pointers dereferences Dangling pointers The heap itself is actually not slow, we say its slow because of the whole process of allocatiing memory is slow. If heap is allocated properly, it is as fast as stack, since they are both in the ram.\n","permalink":"http://localhost:1313/blog/posts/why_is_the_heap_so_slow/","summary":"\u003cp\u003eThis is a note from \u003ca href=\"https://youtu.be/ioJkA7Mw2-U\"\u003eWHY IS THE HEAP SO SLOW?\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"system-calls\"\u003eSystem Calls\u003c/h2\u003e\n\u003cp\u003eSystem calls are the apis provided by the operating system and we use them to request some service which only the operating system can do. System calls can be expensive in terms of performance.\u003c/p\u003e\n\u003cp\u003eWhen a program is executed, it receives a new name, a process. A process has its own state stored in CPU through register.\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"register\" loading=\"lazy\" src=\"/blog/posts/why_is_the_heap_so_slow/3-36.png\"\u003e\u003c/p\u003e","title":"Why is the heap so slow?"},{"content":"Chapter 4 Union union is a data structure that can store different types of data, but it can only store one type of data at a time. The size of union is the size of its largest data.\nunion one4all { int int_val; long long_val; double double_val; }; one4all pail; pail.int_val = 15; // store an int cout \u0026lt;\u0026lt; pail.int_val; pail.double_val = 1.38; // store a double, int value is lost cout \u0026lt;\u0026lt; pail.double_val; Enumerations enum spectrum {red, orange, yellow, green, blue, violet, indigo, ultraviolet}; spectrum band; // band a variable of type spectrum band = blue; // valid, blue is an enumerator band = 2000; // invalid, 2000 not an enumerator Enumarators are integer type, and can be converted to int, but not reversely.\nint color = blue; // valid, spectrum type promoted to int band = 3; // invalid, int not converted to spectrum band = orange + red; // not valid, but a little tricky, int not converted to spectrum band = orange; // valid color = 3 + red; // valid, red converted to int band = spectrum(3); // typecast 3 to type spectrum In practice, enumerations are used more often as a way of defining related symbolic constants than as a means of defining new types.\nenum bits{one = 1, two = 2, four = 4, eight = 8}; enum bigstep{first, second = 100, third}; // first = 0, third = 101 enum {zero, null = 0, one, numero_uno = 1}; // zero = 0, one = 1 Pointers int array[3] = {1, 2, 3}; int *ptr = array; // array = \u0026amp;array[0] = address of first element of array // \u0026amp;array = address of whole array = int (*ptr) [3] = pointer that points to array-of-3-ints array is the address of a 4-byte block of memory, \u0026amp;array is the address of a 12-byte block of memory.\narray + 1 adds 4 to the address value, \u0026amp;array + 1 adds 12 to the address value\nA way to describe the type of variable is to remove the variable name, for example, short (*pas)[20], pas points to array of 20 shorts, the type of pas is short (*)[20]\nsizeof(array_name) = size of the array\nsizeof(pointer_name) = size of the pointer\nint *pt = new int; delete pt; delete [] pt; // effect is undefined, don\u0026#39;t do it int *ps = new int [10]; delete [] ps; delete ps; // effect is undefined, don\u0026#39;t do it Use delete [] if you used new [] to allocate an array. Use delete (no brackets) if you used new to allocate a single entity. Chapter 5: Loops and Relational Expressions Prefix and Postfix increment In prefix increment ++i, it increments the value and return the value. However, in postfix increment i++, it copys the value, increments the value, then returns the copy of the value.\nFor classes, the prefix version is more efficient than the postfix version.\nType Aliases #define BYTE char // preprocessor replaces BYTE with char typedef char btye // makes byte an alias for char // typedef typeName aliasName typedef char * byte_pointer; // pointer to char type It\u0026rsquo;s better to use typedef instead of #define. Consider the following:\n#define FLOAT_POINTER float * FLOAT_POINTER pa, pb; // preprocessor substitution converts to float * pa, pb; // pa a pointer to float, pb just a float typedef approach doesn\u0026rsquo;t have that problem.\nChapter 7: Functions: C++’s Programming Modules Pointers and const int age = 39; const int * pt = \u0026amp;age; *pt += 1; // INVALID because pt points to a const int cin \u0026gt;\u0026gt; *pt; // INVALID for the same reason age = 20; // VALID because age is not declared to be const Assigning the address of a const variable to a pointer-to-const is valid, however, assigning to regular pointer is not.\nconst float g_earth = 9.80; const float * pe = \u0026amp;g_earth; // VALID const float g_moon = 1.63; float * pm = \u0026amp;g_moon; // INVALID const doesn\u0026rsquo;t prevent changing the value of pt, it prevents changing the value which pt points to.\nint age = 39; const int * pt = \u0026amp;age; int sage = 80; pt = \u0026amp;sage; // okay to point to another location If you want to prevent changing the value of pt, write DataType * const VariableName = \u0026amp;Data.\nint sloth = 3; const int * ps = \u0026amp;sloth; // a pointer to const int int * const finger = \u0026amp;sloth; // a const pointer to int *finger = 4; // VALID finger and *ps are both const, and *finger and ps are not const.\nFunctions and Two-Dimensional Arrays int data[3][4] = {{1,2,3,4}, {9,8,7,6}, {2,4,6,8}}; data is an array with three elements. The first element is an array of four int values. Hence, the type of data is pointer-to-array-of-four-int, so an appropriate prototype would be:\nint sum(int (*ar2)[4], int size); int sum(int ar2[][4], int size); // VALID, more readable int sum(int *ar2[4], int size); // INVALID Now the sum function works with arrays with four columns.\nint a[100][4]; int b[6][4]; ... int total1 = sum(a, 100); // sum all of a int total2 = sum(b, 6); // sum all of b int total3 = sum(a, 10); // sum first 10 rows of a int total4 = sum(a+10, 20); // sum next 20 rows of a Pointers to Functions Funcitons also have addresses. Pointers to functions are useful because we can pass in different functions in different times.\nHere’s what a declaration of an appropriate pointer type looks like:\ndouble pam(int); // prototype double (*pf)(int); // pf points to a function that takes // one int argument and that // returns type double double *pf(int); // pf() a function that returns a pointer-to-double We can use two ways to invoke a function with function pointers.\ndouble pam(int); double (*pf)(int); pf = pam; // pf now points to the pam() function double x = pam(4); // call pam() using the function name double y = (*pf)(5); // call pam() using the pointer pf double y = pf(5); // also call pam() using the pointer pf // however, the previous one provides a visual reminder that the code is using a function pointer Chapter 8: Adventures in Functions Temporary Variables, Reference Arguments, and const When the reference parameter is a const, the compiler generates a temporary variable when:\nThe actual argument is the correct type but isn’t an lvalue The actual argument is of the wrong type, but can be conoverted to the corret type lvalue is a data object that can be referenced by address, such as variables, array elements, stucture members. Non-lvalue include literal constants and expressions with multiple terms.\ndouble refcube(const double \u0026amp;ra){ return ra * ra * ra; } double side = 3.0; double * pd = \u0026amp;side; double \u0026amp; rd = side; long edge = 5L; double lens[4] = { 2.0, 5.0, 10.0, 12.0}; double c1 = refcube(side); // ra is side double c2 = refcube(lens[2]); // ra is lens[2] double c3 = refcube(rd); // ra is rd is side double c4 = refcube(*pd); // ra is *pd is side double c5 = refcube(edge); // ra is temporary variable, long coverted to double double c6 = refcube(7.0); // ra is temporary variable, literal constants double c7 = refcube(side + 10.0); // ra is temporary variable, multiple terms Note that if refcude does not use constant references, c5, c6, c7 will show error. If there is no such rule, this will happen:\nvoid swapr(int \u0026amp; a, int \u0026amp; b) // use references { int temp; temp = a; // use a, b for values of variables a = b; b = temp; } long a = 3, b = 5; swapr(a, b); // swapping temporary variable instead of swapping a and b In short, if the intent of a function with reference arguments is to modify variables passed as arguments, situations that create temporary variables thwart that purpose. Adding const means that we are not modifying them, so temporary variable cause no harm.\nIn C++11, there is a second kind of reference, called an rvalue reference. It\u0026rsquo;s declared using \u0026amp;\u0026amp;:\ndouble \u0026amp;\u0026amp; rref = std::sqrt(36.00); // not allowed for double \u0026amp; double j = 15.0; double \u0026amp;\u0026amp; jref = 2.0* j + 18.5; // not allowed for double \u0026amp; std::cout \u0026lt;\u0026lt; rref \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; // display 6.0 std::cout \u0026lt;\u0026lt; jref \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; // display 48.5; The original reference type (\u0026amp;) is now called an lvalue reference.\nWhy Return a Reference? int \u0026amp; square(int \u0026amp;i){ i *= i; return i; } int x = 2; int y = square(x); // note that x and y have different address int \u0026amp;z = square(x); // x and z have same address If square() returned int instead of int \u0026amp;, this could involve copying the entire structure to a temporary location and then copying that copy to y. But with a reference return value, x is copied directly to y, a more efficient approach.\nBeing Careful About What a Return Reference Refers To Avoid these lines:\nconst free_throws \u0026amp; clone2(free_throws \u0026amp; ft) { free_throws newguy; // first step to big error newguy = ft; // copy info return newguy; // return reference to copy } It returns a reference to a temporary variable. The simplest way to avoid is to return a reference that was passed as an argument, like the square() function above.\nAnother way is to use new to create new storage.\nconst free_throws \u0026amp; clone(free_throws \u0026amp; ft) { free_throws * pt; *pt = ft; // copy info return *pt; // return reference to copy } However, it is easy to forget to use delete later.\nFunction Overloading void print(const char * str, int width); // #1 void print(double d, int width); // #2 void print(long l, int width); // #3 void print(int i, int width); // #4 void print(const char *str); // #5 print(\u0026#34;Pancakes\u0026#34;, 15); // use #1 print(\u0026#34;Syrup\u0026#34;); // use #5 print(1999.0, 10); // use #2 print(1999, 12); // use #4 print(1999L, 15); // use #3 unsigned int year = 3210; print(year, 6); // ambiguous call, error // If the only print() prototype were #2, then print(year, 6) will convert to type double The function-matching process does discriminate between const and non-const variables.\nvoid dribble(char * bits); // overloaded void dribble (const char *cbits); // overloaded void dabble(char * bits); // not overloaded void drivel(const char * bits); // not overloaded const char p1[20] = \u0026#34;How\u0026#39;s the weather?\u0026#34;; char p2[20] = \u0026#34;How\u0026#39;s business?\u0026#34;; dribble(p1); // dribble(const char *); dribble(p2); // dribble(char *); dabble(p1); // no match dabble(p2); // dabble(char *); drivel(p1); // drivel(const char *); drivel(p2); // drivel(const char *); since it\u0026#39;s valid to assign non-const value to a const variable, but not vice versa void stove(double \u0026amp; r1); // matches modifiable lvalue void stove(const double \u0026amp; r2); // matches const lvalue void stove(double \u0026amp;\u0026amp; r3); // matches rvalue double x = 55.5; const double y = 32.0; stove(x); // calls stove(double \u0026amp;) stove(y); // calls stove(const double \u0026amp;) stove(x+y); // calls stove(double \u0026amp;\u0026amp;) // If we omit the stove(double \u0026amp;\u0026amp;) function, then stove(x + y) will call the stove(const double \u0026amp;) funciton instead Function Templates Let\u0026rsquo;s say we want to create swap() function that can swap two same type of data. One approach is to duplicate the function and overload it, however, it\u0026rsquo;s a waste of time and if we make changes to one function, we have to change every functions.\nWe can set up a swapping template like this:\ntemplate \u0026lt;typename AnyType\u0026gt; void Swap(AnyType \u0026amp;a, AnyType \u0026amp;b) { AnyType temp; temp = a; a = b; b = temp; } The template does not create any functions.Instead, it provides the compiler with directions about how to define a function. If you want a function to swap ints, then the compiler creates a function following the template pattern, substituting int for AnyType.\nOverloaded Templates If we want to create swap() function for C arrays, we can overload templates.\ntemplate \u0026lt;typename T\u0026gt; void Swap(T \u0026amp;a, T \u0026amp;b) { T temp; temp = a; a = b; b = temp; } template \u0026lt;typename T\u0026gt; void Swap(T a[], T b[], int n) { T temp; for (int i = 0; i \u0026lt; n; i++) { temp = a[i]; a[i] = b[i]; b[i] = temp; } } Template Limitations Let\u0026rsquo;s say we want to compare two numbers in a template, we can simply write things like a == b, however, the == equal sign (and \u0026gt;, \u0026lt;) is not defined under C arrays or other data structures. We must provide specialized template funcitons for particular types.\nExplicit Specializations Suppose we have a structure that looks like this:\nstruct job { char name[40]; double salary; int floor; }; and we want to define a swap funciton for it, but only swapping salary and floor, then we can use explicit specializations. The prototype and definition for an explicit specialization should be preceded by template \u0026lt;\u0026gt; and should mention the specialized type by name.\n// non template function prototype void Swap(job \u0026amp;, job \u0026amp;); // template prototype template \u0026lt;typename T\u0026gt; void Swap(T \u0026amp;, T \u0026amp;); // explicit specialization for the job type template \u0026lt;\u0026gt; void Swap\u0026lt;job\u0026gt;(job \u0026amp;, job \u0026amp;); // swaps just the salary and floor fields of a job structure template \u0026lt;\u0026gt; void Swap\u0026lt;job\u0026gt;(job \u0026amp;j1, job \u0026amp;j2) // specialization { double t1; int t2; t1 = j1.salary; j1.salary = j2.salary; j2.salary = t1; t2 = j1.floor; j1.floor = j2.floor; j2.floor = t2; } For a given function name, you can have a non template function,a template function,and an explicit specialization template function,along with overloaded versions of all of these. A specialization overrides the regular template,and a non template function overrides both.\nInstantiations and Specializations When the compiler uses the template to generate a funciton for a particular type, we call it instantiation of the template. If we write this:\ntemplate \u0026lt;typename T\u0026gt; void Swap(T \u0026amp;a, T \u0026amp;b) { T temp; temp = a; a = b; b = temp; } ... Swap(i, j); // i, j are int type ... Then this is called implicit instantiation. The compiler creates a function Swap() for int type because the program uses Swap() with int parameters.\nThere is also explicit instantiation, which means that we can tell the compiler to generate a function for specific type for us.\ntemplate void Swap\u0026lt;int\u0026gt;(int, int); // explicit instantiation It basically tells the compiler \u0026ldquo;Use the Swap() template to generate a function definition for the int type.\u0026rdquo;\nNote the difference between explicit instantiation and explicit specialization. The explicit specialization declaration has \u0026lt;\u0026gt; after the keyword template, whereas the explicit instantiation omits the \u0026lt;\u0026gt;.\ntemplate void Swap\u0026lt;int\u0026gt;(int \u0026amp;, int \u0026amp;); // explicit instantiation template \u0026lt;\u0026gt; void Swap\u0026lt;int\u0026gt;(int \u0026amp;, int \u0026amp;); // explicit specialization template \u0026lt;\u0026gt; void Swap(int \u0026amp;, int \u0026amp;); // explicit specialization Explicit specialization tells the compiler \u0026ldquo;Don’t use the Swap() template to generate a function definition. Instead, use a separate, specialized function definition explicitly defined for the int type.\u0026rdquo;\nWhich Function Version Does the Compiler Pick? The compiler will pick the function by such ranking:\nExact match, with regular functions outranking templates Conversion by promotion (for example, the automatic conversions of char and short to int and of float to double) Conversion by standard conversion (for example, converting int to char or long to double) User-defined conversions, such as those defined in class declarations For example,\nmay(\u0026#39;B\u0026#39;); // actual argument is type char void may(int); // #1 float may(float, float = 3); // #2 void may(char); // #3 char * may(const char *); // #4 char may(const char \u0026amp;); // #5 template\u0026lt;class T\u0026gt; void may(const T \u0026amp;); // #6 template\u0026lt;class T\u0026gt; void may(T *); // #7 #4 and #7 are not viable. #1 is better than #2, since char-to-int is a promotion, whereas char-to-float is a standard conversion. #3, #5 and #6 are better than #1 since they are exact matches. #3 and #5 are better than #6 because #6 is a template. However, what happens if we have #3 and #5 at the same time? Most of the time, two exact matches are an error, however, special cases are exceptions to this rule.\nExact Matches and Best Matches Suppose you have the following code:\nstruct blot {int a; char b[10];}; blot ink = {25, \u0026#34;spots\u0026#34;}; ... recycle(ink); // the following prototypes are exact matches void recycle(blot); // #1 blot-to-blot void recycle(const blot); // #2 blot-to-(const blot) void recycle(blot \u0026amp;); // #3 blot-to-(blot \u0026amp;) void recycle(const blot \u0026amp;); // #4 blot-to-(const blot \u0026amp;) Pointers and references to non-const data are preferentially matched to non-const pointer and reference parameters. If only Functions #3 and #4 were available in the recycle() example, #3 would be chosen because ink wasn’t declared as const.\nHowever, this discrimination between const and non-const applies just to data referred to by pointers and references. That is, if only #1 and #2 were available, you would get an ambiguity error.\nIf we have two template functions with exact matches, the more specialized is the better one. For example:\ntemplate \u0026lt;class Type\u0026gt; void recycle (Type t); // #1 template \u0026lt;class Type\u0026gt; void recycle (Type * t); // #2 struct blot {int a; char b[10];}; blot ink = {25, \u0026#34;spots\u0026#34;}; ... recycle(\u0026amp;ink); // address of a structure The recycle(\u0026amp;ink) call matches Template #1, with Type interpreted as blot *.The recycle(\u0026amp;ink) function call also matches Template #2, this time with Type being ink. In Template #2, Type was already specialized as a pointer, hence it is \u0026ldquo;more specialized.\u0026rdquo;\nMaking Your Own Choices template\u0026lt;class T\u0026gt; T lesser(T a, T b) // #1 { ... } int lesser (int a, int b) // #2 { ... } int m = 20; int n = -30; double x = 15.5; double y = 25.9; cout \u0026lt;\u0026lt; lesser(m, n) \u0026lt;\u0026lt; endl; // use #2 cout \u0026lt;\u0026lt; lesser(x, y) \u0026lt;\u0026lt; endl; // use #1 with double cout \u0026lt;\u0026lt; lesser\u0026lt;\u0026gt;(m, n) \u0026lt;\u0026lt; endl; // use #1 with int, tells compiler to choose a template function cout \u0026lt;\u0026lt; lesser\u0026lt;int\u0026gt;(x, y) \u0026lt;\u0026lt; endl; // use #1 with int, explicit instantiation What’s That Type? template\u0026lt;class T1, class T2\u0026gt; void ft(T1 x, T2 y) { ... ?type? xpy = x + y; // what is the type of xpy ... } What should the type for xpy be? We can use decltype keyworld as a solution.\n// decltype(expression) var; decltype(x + y) xpy = x + y; // make xpy the same type as x + y decltype should follow these rules:\nIf expression has no additional parentheses, then var is the same type as the identifier\nIf expression is a funciton call, then var is the same type as the function return type. Note that there\u0026rsquo;s no need to actually call the funciton.\ndecltype with extra parentheses preserves references from the original expression\nIf none of the preceding cases apply, var is the same type as expression\ndouble x = 5.5; double y = 7.9; double \u0026amp;rx = x; const double * pd; decltype(x) w; // w is type double decltype(rx) u = y; // u is type double \u0026amp; decltype(pd) v; // v is type const double * long indeed(int); decltype (indeed(3)) m; // m is type long double xx = 4.4; decltype ((xx)) r2 = xx; // r2 is double \u0026amp; decltype(xx) w = xx; // w is double (Stage 1 match) int j = 3; int \u0026amp;k = j int \u0026amp;n = j; decltype(j+6) i1; // i1 type int decltype(100L) i2; // i2 type long decltype(k+n) i3; // i3 type int; Note that we can use typedef and decltype at the same time.\ntypedef decltype(x + y) xytype; xytype xpy = x + y; Alternative Function Syntax template\u0026lt;class T1, class T2\u0026gt; ?type? gt(T1 x, T2 y) { ... return x + y; } What if the problem appears in return type? In this case, we cannot use decltype(x + y) for the return type, since parameters x and y have not been declared. The decltype has to come after the parameters are declared. Instead, we can write:\ntemplate\u0026lt;class T1, class T2\u0026gt; auto gt(T1 x, T2 y) -\u0026gt; decltype(x + y) { ... return x + y; } Chapter 9: Memory Models and Namespaces Separate Compilation We can divide the program into three parts:\nA header file that contains the structure declarations and prototypes for functions that use those structures A source code file that contains the code for the structure-related functions A source code file that contains the code that calls the structure-related functions However, this creates new problems. For example, if you had a function definition in a header file and two other files that are part of a single program included it, you would wind up with two definitions of the same function, which is an error.\nHere are some things commonly found in header files:\nFunction prototypes Symbolic constants defined using #define or const Structure declarations Class declarations Template declarations Inline functions Here is an example of seperating a program into three files:\n// coordin.h -- structure templates and function prototypes // structure templates #ifndef COORDIN_H_ #define COORDIN_H_ struct polar { double distance; // distance from origin double angle; // direction from origin }; struct rect { double x; // horizontal distance from origin double y; // vertical distance from origin }; // prototypes polar rect_to_polar(rect xypos); void show_polar(polar dapos); #endif // file1.cpp -- example of a three-file program #include \u0026lt;iostream\u0026gt; #include \u0026#34;coordin.h\u0026#34; // structure templates, function prototypes using namespace std; int main() { rect rplace; polar pplace; cout \u0026lt;\u0026lt; \u0026#34;Enter the x and y values: \u0026#34;; while (cin \u0026gt;\u0026gt; rplace.x \u0026gt;\u0026gt; rplace.y) // slick use of cin { pplace = rect_to_polar(rplace); show_polar(pplace); cout \u0026lt;\u0026lt; \u0026#34;Next two numbers (q to quit): \u0026#34;; } cout \u0026lt;\u0026lt; \u0026#34;Bye!\\n\u0026#34;; return 0; } // file2.cpp -- contains functions called in file1.cpp #include \u0026lt;iostream\u0026gt; #include \u0026lt;cmath\u0026gt; #include \u0026#34;coordin.h\u0026#34; // structure templates, function prototypes // convert rectangular to polar coordinates polar rect_to_polar(rect xypos) { using namespace std; polar answer; answer.distance = sqrt( xypos.x * xypos.x + xypos.y * xypos.y); answer.angle = atan2(xypos.y, xypos.x); return answer; // returns a polar structure } // show polar coordinates, converting angle to degrees void show_polar (polar dapos) { using namespace std; const double Rad_to_deg = 57.29577951; cout \u0026lt;\u0026lt; \u0026#34;distance = \u0026#34; \u0026lt;\u0026lt; dapos.distance; cout \u0026lt;\u0026lt; \u0026#34;, angle = \u0026#34; \u0026lt;\u0026lt; dapos.angle * Rad_to_deg; cout \u0026lt;\u0026lt; \u0026#34; degrees\\n\u0026#34;; } Header File Management You should include a header file just once in a file. It\u0026rsquo;s easy to include a header file multiple times accidentally. For example, you might use a header file that includes another header file.\nWe can use preprocessor #ifndef (if not defined) directive.\n#ifndef COORDIN_H_ #define COORDIN_H_ // place include file contents here #endif The code above means \u0026ldquo;process the statements between the #ifndef and #endif only if the name COORDIN_H_ has not been defined previously by the preprocessor #define directive.\u0026rdquo;\nStorage Duration, Scope, and Linkage C++ uses four different schemes for storing data,\nAutomatic storage duration: Variables declared inside a function definition (including function parameters) will be created when program enters a function or a block and freed when executuion leaves the function or block. Static storage duration: Varialbes defined outside function definition or with the keyword static have static storage duration. They persist for the entire time a program is running. Thread storage duration: Variables declared with the thread_local keyword have storage that persists for as long as the containing thread lasts. Dynamic storage duration: Memory allocated by the new keyword persists until it is freed with the delete operator or until the program ends. Scope and Linkage Scope describes how widely visible a name is in a file. Linkage describes how a name can be shared in different units (files).\nStatic Duration Variables int global = 1000; // static duration, external linkage (other files can see the variable) static int one_file = 50; // static duration, internal linkage (only this file can see the varialbe) int main() { ... } void funct1(int n) { static int count = 0; // static duration, no linkage (only funct1 can see the variable) int llama = 0; ... } void funct2(int q) { ... } The static duration variables (global, one_file, count) persist when the program begins and execute until the program terminates.\nInitializing Static Variables All static duration variables have the following initialization feature: all its bits set to 0. It is also called zero-initialization.\n#include \u0026lt;cmath\u0026gt; int x; // zero-initialization int y = 5; // constant-expression initialization long z = 13 * 13; // constant-expression initialization const double pi = 4.0 * atan(1.0); // dynamic initialization First, x, y, z and pi are zero-initialized. Then the compiler initialize y and z to 5 and 169. pi will be initialized until the atan() function is linked and the program executes.\nStatic Duration, External Linkage // file01.cpp extern int cats = 20; // definition because of initialization, the extern can be omitted int dogs = 22; // definition ... // file02.cpp // use cats and dogs from file01.cpp extern int cats; // referencing declaration extern int dogs; // does not cause storage to be allocated Static Duration, Internal Linkagek // file01 int errors = 20; // file02 int errors = 5; // this is an error, since violates the one definition rule If we want to use the same variable name, we should addd static keyword.\n// file01 int errors = 20; // file02 static int errors = 5; // this is an error, since violates the one definition rule Static Storage Duration, No Linkage // reference: https://stackoverflow.com/questions/12186857/what-is-the-difference-between-static-local-variables-and-static-global-variable void foo () { static int x = 0; ++x; cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; endl; } int main (int argc, char const *argv[]) { foo(); // 1 foo(); // 2 foo(); // 3 return 0; } The difference between static internal linkage and static local variable is\nThe name is only accessible within the function, and has no linkage It is initialised the first time execution reaches the definition, not necessarily during the program\u0026rsquo;s initialisation phases More About const Whereas a global variable has external linkage by default,a const global variable has internal linkage by default.\nIf, for some reason, you want to make a constant have external linkage, you can use the extern keyword to override the default internal linkage.\nChapter 10: Objects and Classes const Member Functions Consider the following code:\nconst Stock land = Stock(\u0026#34;Kludgeforn Properties\u0026#34;); land.show(); // error In Stock::show() function, we cannot guarantee that it will not modify the object. To solve the issue, we can add const at the end of the function when we declare or write definition for it.\nvoid Stock::show() const{ // promises not to change the object } Chapter 11: Working with Classes Operator Overloading A common computing task is adding two arrays. We might write something like this:\nfor (int i = 0; i \u0026lt; 20; i++){ evening[i] = sam[i] + janet[i]; } We can overload the + operator so that you can do this:\nevening = sam + janet; For example, operator+() overloads the + operator and operator*() overloads the * operator. We can also write operator[]() to overload the [] operator, which is the array-indexing operator.\nLet\u0026rsquo;s say we have a Time class, and we want to use + operator to add two Time objects. We can write the following code:\nclass Time { private: int hours; int minutes; public: Time operator+(const Time \u0026amp;t) const{ Time sum; sum.minutes = minutes + t.minutes; sum.hours = hours + t.hours + sum.minutes / 60; sum.minutes %= 60; return sum; }; ... // other funcions in the class ... }; Now we can simply write time1 + time2 instead of time1.add(time2), and it will be translated to time1.operator+(time2).\nIntroducing Friends There are still some restrictions when overloading operators. For example, if we overload the * operator and write time1 * 2.5, it translates to time1.operator*(2). However, 2.5 * time1 does not correspond to a member function since 2.5 is not a Time object.\nWe can write a nonmember function Time operator*(double m, const Time \u0026amp;t) to resolve this, but it raises a new problem: nonmember functions cannot access private data in a class. There is a special category of nonmenber functions, called friends, that can access private members of a class.\nCreating Friends To create a friend function, we need to add friend keyword in the prefix of the declaration.\nfriend Time operator*(double m, const Time \u0026amp;t); // goes in class declaration The friend function is not a member function although it is in class declaration, but it has the same access rights as a member function.\nThe definition should like this:\n// no need to add friend keyword // no need to write Time Time::operator*(double m, const Time \u0026amp;t) since it is not a member function Time operator*(double m, const Time \u0026amp;t){ Time result; long totalminutes = t.hours * mult * 60 +t. minutes * mult; // can access private members result.hours = totalminutes / 60; result.minutes = totalminutes % 60; return result; } Now, the statement time2 = 2.5 * time1 translates to time2 = operator*(2.5, time1)\nActually, we can write it as a non-friend function. However, it is better to write it as a friend function, since it ties the function and the class interface together, and allows potential access to private data in the future.\nTime operator*(double m, const Time \u0026amp;t){ return t * m; // use t.operator*(m) // no need to access private members } Overloading the \u0026lt;\u0026lt; Operator Suppose trip is a Time object. To display Time values, we need to write trip.show() to print out the values. However, we could overload the \u0026lt;\u0026lt; operator and make cout \u0026lt;\u0026lt; trip print out the values.\nWe can overload the operator this way:\nvoid operator\u0026lt;\u0026lt;(ostream \u0026amp;os, const Time \u0026amp;t){ os \u0026lt;\u0026lt; t.hours \u0026lt;\u0026lt; \u0026#34;hours, \u0026#34; \u0026lt;\u0026lt; t.minutes \u0026lt;\u0026lt; \u0026#34; minutes\u0026#34;; } How about a more complex one, something like this: cout \u0026lt;\u0026lt; \u0026quot;Trip time: \u0026quot; \u0026lt;\u0026lt; trip \u0026lt;\u0026lt; \u0026quot;\\n\u0026quot;;\nActually, cout is an ostream object, and the ostream class returns a reference to an ostream object when implementing the \u0026lt;\u0026lt; operator.\nWe just need to make operator\u0026lt;\u0026lt;() return a ostream object.\nostream\u0026amp; operator\u0026lt;\u0026lt;(ostrream \u0026amp;os, const Time \u0026amp;t){ os \u0026lt;\u0026lt; t.hours \u0026lt;\u0026lt; \u0026#34;hours, \u0026#34; \u0026lt;\u0026lt; t.minutes \u0026lt;\u0026lt; \u0026#34; minutes\u0026#34;; return os; } A Vector Class Vector class\nAutomatic Conversions and Type Casts for Classes C++ provides the following type conversions for classes:\nA class constructor that has but a single argument serves as an instruction for converting a value of the argument type to the class type. For example, if we have a constructor Stonewt(double lbs) for Stonewt class. Then Stonewt myCat = 19.6 will convert 19.6 to a Stonewt object.\nHowever, using explicit in the constructor declaration eliminates implicit conversions and allows only explicit conversions.\nexplicit Stonewt(double lbs); // no implicit conversions allowed Stonewt myCat; // create a Stonewt object myCat = 19.6; // not valid if Stonewt(double) is declared as explicit mycat = Stonewt(19.6); // ok, an explicit conversion mycat = (Stonewt) 19.6; // ok, old form for explicit typecast A special class member operator function called a conversion function serves as an instruction for converting a class object to some other type. This conversion function is invoked automatically when you assign a class object to a variable of that type or use the type cast operator to that type. class Stonewt { ... // conversion functions explicit operator int() const; }; Stonewt::operator int() { return int (pounds + 0.5); } Stonewt wolfe(285.7); int host = int (wolfe); // an explicit conversion Conversions and Friends Stonewt operator+(const Stonewt \u0026amp; st1, const Stonewt \u0026amp; st2) // friend function { double pds = st1.pounds + st2.pounds; Stonewt sum(pds); return sum; } Stonewt jennySt(9, 12); double pennyD = 146.0; Stonewt total; total = pennyD + jennySt; // ok with friend function, but not member function // convert pennyD to a Stonewt object Chapter 12: Classes and Dynamic Memory Allocation A Review Example and Static Class Members Let\u0026rsquo;s take a look at a class example:\n// strngbad.h -- flawed string class definition #include \u0026lt;iostream\u0026gt; #ifndef STRNGBAD_H_ #define STRNGBAD_H_ class StringBad { private: char * str; // pointer to string int len; // length of string static int num_strings; // number of objects public: StringBad(const char * s); // constructor StringBad(); // default constructor ~StringBad(); // destructor // friend function friend std::ostream \u0026amp; operator\u0026lt;\u0026lt;(std::ostream \u0026amp; os, const StringBad \u0026amp; st); }; #endif // strngbad.cpp -- StringBad class methods #include \u0026lt;cstring\u0026gt; // string.h for some #include \u0026#34;strngbad.h\u0026#34; using std::cout; // initializing static class member int StringBad::num_strings = 0; // class methods // construct StringBad from C string StringBad::StringBad(const char * s) { len = std::strlen(s); // set size str = new char[len + 1]; // allot storage std::strcpy(str, s); // initialize pointer num_strings++; // set object count cout \u0026lt;\u0026lt; num_strings \u0026lt;\u0026lt; \u0026#34;: \\\u0026#34;\u0026#34; \u0026lt;\u0026lt; str \u0026lt;\u0026lt; \u0026#34;\\\u0026#34; object created\\n\u0026#34;; // For Your Information } StringBad::StringBad() // default constructor { len = 4; str = new char[4]; std::strcpy(str, \u0026#34;C++\u0026#34;); // default string num_strings++; cout \u0026lt;\u0026lt; num_strings \u0026lt;\u0026lt; \u0026#34;: \\\u0026#34;\u0026#34; \u0026lt;\u0026lt; str \u0026lt;\u0026lt; \u0026#34;\\\u0026#34; default object created\\n\u0026#34;; // FYI } StringBad::~StringBad() // necessary destructor { cout \u0026lt;\u0026lt; \u0026#34;\\\u0026#34;\u0026#34; \u0026lt;\u0026lt; str \u0026lt;\u0026lt; \u0026#34;\\\u0026#34; object deleted, \u0026#34;; // FYI --num_strings; // required cout \u0026lt;\u0026lt; num_strings \u0026lt;\u0026lt; \u0026#34; left\\n\u0026#34;; // FYI delete [] str; // required } std::ostream \u0026amp; operator\u0026lt;\u0026lt;(std::ostream \u0026amp; os, const StringBad \u0026amp; st) { os \u0026lt;\u0026lt; st.str; return os; } Notice that we initializes the static num_strings member to 0 in the .cpp file instead of the header file. That\u0026rsquo;s because we cannot initialize a static member variable inside the class declaration. Declaration only tells how to allocate the memory, but it doesn\u0026rsquo;t allocate memory. For static members, we need to initialize outside the class declaration (but not const static).\nThe StringBad class seems fine, however, there\u0026rsquo;s actually some problems. Let\u0026rsquo;s look at an example:\nvoid callme(StringBad sb){ cout \u0026lt;\u0026lt; \u0026#34;String passed by value:\\n\u0026#34;; cout \u0026lt;\u0026lt; \u0026#34; \\\u0026#34;\u0026#34; \u0026lt;\u0026lt; sb \u0026lt;\u0026lt; \u0026#34;\\\u0026#34;\\n\u0026#34;; } StringBad headline(\u0026#34;Celery Stalks at Midnight\u0026#34;); callme(headline); cout \u0026lt;\u0026lt; headline \u0026lt;\u0026lt; endl; // print out something strange When we pass by value, the function will create a temporary StringBad object that points to the same address as the headline does. After the callme function, the destructor will be called, causing the pointer to be released, which messes up the original string.\nSpecial Member Functions The problems with the StringBad class stem from special member functions. C++ provides the following member functions:\nA default constructor if you define no constructors A default destructor if you don’t define one A copy constructor if you don’t define one An assignment operator if you don’t define one An address operator if you don’t define one Default Constructor If we omit any constructors, the compiler will call the default constructor. If we define a constructor with no arguments, or its arguments have default values, it will become the default constructor.\nHowever, we can have only one default constructor; otherwise, there will be ambiguity.\nClass_name(){}; // default constructor Class_name(){ // default constructor with no arguments member = 0; } Class_name(){int n = 0}{ // default constructor with default argument value member = n; } Copy Constructor A copy constructor for a class normally has this prototype: Class_name(const Class_name \u0026amp;);. The default copy constructor performs a member-by-member copy of the nonstatic members. Each member is copied by value.\nA copy constructor is invoked whenever a new object is created and initialized to an existing object of the same kind.\n// given that motto is a StringBad object StringBad ditto(motto); // calls StringBad(const StringBad \u0026amp;) StringBad metoo = motto; // calls StringBad(const StringBad \u0026amp;) StringBad also = StringBad(motto); // calls StringBad(const StringBad \u0026amp;) StringBad * pStringBad = new StringBad(motto); // calls StringBad(const StringBad \u0026amp;) The middle two declarations may use a copy constructor directly to create metoo and also, or they may use a copy constructor to generate temporary objects whose contents are then assigned to metoo and also.\nBack to Stringbad: Where the Copy Constructor Goes Wrong The callme function creates a temporary variable that invokes the copy constructor, and this variable points to the same address as our original object. We should provide a copy constructor for the StringBad class.\nStringBad::StringBad(const StringBad \u0026amp; st) { num_strings++; // handle static member update len = st.len; // same length str = new char [len + 1]; // allot space std::strcpy(str, st.str); // copy string to new location cout \u0026lt;\u0026lt; num_strings \u0026lt;\u0026lt; \u0026#34;: \\\u0026#34;\u0026#34; \u0026lt;\u0026lt; str \u0026lt;\u0026lt; \u0026#34;\\\u0026#34; object created\\n\u0026#34;; // For Your Information } Assignment Operator Assignment Operator has the following prototype:Class_name \u0026amp; Class_name::operator=(const Class_name \u0026amp;);.\nAn overloaded assignment operator is used when you assign one object to another existing object:\nStringBad headline(\u0026#34;Celery Stalks at Midnight\u0026#34;); StringBad knot; knot = headline; // assignment operator invoked Like a copy constructor,an implicit implementation of an assignment operator performs a member-to-member copy.\nBack to Stringbad: Where the Assignment Goes Wrong We should also provide a assignment operator for the StringBad class. The implementation is similar to that of the copy constructor, but there are some differences:\nUse delete [] to free the old string The function should protect against assigning an object to itself The function returns a reference to the invoking object Here is the implementation:\nStringBad \u0026amp; StringBad::operator=(const StringBad \u0026amp; st) { if (this == \u0026amp;st) // object assigned to itself return *this; // all done delete [] str; // free old string len = st.len; str = new char [len + 1]; // get space for new string std::strcpy(str, st.str); // copy the string return *this; // return reference to invoking object } The New, Improved String Class We still need a few functions to improve the String class, such as comparison members or bracket notation.\nHere is an improved String class:\nString class\nFor static class member functions, it can only use static data members, since it is not associated with a particular object.\nWe added String \u0026amp; String::operator=(const char * s) to improve efficiency. Consider the following code:\nString name; char temp[40]; cin.getline(temp, 40); name = temp; // use constructor to convert type The program will do the following steps:\nUse String(const char *) constructor to construct a temporary String object Use String \u0026amp; String::operator=(const String \u0026amp;) to copy the object to name call ~String() destructor to delete the temporary object Which is slower than copying the C string directly to the String object.\nLooking Again at Placement new Using placement new is different from using regular new to allocate memory for objects. If we want to destroy the object that was allocated by placement new, we must call the destructor explicitly to do so.\nchar * buffer = new char[512]; // get a block of memory MyClass *ptr; ptr = new (buffer) MyClass; // place object in buffer ptr-\u0026gt;~MyClass(); // call the destructor explicitly delete [] buffer; // Free the raw memory allocated earlier We have to call the destructor instead of delete. The reason is that delete does two things:\nIt calls the destructor of the object It attempts to free the memory where the object was located However, when using the placement new, the memory location is provided by us, and therefore delete might not know how to correctly deallocate it, leading to undefined behavior.\nMember Initializer List Let\u0026rsquo;s say we have a class that looks like this:\nclass Queue{ private: enum {Size = 10}; Node * front; // pointer to front of Queue Node * rear; // pointer to rear of Queue int items; // current number of items in Queue const int qsize; // maximum number of items in Queue public: Queue(int qs) { front = rear = NULL; items = 0; qsize = qs; // not acceptable! } }; We want to assign qs to the qsize variable, however, const variable can only be initialized to a value, not assigned to a value.\nCalling a constructor creates an object before the code within the brackets is executed. Thus, the constructor will first allocate space for the four member variables, then enter the brackets and assign values into allocated space.\nWe can use member initializer list syntax to initialize member variables.\nQueue(int qs) : qsize(qs) // initialize qsize to qs, instead of assigning { front = rear = NULL; items = 0; } // or Queue(int qs) : qsize(qs), front(NULL), rear(NULL), items(0) { } Only constructors can use this initializer-list syntax. We also have to use it for class members that are declared as references.\nIn-class initialization is equivalent to using a member initialization list in the constructors:\nclass Classy{ int mem1 = 10; // in-class initialization } // is equivalent to Classy(): mem1(10){ ... } The items are initialized in the order which they are decalred, not in the order in which they appear in the initializer list.\nChapter 13: Class Inheritance Beginning with a Simple Base Class // tabtenn0.h -- a table-tennis base class #ifndef TABTENN0_H_ #define TABTENN0_H_ #include \u0026lt;string\u0026gt; using std::string; // simple base class class TableTennisPlayer { private: string firstname; string lastname; bool hasTable; public: TableTennisPlayer (const string \u0026amp; fn = \u0026#34;none\u0026#34;, const string \u0026amp; ln = \u0026#34;none\u0026#34;, bool ht = false); void Name() const; bool HasTable() const { return hasTable; }; void ResetTable(bool v) { hasTable = v; }; }; #endif //tabtenn0.cpp -- simple base-class methods #include \u0026#34;tabtenn0.h\u0026#34; #include \u0026lt;iostream\u0026gt; TableTennisPlayer::TableTennisPlayer (const string \u0026amp; fn, const string \u0026amp; ln, bool ht) : firstname(fn), lastname(ln), hasTable(ht) {} void TableTennisPlayer::Name() const { std::cout \u0026lt;\u0026lt; lastname \u0026lt;\u0026lt; \u0026#34;, \u0026#34; \u0026lt;\u0026lt; firstname; } Now we can create RatedPlayer class that derives from the TableTennesPlayer base class:\n// RatedPlayer derives from the TableTennisPlayer base class class RatedPlayer : public TableTennisPlayer { private: unsigned int rating; // add a data member public: RatedPlayer (unsigned int r = 0, const string \u0026amp; fn = \u0026#34;none\u0026#34;, const string \u0026amp; ln = \u0026#34;none\u0026#34;, bool ht = false); RatedPlayer(unsigned int r, const TableTennisPlayer \u0026amp; tp); unsigned int Rating() const { return rating; } // add a method void ResetRating (unsigned int r) {rating = r;} // add a method }; With public derivation, the public members of the base class become public members of the derived class. The private portions of a base class become part of the derived class, but they can be accessed only through public and protected methods of the base class.\nConstructors When a program constructs a derived-class object, it first constructs the base-class object. We must use member initailizer list syntax to construct base-class object before we enter the body of the derived-class constructor.\nRatedPlayer::RatedPlayer(unsigned int r, const string \u0026amp; fn, const string \u0026amp; ln, bool ht) : TableTennisPlayer(fn, ln, ht) { rating = r; } We we omit calling a base-class constructor, the program uses the default constructor.\nRatedPlayer::RatedPlayer(unsigned int r, const string \u0026amp; fn, const string \u0026amp; ln, bool ht) { rating = r; } // is same as RatedPlayer::RatedPlayer(unsigned int r, const string \u0026amp; fn, const string \u0026amp; ln, bool ht) : TableTennisPlayer() { rating = r; } Special Relationships Between Derived and Base Classes A base-class pointer can point to a derivedclass object without an explicit type cast and that a base-class reference can refer to a derived-class object without an explicit type cast.\nRatedPlayer player1(1140, \u0026#34;Mallory\u0026#34;, \u0026#34;Duck\u0026#34;, true); TableTennisPlayer \u0026amp; rt = player; TableTennisPlayer * pt = \u0026amp;player; rt.Name(); // invoke Name() with reference pt-\u0026gt;Name(); // invoke Name() with pointer TableTennisPlayer player2(player1); // The exact match should be TableTennisPlayer(const RatedPlayer \u0026amp;) that doesn\u0026#39;t exist // but there is the implicit copy constructor TableTennisPlayer(const TableTennisPlayer \u0026amp;) However,a base-class pointer or reference can invoke just base-class methods, not derived-class methods.\nPolymorphic Public Inheritance virtual determines which method is used if the method is invoked by a reference or a pointer instead of by an object. If you don’t use the keyword virtual, the program chooses a method based on the reference type or pointer type.\nFor example, if we have a base-class Brass and a derived-class BrassPlus, and a virtual function ViewAcct() for both classes.\nBrass dom(\u0026#34;Dominic Banker\u0026#34;, 11224, 4183.45); BrassPlus dot(\u0026#34;Dorothy Banker\u0026#34;, 12118, 2592.00); dom.ViewAcct(); // use Brass::ViewAcct() dot.ViewAcct(); // use BrassPlus::ViewAcct() Brass \u0026amp;b1_ref = dom; Brass \u0026amp;b2_ref = dot; b1_ref.ViewAcct(); // use Brass::ViewAcct() b2_ref.ViewAcct(); // use BrassPlus::ViewAcct() If we don\u0026rsquo;t have virtual keyword for the function, the reference will use Brass::ViewAcct() in both line of code.\nWhen a method is declared virtual in a base class, it is automatically virtual in the derived class, but it is a good idea to document which functions are virtual by using the keyword virtual in the derived class declarations.\nThe Need for Virtual Destructors It\u0026rsquo;s also the usual practice to declare a virtual destructor for the base class. It ensures that the correct sequence of destructors is called.\nBrass *ptr = new BrassPlus(); delete ptr; // calls BrassPlus destructor // then automatically calls the base-class destructor How Virtual Functions Work The usual way compilers handle virtual functions is to add a hidden member to each object.The hidden member holds a pointer to an array of function addresses. Such an array is usually termed a virtual function table (vtbl). When we call a virtual function, the program looks at the vtbl address stored in an object and goes to the corresponding table of function addresses.\nIn short, using virtual functions has the following modest costs in memory and execution speed:\nEach object has its size increased by the amount needed to hold an address For each class, the compiler creates a table (an array) of addresses of virtual functions For each function call, there\u0026rsquo;s an extra step of going to a table to look up an address Redefinition Hides Methods Suppose we create something like the following:\nclass Dwelling { public: virtual void showperks(int a) const; ... }; class Hovel : public Dwelling { public: virtual void showperks() const; ... }; Hovel trump; trump.showperks(); // valid trump.showperks(5); // invalid The new showperks() function that takes no arguments will hide the base class version that takes an int argument (it actually hides all base-class methods of the same name), instead of overloading the function.\nIf the base class declaration is overloaded, we need to redefine all the base-class version in the derived class.\nclass Dwelling { public: // three overloaded showperks() virtual void showperks(int a) const; virtual void showperks(double x) const; virtual void showperks() const; ... }; class Hovel : public Dwelling { public: // three redefined showperks() virtual void showperks(int a) const; virtual void showperks(double x) const; virtual void showperks() const; ... }; If we redefine just one version, the other two become hidden and cannot be used by objects of the derived class.\nAccess Control: protected The protected keyword is like private in outside world and public for derived class. It\u0026rsquo;s useful for derived class to access to internal functions that are not available publicly.\nAbstract Base Classes (ABC) Suppose we want to create two classes, Circle and Ellipse. Of course we can first write the Ellipse class and then write the Circle class by inheriting the Ellipse class, since a circle is-a ellipse. However, this derivation is awkward, because circle is simpler than ellipse. It seems simpler to define a Circle class without using inheritance.\nThe useful thing about ABC is that we can extract the same part of circle and ellipse, and derive the Circle and Ellipse classes from the ABC. For the different part of circle and ellipse, we can create pure virtual functions in ABC and let derived class to override them.\nWhen a class contains a pure virtual function, we can\u0026rsquo;t create an object of that class. C++ allows even a pure virtual funciton to have a definition. We can make the prototype virtual but still provide a definition in the implementation file.\nInheritance and Dynamic Memory Allocation When both the base class and the derived class use dynamic memory allocation, the derived-class destructor, copy constructor,and assignment operator all must use their base-class counterparts to handle the base-class component.\nFor a destructor, it is done automatically.\nbaseDMA::~baseDMA() // takes care of baseDMA stuff { delete [] label; } hasDMA::~hasDMA() // takes care of hasDMA stuff { delete [] style; } For a copy constructor, it is accomplished by invoking the base-class copy constructor in the member initialization list, or else the default constructor is invoked automatically.\nbaseDMA::baseDMA(const baseDMA \u0026amp; rs) { label = new char[std::strlen(rs.label) + 1]; std::strcpy(label, rs.label); rating = rs.rating; } hasDMA::hasDMA(const hasDMA \u0026amp; hs): baseDMA(hs) { style = new char[std::strlen(hs.style) + 1]; std::strcpy(style, hs.style); } For the assignment operator, it is accomplished by using the scope-resolution operator in an explicit call of the base-class assignment operator.\nbaseDMA \u0026amp; baseDMA::operator=(const baseDMA \u0026amp; rs) { if (this == \u0026amp;rs) return *this; delete [] label; label = new char[std::strlen(rs.label) + 1]; std::strcpy(label, rs.label); rating = rs.rating; return *this; } hasDMA \u0026amp; hasDMA::operator=(const hasDMA \u0026amp; hs) { if (this == \u0026amp;hs) return *this; baseDMA::operator=(hs); // copy base portion, same as *this = hs delete [] style; // prepare for new style style = new char[std::strlen(hs.style) + 1]; std::strcpy(style, hs.style); return *this; } Chapter 14: Reusing Code in C++ Private Inheritance We use public inheritance to create is-a relationship, however, when we use private inheritance, it creates has-a relationship.\nIt seems weird to use a private inheritance, since we have no right to access base class methods in the outside world, but actually, the derived class contains all the members and data of the base class, so it creates has-a relationship.\nStudent Class Example Let\u0026rsquo;s say we want to create a Student class, the class should contain a string member and a valarray member. We could use containment to do so, but try private inheritance in here.\nclass Student : private std::string, private std::valarray\u0026lt;double\u0026gt; { public: ... }; We don\u0026rsquo;t need to create private data in the Student class, it\u0026rsquo;s because the two inherited base class already provide all the needed data members.\nInitializing Base-Class Components // containment Student(const char * str, const double * pd, int n) : name(str), scores(pd, n) {} // use object names for containment // private inheritance Student(const char * str, const double * pd, int n) : std::string(str), std::valarray\u0026lt;double\u0026gt;(pd, n) {} // use class names for inheritance Accessing Base-Class Methods Containment adds an object to a class as a named member object, and we use the variable name as a interface to access the class. Private inheritance provides the same feature as containment, but only without the interface, however, inheritance lets you use the class name and the scope-resolution operator to invoke base-class methods:\n// containment double Student::Average() const { if (scores.size() \u0026gt; 0) return scores.sum()/scores.size(); else return 0; } // private inheritance double Student::Average() const { if (ArrayDb::size() \u0026gt; 0) return ArrayDb::sum()/ArrayDb::size(); else reutrn 0; } Accessing Base-Class Objects The way to access base-class objects is to use a type cast. Because Student is derived from a string, it\u0026rsquo;s possible to type cast a Student object to a string object.\nconst string \u0026amp; Student::Name() const { return (const string \u0026amp;) *this; } Accessing Base-Class Friends We use explicit type cast to invoke the correct functions. This is basically the same technique used to access a base-class object in a class method.\nostream \u0026amp; operator\u0026lt;\u0026lt;(ostream \u0026amp; os, const Student \u0026amp; stu) { os \u0026lt;\u0026lt; \u0026#34;Scores for \u0026#34; \u0026lt;\u0026lt; (const String \u0026amp;) stu \u0026lt;\u0026lt; \u0026#34;:\\n\u0026#34;; ... } \u0026lt;\u0026lt; (const String \u0026amp;) stu converts stu to a string object, then invokes the operator\u0026lt;\u0026lt;(ostream \u0026amp;, const string \u0026amp;) function.\nThe revised Student class Student\nContainment or Private Inheritance? Both containment and private inheritance can create has-a relationship, but which one should we use? In general, we should use containment to model a has-a relationship, and use private inheritance if the new class needs to access protected members in the original class or if it needs to redefine virtual functions.\nProtected Inheritance With protected inheritance, public and protected members of a base class become protected members of the derived class. The main difference between private and protected inheritance is when we derive another class from a derived class.\nRedefining Access with using Suppose we want to make a particular base-class method available publicly in the derived class. A easy way is to define a derived-class method that uses the base-class method. For example:\ndouble Student::sum() const // public Student method { return std::valarray\u0026lt;double\u0026gt;::sum(); // use privately-inherited method } Another way is to use a using declaration. For example:\nclass Student : private std::string, private std::valarray\u0026lt;double\u0026gt; { ... public: using std::valarray\u0026lt;double\u0026gt;::min; using std::valarray\u0026lt;double\u0026gt;::max; ... }; The using declaration makes the valarray\u0026lt;double\u0026gt;::min() and valarray\u0026lt;double\u0026gt;::max() methods available as if they were public Student methods.\nMultiple Inheritance Let\u0026rsquo;s say we have a base class called Worker, and two derived class, Singer and Waiter. We can derive a SingingWaiter class from Singer and Waiter class:\nclass SingingWaiter : public Waiter, public Singer {...}; This is called multiple inheritance (MI).\nMI can cause new problems.\ninheriting different methods with the same name from two different base classes inheriting nultiple instances of a class via two or more related immediate base class (SingingWaiter class encounters) Let\u0026rsquo;s look at an example.\nWorker0\nThe main difference between Singer and Worker class is the Show function. What will happen if we call the Show function in SingingWaiter class?\nHow Many Workers? SingingWaiter winds up two Worker components.\nWe can assign the address of a derived-class object to a base-class pointer, however, this does not work in MI, since it\u0026rsquo;s ambiguous now. We should specify which Worker we are pointing at:\nSingingWaiter ed; Worker * pw = \u0026amp;ed; // ambiguous Worker * pw1 = (Waiter *) \u0026amp;ed; // the Worker in Waiter Worker * pw2 = (Singer *) \u0026amp;ed; // the Worker in Singer Virtual Base Classes Virtual base classes allow an object derived from multiple bases that themselves share a common base to inherit just one object of that shared base class.\nWe would make Worker a virtual base class to Singer and Waiter by using the keyword virtual in the class declarations:\n// both order is valid class Singer : virtual public Worker {...}; class Waiter : public virtual Worker {...}; // define SingingWaiter as before class SingingWaiter: public Singer, public Waiter {...}; New Constructor Rules C++ disables the automatic passing of information through an intermediate class to a base class if the base class is virtual. We have to call the virtual base class constructor explicitly.\n// wk will not be pass down to base class constructor, it will use default base class constructor SingingWaiter(const Worker \u0026amp; wk, int p = 0, int v = Singer::other) : Waiter(wk,p), Singer(wk,v) {} // flawed // the correct way to initialize, this will work only if we have virtual base class SingingWaiter(const Worker \u0026amp; wk, int p = 0, int v = Singer::other) : Worker(wk), Waiter(wk,p), Singer(wk,v) {} Which Method? Use scope-resolution operator to clarify which funciton we want to invoke.\nSingingWaiter newhire(\u0026#34;Elise Hawks\u0026#34;, 2005, 6, soprano); newhire.Show(); // ambiguous SingingWaiter newhire(\u0026#34;Elise Hawks\u0026#34;, 2005, 6, soprano); newhire.Singer::Show(); // use Singer version A better way is to redefine Show() for SingingWaiter and specify which Show() to use (or use both).\nHowever, the Show() function is an increment approach.\nvoid Worker::Show() const { cout \u0026lt;\u0026lt; \u0026#34;Name: \u0026#34; \u0026lt;\u0026lt; fullname \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; cout \u0026lt;\u0026lt; \u0026#34;Employee ID: \u0026#34; \u0026lt;\u0026lt; id \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; } void Waiter::Show() const { cout \u0026lt;\u0026lt; \u0026#34;Category: waiter\\n\u0026#34;; Worker::Show(); cout \u0026lt;\u0026lt; \u0026#34;Panache rating: \u0026#34; \u0026lt;\u0026lt; panache \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; } void Singer::Show() const { cout \u0026lt;\u0026lt; \u0026#34;Category: singer\\n\u0026#34;; Worker::Show(); cout \u0026lt;\u0026lt; \u0026#34;Vocal range: \u0026#34; \u0026lt;\u0026lt; pv[voice] \u0026lt;\u0026lt; endl; } We can\u0026rsquo;t combine Waiter::Show() and Singer::Show() without calling Worker::Show() twice.\nWe can use a modular approach to solve this. That is, providing a method that displays only the new components.\nvoid Worker::Data() const { cout \u0026lt;\u0026lt; \u0026#34;Name: \u0026#34; \u0026lt;\u0026lt; fullname \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; cout \u0026lt;\u0026lt; \u0026#34;Employee ID: \u0026#34; \u0026lt;\u0026lt; id \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; } void Waiter::Data() const { cout \u0026lt;\u0026lt; \u0026#34;Panache rating: \u0026#34; \u0026lt;\u0026lt; panache \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; } void Singer::Data() const { cout \u0026lt;\u0026lt; \u0026#34;Vocal range: \u0026#34; \u0026lt;\u0026lt; pv[voice] \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; } void SingingWaiter::Data() const { Singer::Data(); Waiter::Data(); } void SingingWaiter::Show() const { cout \u0026lt;\u0026lt; \u0026#34;Category: singing waiter\\n\u0026#34;; Worker::Data(); Data(); } Mixed Virtual and Nonvirtual Bases Suppose, for example, that class B is a virtual base class to classes C and D and a nonvirtual base class to classes X and Y. Furthermore, suppose class M is derived from C, D, X, and Y. In this case, class M contains one class B subobject for all the virtually derived ancestors (that is, classes C and D) and a separate class B subobject for each nonvirtual ancestor (that is, classes X and Y). So, all told, it would contain three class B subobjects.\nVirtual Base Classes and Dominance With nonvirtual base classes, if a class inherits two or more members (data or methods) with the same name from different classes, using that name without qualifying it with a class name is ambiguous. If virtual base classes are involved, however, such a use may or may not be ambiguous. In this case, if one name dominates all others, it can be used unambiguously without a qualifier.\nclass B { public: short q(); } class C : virtual public B { public: long q(); int omg() }; class D : public C {}; class E : virtual public B { private: int omg(); }; class F: public D, public E {}; The q() from class C dominates the definition in class B, thus, methods in F can use q() to denote C::q(). Neither definition of omg() dominates the other, therefore, we must add qualifier.\nThe virtual ambiguity rules pay no attention to access rules. That is, even if E::omg() is private, using omg() is ambiguous. Even if C::q() is private, q() would still refer to inaccessible C::q().\nClass Templates Let\u0026rsquo;s just see a template example.\n// stacktp.h -- a stack template #ifndef STACKTP_H_ #define STACKTP_H_ template \u0026lt;typename Type\u0026gt; class Stack { private: enum {MAX = 10}; // constant specific to class Type items[MAX]; // holds stack items int top; // index for top stack item public: Stack(); bool isempty(); bool isfull(); bool push(const Type \u0026amp; item); // add item to stack bool pop(Type \u0026amp; item); // pop top into item }; template \u0026lt;typename Type\u0026gt; Stack\u0026lt;Type\u0026gt;::Stack() { top = 0; } template \u0026lt;typename Type\u0026gt; bool Stack\u0026lt;Type\u0026gt;::isempty() { return top == 0; } template \u0026lt;typename Type\u0026gt; bool Stack\u0026lt;Type\u0026gt;::isfull() { return top == MAX; } template \u0026lt;typename Type\u0026gt; bool Stack\u0026lt;Type\u0026gt;::push(const Type \u0026amp; item) { if (top \u0026lt; MAX) { items[top++] = item; return true; } else return false; } template \u0026lt;typename Type\u0026gt; bool Stack\u0026lt;Type\u0026gt;::pop(Type \u0026amp; item) { if (top \u0026gt; 0) { item = items[--top]; return true; } else return false; } #endif Notice that we have to put class declaration and definition in the same file, since class templates are not class, they are just instructions to the compiler about how to generate class (same as funciton templates).\nAn Array Template Example and Non-Type Arguments Let\u0026rsquo;s begin with a simple array template that lets you specify an array size. One is to use a dynamic array and a constructor argument to provide the number of elements.\ntemplate \u0026lt;class T\u0026gt; Stack\u0026lt;T\u0026gt;::Stack(int ss): stacksize(ss), top(0){ items = new Type [stacksize] } Another approach is to use a template argument to provide the number of elements. This is what std::array does.\ntemplate\u0026lt;class T, int n\u0026gt; class ArrayTP{ private: T ar[n]; ... } T is a type parameter, or type argument. n is called a non-type, or expression argument.\nExpression arguments can be an integer type, an enumerration type, a reference, or a pointer. Also the template code can\u0026rsquo;t alter the value of the arument or take its address. Also when instantiating a template, the expression argument should be a constant expression.\nThe constructor approach (the Stack example) uses heap memory, whereas the expressoin argument approach uses memory stack. This provides faster execution time, particularly if we have a lot of small arrays.\nHowever, the drawback is that different array sizes generate different templates. Also, the constructor approach is more versatile, since you can resize the array.\nTemplate Versatility Using More Than One Type Parameter We can also write this:\ntemplate \u0026lt;class T1, class T2\u0026gt; class Pair{ private: T1 a; T2 b; ... } Default Type Template Parameters template \u0026lt;class T1, class T2 = int\u0026gt; class Topo {...}; Topo\u0026lt;double, double\u0026gt; m1; // T1 is double, T2 is double Topo\u0026lt;double\u0026gt; m2; // T1 is double, T2 is int Template Specializations It is similar to function templates.\nImplicit Instantiations The compiler doesn\u0026rsquo;t generate an implicit instantiation of the class until it needs an object:\nArrayTP\u0026lt;double, 30\u0026gt; * pt; // a pointer, no object needed yet pt = new ArrayTP\u0026lt;double, 30\u0026gt;; // now an object is needed Explicit Instantiations template class ArrayTP\u0026lt;string, 100\u0026gt;; // generate ArrayTP\u0026lt;string, 100\u0026gt; class The compiler generates the class definition, including method definitions, even though no object of the class has yet been created or mentioned.\nExplicit Specializations Tells the compiler to generate the template in a particular way.\nLet\u0026rsquo;s say we have a template, and we want to specialize it when the type is const char *:\ntemplate \u0026lt;typename T\u0026gt; class SortedArray { ...// details omitted }; // specialization template \u0026lt;\u0026gt; class SortedArray\u0026lt;const char *\u0026gt; { ...// details omitted }; Partial Specializations // general template template \u0026lt;class T1, class T2\u0026gt; class Pair {...}; // specialization with T2 set to int template \u0026lt;class T1\u0026gt; class Pair\u0026lt;T1, int\u0026gt; {...}; // specialization with T1 and T2 set to int template \u0026lt;\u0026gt; class Pair\u0026lt;int, int\u0026gt; {...}; Pair\u0026lt;double, double\u0026gt; p1; // use general Pair template Pair\u0026lt;double, int\u0026gt; p2; // use Pair\u0026lt;T1, int\u0026gt; partial specialization Pair\u0026lt;int, int\u0026gt; p3; // use Pair\u0026lt;int, int\u0026gt; explicit specialization template\u0026lt;class T\u0026gt; class Feeb { ... };// general version template\u0026lt;class T*\u0026gt; class Feeb { ... };// pointer partial specialization Feeb\u0026lt;char\u0026gt; fb1; // use general Feeb template, T is char Feeb\u0026lt;char *\u0026gt; fb2; // use Feeb T* specialization, T is char // general template template \u0026lt;class T1, class T2, class T3\u0026gt; class Trio{...}; // specialization with T3 set to T2 template \u0026lt;class T1, class T2\u0026gt; class Trio\u0026lt;T1, T2, T2\u0026gt; {...}; // specialization with T3 and T2 set to T1* template \u0026lt;class T1\u0026gt; class Trio\u0026lt;T1, T1*, T1*\u0026gt; {...}; Trio\u0026lt;int, short, char *\u0026gt; t1; // use general template Trio\u0026lt;int, short\u0026gt; t2; // use Trio\u0026lt;T1, T2, T2\u0026gt; Trio\u0026lt;char, char *, char *\u0026gt; t3; use Trio\u0026lt;T1, T1*, T1*\u0026gt; Member Templates A template can be a member of a structure, class, or template class.\ntemplate \u0026lt;typename T\u0026gt; class beta { private: template \u0026lt;typename V\u0026gt; // nested template class member class hold { private: V val; public: hold(V v = 0) : val(v) {} void show() const { cout \u0026lt;\u0026lt; val \u0026lt;\u0026lt; endl; } V Value() const { return val; } }; hold\u0026lt;T\u0026gt; q; // template object hold\u0026lt;int\u0026gt; n; // template object public: beta( T t, int i) : q(t), n(i) {} template\u0026lt;typename U\u0026gt; // template method U blab(U u, T t) { return (n.Value() + q.Value()) * u / t; } void Show() const { q.show(); n.show();} }; We can also write the definition outside the class template, but it depends on the compiler. Some compilers don\u0026rsquo;t support.\ntemplate \u0026lt;typename T\u0026gt; class beta { private: template \u0026lt;typename V\u0026gt; // declaration class hold; hold\u0026lt;T\u0026gt; q; hold\u0026lt;int\u0026gt; n; public: beta( T t, int i) : q(t), n(i) {} template\u0026lt;typename U\u0026gt; // declaration U blab(U u, T t); void Show() const { q.show(); n.show();} }; // member definition template \u0026lt;typename T\u0026gt; template\u0026lt;typename V\u0026gt; class beta\u0026lt;T\u0026gt;::hold { private: V val; public: hold(V v = 0) : val(v) {} void show() const { std::cout \u0026lt;\u0026lt; val \u0026lt;\u0026lt; std::endl; } V Value() const { return val; } }; // member definition template \u0026lt;typename T\u0026gt; template \u0026lt;typename U\u0026gt; U beta\u0026lt;T\u0026gt;::blab(U u, T t) { return (n.Value() + q.Value()) * u / t; } Templates As Parameters We can write:\ntemplate \u0026lt;template \u0026lt;typename T\u0026gt; class Thing\u0026gt; class Crab Here template \u0026lt;typename T\u0026gt; class is the type, and Thing is the parameter. Suppose we have this declaration Crab\u0026lt;King\u0026gt; legs;. Then the template argument King must be a template class whose declaration look like this：\ntemplate \u0026lt;typename T\u0026gt; class King {...}; For example:\ntemplate \u0026lt;template \u0026lt;typename T\u0026gt; class Thing\u0026gt; class Crab { private: Thing\u0026lt;int\u0026gt; s1; Thing\u0026lt;double\u0026gt; s2; public: Crab() {}; // assumes the thing class has push() and pop() members bool push(int a, double x) { return s1.push(a) \u0026amp;\u0026amp; s2.push(x); } bool pop(int \u0026amp; a, double \u0026amp; x){ return s1.pop(a) \u0026amp;\u0026amp; s2.pop(x); } }; // create object Crab\u0026lt;Stack\u0026gt; nebula; We can also mix template parameters with regular parameters.\ntemplate \u0026lt;template \u0026lt;typename T\u0026gt; class Thing, typename U, typename V\u0026gt; class Crab{ private: Thing\u0026lt;U\u0026gt; s1; Thing\u0026lt;V\u0026gt; s2; ... } Crab\u0026lt;Stack, int, double\u0026gt; nebula; // T=Stack, U=int, V=double Template Classes and Friends Template class declarations can have friends, too. There are three categories of templates\u0026rsquo; friend:\nNon-template friends Bound template friends, meaning the type of the friend is determined by the type of the class when a class is instantiated Unbound template friends, meaning that all specializations of the friend are friends to each specialization of the class Non-Template Friend Functions to Template Classes template \u0026lt;class T\u0026gt; class HasFriend { public: friend void counts(); // friend to all HasFriend instantiations ... }; This declaration makes the counts() function a friend to all instantiations of the template. But the problem is, how do this function access a HasFriend object without having any parameter?\nIt could access a global object; it could access nonglobal objects by using a global pointer; it could create its own objects; and it could access static data members of a template class, which exist separately from an object.\nWhat if we want to pass an object as a parameter? Can we write:\nfriend void report(HasFriend \u0026amp;); The answer is no. The reason is that HasFriend is not a object. We need to indicate a specialization. For example:\ntemplate \u0026lt;class T\u0026gt; class HasFriend { public: friend void report(HasFriend\u0026lt;T\u0026gt; \u0026amp;); // bound template friend ... }; Notice that report() is not a template function; it just has a parameter that is a template. This means that you have to define explicit specializations for the friends you plan to use:\nvoid report(HasFriend\u0026lt;short\u0026gt; \u0026amp;) {...}; // explicit specialization for short void report(HasFriend\u0026lt;int\u0026gt; \u0026amp;) {...}; // explicit specialization for int Bound Template Friend Functions to Template Classes We can make friend functions a template and bound them with each specialization.\nFirst, declare each template function before the class definition.\ntemplate \u0026lt;typename T\u0026gt; void counts(); template \u0026lt;typename T\u0026gt; void report(T \u0026amp;); Then declare the templates as friends inside the function:\ntemplate \u0026lt;typename TT\u0026gt; class HasFriendT { ... friend void counts\u0026lt;TT\u0026gt;(); friend void report\u0026lt;\u0026gt;(HasFriendT\u0026lt;TT\u0026gt; \u0026amp;); // same as report\u0026lt;HasFriendT\u0026lt;TT\u0026gt;\u0026gt;(HasFriendT\u0026lt;TT\u0026gt; \u0026amp;) }; In the report() function, we omit the template specialization in \u0026lt;\u0026gt; , since the argument can be deduced from the function argument.\nThe last thing is that we must provide template definitions for the friends.\n// template friend functions definitions template \u0026lt;typename T\u0026gt; void counts() { cout \u0026lt;\u0026lt; \u0026#34;template size: \u0026#34; \u0026lt;\u0026lt; sizeof(HasFriendT\u0026lt;T\u0026gt;) \u0026lt;\u0026lt; \u0026#34;; \u0026#34;; cout \u0026lt;\u0026lt; \u0026#34;template counts(): \u0026#34; \u0026lt;\u0026lt; HasFriendT\u0026lt;T\u0026gt;::ct \u0026lt;\u0026lt; endl; } template \u0026lt;typename T\u0026gt; void report(T \u0026amp; hf) { cout \u0026lt;\u0026lt; hf.item \u0026lt;\u0026lt; endl; } Unbound Template Friend Functions to Template Classes The bound template friend functions in the preceding section are template specializations of a template declared outside a class. An int class specialization gets an int function specialization, and so on.\nBy declaring a template inside a class, you can create unbound friend functions for which every function specialization is a friend to every class specialization.\ntemplate \u0026lt;typename T\u0026gt; class ManyFriend { private: T item; public: ManyFriend(const T \u0026amp; i) : item(i) {} template \u0026lt;typename C, typename D\u0026gt; friend void show2(C \u0026amp;, D \u0026amp;); }; template \u0026lt;typename C, typename D\u0026gt; void show2(C \u0026amp; c, D \u0026amp; d) { cout \u0026lt;\u0026lt; c.item \u0026lt;\u0026lt; \u0026#34;, \u0026#34; \u0026lt;\u0026lt; d.item \u0026lt;\u0026lt; endl; } int main() { ManyFriend\u0026lt;int\u0026gt; hfi1(10); ManyFriend\u0026lt;int\u0026gt; hfi2(20); ManyFriend\u0026lt;double\u0026gt; hfdb(10.5); cout \u0026lt;\u0026lt; \u0026#34;hfi1, hfi2: \u0026#34;; show2(hfi1, hfi2); cout \u0026lt;\u0026lt; \u0026#34;hfdb, hfi2: \u0026#34;; show2(hfdb, hfi2); return 0; } Template Aliases (C++11) If you write code like this:\n// define three typedef aliases typedef std::array\u0026lt;double, 12\u0026gt; arrd; typedef std::array\u0026lt;int, 12\u0026gt; arri; typedef std::array\u0026lt;std::string, 12\u0026gt; arrst; arrd gallons; // gallons is type std::array\u0026lt;double, 12\u0026gt; arri days; // days is type std::array\u0026lt;int, 12\u0026gt; arrst months; // months is type std::array\u0026lt;std::string, 12\u0026gt; You can create template aliases:\ntemplate\u0026lt;typename T\u0026gt; using arrtype = std::array\u0026lt;T,12\u0026gt;; // template to create multiple aliases arrtype\u0026lt;double\u0026gt; gallons; // gallons is type std::array\u0026lt;double, 12\u0026gt; arrtype\u0026lt;int\u0026gt; days; // days is type std::array\u0026lt;int, 12\u0026gt; arrtype\u0026lt;std::string\u0026gt; months; // months is type std::array\u0026lt;std::string, 12\u0026gt; ","permalink":"http://localhost:1313/blog/posts/c++-primer-plus/","summary":"\u003ch2 id=\"chapter-4\"\u003eChapter 4\u003c/h2\u003e\n\u003ch3 id=\"union\"\u003eUnion\u003c/h3\u003e\n\u003cp\u003eunion is a data structure that can store different types of data, but it can only store one type of data at a time. The size of union is the size of its largest data.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eunion\u003c/span\u003e \u003cspan class=\"nc\"\u003eone4all\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eint_val\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003elong_val\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003edouble_val\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eone4all\u003c/span\u003e \u003cspan class=\"n\"\u003epail\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003epail\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eint_val\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// store an int\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003epail\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eint_val\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003epail\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edouble_val\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.38\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// store a double, int value is lost\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003epail\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edouble_val\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerations\"\u003eEnumerations\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"nc\"\u003espectrum\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003ered\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eorange\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eyellow\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003egreen\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eblue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eviolet\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eindigo\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eultraviolet\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003espectrum\u003c/span\u003e \u003cspan class=\"n\"\u003eband\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// band a variable of type spectrum\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eband\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eblue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// valid, blue is an enumerator\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eband\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2000\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// invalid, 2000 not an enumerator\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eEnumarators are integer type, and can be converted to \u003ccode\u003eint\u003c/code\u003e, but not reversely.\u003c/p\u003e","title":"C++ Primer Plus notes"},{"content":"這篇文章主要是給自己看的，因此寫的方法是以自己看懂為主，一些自己已經會的東西就不會寫得太詳細。\nSource Code to Machine Code source code to machine code 分成四個步驟：\npreprocessing 處理 #，例如 #include 把 header file 複製到當前的檔案裡面 compiling turn code into assembly assembling turn assembly into machine code, 0s and 1s linking 把不同檔案的 machine code 接在一起 雖然說有四個步驟，但是其實會把這四個步驟叫做 compiling。\nCommand Line Arguments int main(int argc, char *argv[]){ } int main(int argc, char **argv){ } 如果有一個 binary file 叫做 greet，並且在 terminal 輸入 ./greet Hello，此時 argc = 2, argv[0] = \u0026quot;./greet\u0026quot;, argv[1] = \u0026quot;Hello\u0026quot;。\necho $? 會回傳來自 main funciton 的 int，也就是 error code。\nThe Cherno C++ series static https://youtu.be/f3FVU-iwNuA\nhttps://youtu.be/V-BFlMrBtqQ\n// static.cpp static int s_variable = 1;; // main.cpp #include \u0026lt;iostream\u0026gt; int s_variable = 3; int main(){ std::cout \u0026lt;\u0026lt; s_variable \u0026lt;\u0026lt; std::endl; // 3 return 0; } static.cpp 中的 s_variable 只能被 static.cpp 中的東西看到，所以並不會有 linking error。\n在命名 global variable 的時候要很小心，因為一旦命名，其他所有的檔案就不能有此變數，不然就要加上 static。\n而 static 在 class 中則像是 class 的全域變數。\n#include \u0026lt;iostream\u0026gt; class Entity{ public: static int x; }; int Entity::x; int main(){ Entity e; e.x = 1; std::cout \u0026lt;\u0026lt; e.x \u0026lt;\u0026lt; std::endl; Entity e2; e2.x = 3; // e.x 也變成 3 std::cout \u0026lt;\u0026lt; e.x \u0026lt;\u0026lt; std::endl; return 0; } 這些 static variable（或是 static function）是跟 class 綁在一起的，而不是 object。因此實務上要寫的話改成以下的方式會比較好，也比較直觀。\n#include \u0026lt;iostream\u0026gt; class Entity{ public: static int x; static void print(){ std::cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; std::endl; } }; int Entity::x; int main(){ Entity e; // 甚至可以不需要這一行，因為 static member 跟 object 無關 Entity::x = 1; // 不要寫 e.x = 1 Entity::print(); // 不要寫 e.print() return 0; } 最後，static function 只能存取 static variables，畢竟 static 只跟 class 有關，跟 object 無關，要特別注意。\nOOP Encapsulation 封裝 把 data members 透過 member functions 來存取。\nclass person { private: int Weight; int Height; public: int get_Weight(){ return Weight; } int get_Height(){ return Height; } void set_Weight(int weight){ Weight = weight; } void set_Height(int height){ Height = height; } }; 在上面的例子中，為什麼不直接透過 person.Weight 來修改數值？\n假設這個數值必須要符合一定的條件，例如：體重必須大於 0，那麼可以這樣寫\nvoid set_Weight(int weight){ if (weight \u0026gt; 0){ Weight = weight; } } 來達到我們要的目的。\n而直接修改 person.Weight，可能會修改成不符合條件的數值。\nAbstraction 抽象化 在使用程式的時候，讓使用者不必關心程式本身是如何執行的，只要讓使用者知道如何使用即可。\n例如 C++ 的 lower_bound, pow，我們不必知道他的原理，只要知道如何使用就好。\nInheritance 繼承 private, protected, public members #include \u0026lt;iostream\u0026gt; class base { private: int pvt = 1; public: int get_private(){ return pvt; } }; class derived: public base { }; int main (){ derived d; std::cout \u0026lt;\u0026lt; d.get_private(); return 0; } 上面這段程式碼可以正常運作，但是如果改成\n#include \u0026lt;iostream\u0026gt; class base { private: int pvt = 1; public: int get_private(){ return pvt; } }; class derived: public base { }; int main (){ derived d; std::cout \u0026lt;\u0026lt; d.pvt; // 改了這一行 return 0; } 就會出現 member \u0026quot;base::pvt\u0026quot; (declared at line 5) is inaccessible。\n原因就是 pvt 是 base class 的 private member，因此只能在 base class 中存取。若是要讓 pvt 在 derived class 也能被存取，要改成\nclass base { protected: // pivate 改成 protected int pct = 1; public: int get_protected(){ return pct; } }; protected 跟 private 的差異在於 derived class 能不能存取。protected 可以，而 private 不行。\nprivate, protected, public inheritance 接下來是 public, protected, private inheratence。\n如果使用 class derived: public base{};，那麼在 base class 中的 public member 在 derived class 還會是 public member，在 base class 中的 protected member 在 derived class 還會是 protected member。\n如果使用 class derived: protected base{};，那麼在 base class 中的 public member 以及 protected member 在 derived class 都會變成 protected member。\n如果使用 class derived: private base{};，那麼在 base class 中的 所有 member 在 derived class 都會變成 private member。\n更詳細的說明可以看這個網站 https://www.programiz.com/cpp-programming/public-protected-private-inheritance\ninheriting constructors 如果 base class 有 constructor 的話，那麼在 derived class 就要寫一個 constructor，並不會有 default constructor。\nclass base { private: int member; public: base(int Member){ member = Member; } }; class derived: public base { public: derived(int Member): base(Member){ } }; 在 C++11 中，可以使用 using 來繼承 constructor，這會繼承所有的 base class constructor。\nclass base { private: int member; public: base(int Member){ member = Member; } }; class derived: public base { using base::base; }; Polymorphism 多型 利用 base class 來對 derived class 進行操作。\n好處在於管理物件的時候，可以直接用共同的 base class 來管理，而不需要用個別的 derived class 一個一個處理。\n要注意的是，只能使用 base class 有的 member funcitons 來操作（如果 base class 跟 derived class 有名稱一樣的 function，也只會執行 base class 的 fucntion），如果想要在 derived class 進行 override，要在 base class 的 function 前面加上 virtual，並且可以在 derived class 的 function 後面加上 override 來增加可讀性以及方便除錯。\n如果 base class 有 pure virtual function 的話，會變成 abstract class（或是叫做 interface），沒辦法創造出此 class 的 object。而且 derived class 一定要 override，不然 derived class 也會變成 abstract class，可以藉此來強制derived class 進行 override。\n如果想要執行只在 derived class 的 function，可以使用 dynamic cast 來運行。\n#include \u0026lt;iostream\u0026gt; class base { public: virtual void info(){ std::cout \u0026lt;\u0026lt; \u0026#34;base class object\u0026#34; \u0026lt;\u0026lt; std::endl; } // or we can write \u0026#34;virtual void info() = 0;\u0026#34; // set it to pure virtual function }; class derived: public base { public: void info() override { // void info() override 來增加可讀性以及方便除錯 std::cout \u0026lt;\u0026lt; \u0026#34;derived class object\u0026#34; \u0026lt;\u0026lt; std::endl; } }; int main (){ derived d; base *ptr = \u0026amp;d; ptr-\u0026gt;info(); // derived class object base b; ptr = \u0026amp;b; ptr-\u0026gt;info(); // base class object return 0; } 參考資料 https://openhome.cc/Gossip/CppGossip/ https://youtu.be/wN0x9eZLix4 https://www.programiz.com/cpp-programming/public-protected-private-inheritance The Cherno C++ series https://www.youtube.com/@TheCherno ","permalink":"http://localhost:1313/blog/posts/c++-notes/","summary":"\u003cp\u003e這篇文章主要是給自己看的，因此寫的方法是以自己看懂為主，一些自己已經會的東西就不會寫得太詳細。\u003c/p\u003e\n\u003ch2 id=\"source-code-to-machine-code\"\u003eSource Code to Machine Code\u003c/h2\u003e\n\u003cp\u003esource code to machine code 分成四個步驟：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003epreprocessing\n\u003cul\u003e\n\u003cli\u003e處理 #，例如 #include\u003c/li\u003e\n\u003cli\u003e把 header file 複製到當前的檔案裡面\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003ecompiling\n\u003cul\u003e\n\u003cli\u003eturn code into assembly\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eassembling\n\u003cul\u003e\n\u003cli\u003eturn assembly into machine code, 0s and 1s\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003elinking\n\u003cul\u003e\n\u003cli\u003e把不同檔案的 machine code 接在一起\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e雖然說有四個步驟，但是其實會把這四個步驟叫做 compiling。\u003c/p\u003e\n\u003ch2 id=\"command-line-arguments\"\u003eCommand Line Arguments\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eargc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eargv\u003c/span\u003e\u003cspan class=\"p\"\u003e[]){\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eargc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e**\u003c/span\u003e\u003cspan class=\"n\"\u003eargv\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果有一個 binary file 叫做 greet，並且在 terminal 輸入 \u003ccode\u003e./greet Hello\u003c/code\u003e，此時 \u003ccode\u003eargc = 2, argv[0] = \u0026quot;./greet\u0026quot;, argv[1] = \u0026quot;Hello\u0026quot;\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eecho $?\u003c/code\u003e 會回傳來自 main funciton 的 int，也就是 error code。\u003c/p\u003e","title":"C++ notes"},{"content":"問題描述\n給定一個大小為 n 的整數陣列，如何找到出現頻率大於（必須嚴格大於）n/2 的元素？\n例如：arr = [1, 1, 2]，那麼 1 就是出現頻率大於 n/2 的元素。\n如果 arr = [1, 1, 3, 4]，那麼不存在這樣的元素。\nBoyer–Moore majority vote algorithm\n一個很直覺的方法就是用一個 hash map 計算所有數字出現的頻率，然後找出出現最多次的元素。需要 O(n) 的空間複雜度以及 O(n) 的時間複雜度。但是用 Boyer-Moore algorithm，只要 O(1) 的空間複雜度即可。來看看這個演算法是如何辦到的。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 int majorityElement(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int candidate = 0; int freq = 0; for (int i = 0; i \u0026lt; nums.size(); i++){ if (candidate == nums[i]){ freq++; } else if (freq == 0){ candidate = nums[i]; freq = 1; } else { freq--; } } return candidate; } candidate 是答案的候選人，而 freq 則是 candidate 出現的頻率。\n用 arr = [1, 2, 2, 1, 1, 1, 1] 當範例。我在這邊把各個時候的 candidate 跟 freq 寫下來，為了對齊，我只打 can, fre。\narr = [1, 2, 2, 1, 1, 1, 1]\ncan = [1, 1, 2, 2, 1, 1, 1]\nfre = [1, 0, 1, 0, 1, 2, 3]\n接下來跟著演算法實際跑一次。\ni = 0 時，can = 1, fre = 1，代表目前候選人是 1，並且出現的頻率為 1 次。\ni = 1 時，can = 1, fre = 0，此時頻率變成 0，代表我們把剛剛的候選人進行配對，也就是配成 [1, 2]。\ni = 2 時，can = 2, fre = 1，代表目前候選人是 2，並且出現的頻率為 1。\ni = 3 時，can = 2, fre = 0，此時頻率變成 0，代表我們把剛剛的候選人進行配對，也就是配成 [2, 1]。\ni = 4 時，can = 1, fre = 1，代表目前候選人是 1，並且出現的頻率為 1。\ni = 5 時，can = 1, fre = 2，代表目前候選人是 1，並且出現的頻率為 2。\ni = 6 時，can = 1, fre = 3，代表目前候選人是 1，並且出現的頻率為 3。\n此時跳出迴圈，回傳 1。\n問題是，為什麽這個演算法是正確的呢？\n大家可以發現，這個演算法是基於配對進行的。假設陣列中存在頻率出現超過 n/2 的元素，把它叫做 x，因為 x 的出現頻率超過 n/2，代表我們可以把 x 跟非 x 的元素進行配對，配對完之後還會剩下 x 沒有配對到。\n例如：arr = [1, 2, 2, 1, 1, 3, 1]，可以配對成 [1, 2], [1, 2], [1, 3] 並且剩下 [1] 沒有配對到。\n這個演算法還有一個特殊的地方，就是如果要找到出現頻率大於 n/3 或是 n/4 的元素，可以用一樣的方法找。只需要增加候選人的人數，就可以用一樣的概念解決。此外，還需要再花 O(n) 的時間檢查 candidate 是否為 majority element。\n以下是找到出現頻率大於 n/3 的方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 int majorityElement(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int cand1 = 0, cand2 = 0, freq1 = 0, freq2 = 0; int n = nums.size(); for (int i = 0; i \u0026lt; n; i++){ if (nums[i] == cand1){ freq1++; } else if (nums[i] == cand2){ freq2++; } else if (freq1 == 0){ cand1 = nums[i]; freq1 = 1; } else if (freq2 == 0){ cand2 = nums[i]; freq2 = 1; } else { freq1--; freq2--; } } freq1 = 0, freq2 = 0; for (int i = 0; i \u0026lt; n; i++){ freq1 += nums[i] == cand1; freq2 += nums[i] == cand2; } vector\u0026lt;int\u0026gt; res; if (freq1 \u0026gt; n / 3){ res.push_back(cand1); } if (freq2 \u0026gt; n / 3 \u0026amp;\u0026amp; cand1 != cand2){ res.push_back(cand2); } return res; } 參考資料\nhttps://gregable.com/2013/10/majority-vote-algorithm-find-majority.html ","permalink":"http://localhost:1313/blog/posts/majority-voting-algorithm/","summary":"\u003cp\u003e問題描述\u003c/p\u003e\n\u003cp\u003e給定一個大小為 \u003ccode\u003en\u003c/code\u003e 的整數陣列，如何找到出現頻率大於（必須嚴格大於）\u003ccode\u003en/2\u003c/code\u003e 的元素？\u003cbr\u003e\n例如：\u003ccode\u003earr = [1, 1, 2]\u003c/code\u003e，那麼 \u003ccode\u003e1\u003c/code\u003e 就是出現頻率大於 \u003ccode\u003en/2\u003c/code\u003e 的元素。\u003cbr\u003e\n如果 \u003ccode\u003earr = [1, 1, 3, 4]\u003c/code\u003e，那麼不存在這樣的元素。\u003c/p\u003e\n\u003cp\u003eBoyer–Moore majority vote algorithm\u003c/p\u003e\n\u003cp\u003e一個很直覺的方法就是用一個 hash map 計算所有數字出現的頻率，然後找出出現最多次的元素。需要 O(n) 的空間複雜度以及 O(n) 的時間複雜度。但是用 Boyer-Moore algorithm，只要 O(1) 的空間複雜度即可。來看看這個演算法是如何辦到的。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emajorityElement\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ecandidate\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003efreq\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecandidate\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003efreq\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efreq\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ecandidate\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003efreq\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003efreq\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ecandidate\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003ecandidate\u003c/code\u003e 是答案的候選人，而 \u003ccode\u003efreq\u003c/code\u003e 則是 \u003ccode\u003ecandidate\u003c/code\u003e 出現的頻率。\u003c/p\u003e","title":"Majority Voting Algorithm 多數投票算法"},{"content":"https://leetcode.com/problems/last-day-where-you-can-still-cross/\n對總共的天數進行 binary search，然後使用 dfs 來看是否能夠從最上面走到最下面。\n這邊的 update 是看 cur(當前的 grid 更新到第幾天) 跟 mid。如果 cur \u0026lt; mid，代表需要更新到第 mid 天，因此把 grid 變成 -1。反過來的話則是把 grid 變成 0。\ndfs 中，把走過的 grid 變成 mid，因此遇到 mid 或是 -1 的時候，代表無法再走下去了。\nint latestDayToCross(int row, int col, vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; cells) { vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; grid(row, vector\u0026lt;int\u0026gt; (col, 0)); int cur = 0; int l = 1, r = row * col; while (l \u0026lt; r){ int mid = r - (r - l) / 2; update(cur, mid, grid, cells); if (possible(mid, grid, row, col)){ l = mid; } else { r = mid - 1; } } return l; } void update(int \u0026amp;cur, int mid, vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; \u0026amp;grid, vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; cells){ if (cur \u0026lt; mid){ for (int i = cur + 1; i \u0026lt;= mid; i++){ int row_update = cells[i - 1][0] - 1; int col_update = cells[i - 1][1] - 1; grid[row_update][col_update] = -1; } } else { for (int i = cur; i \u0026gt; mid; i--){ int row_update = cells[i - 1][0] - 1; int col_update = cells[i - 1][1] - 1; grid[row_update][col_update] = 0; } } cur = mid; return; } bool possible(int mid, vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; \u0026amp;grid, int rows, int cols){ stack\u0026lt;pair\u0026lt;int, int\u0026gt;\u0026gt; stk; for (int i = 0; i \u0026lt; cols; i++){ if (grid[0][i] != -1){ stk.push({0, i}); } } while (not stk.empty()){ auto [row, col] = stk.top(); stk.pop(); if (row == rows - 1){ return true; } int dirc[] = {0, -1, 0, 1, 0}; for (int i = 0; i \u0026lt; 4; i++){ int r = row + dirc[i]; int c = col + dirc[i + 1]; if (r \u0026lt; 0 || r \u0026gt;= rows || c \u0026lt; 0 || c \u0026gt;= cols){ continue; } if (grid[r][c] == mid || grid[r][c] == -1){ continue; } stk.push({r, c}); grid[r][c] = mid; } } return false; } time complexity: $O(\\log(row \\times col) \\times row \\times col)$\nspace complextiy: $O(row \\times col)$\n其中 update 的複雜度會是 $O(row \\times col)$，因為每一次只會更新 binary search range 的一半，會是 $(row \\times col) \\sum_{k = 1}^{\\log(row \\times col)}\\frac{1}{2^k} = row \\times col$。\n另一個解法是 disjoint set。\n從最後一天往前看，看什麼時候可以從最上面走到最下面。\n特別注意的是，這邊多建立了兩個 node，分別代表最上面一排跟最下面一排。\n每一天的最後只需要檢查最上面的一列跟最下面的一列有沒有一樣的 parent，有的話，就代表可以從最上面走到最下面。\n為了快速檢查這件事情，把第一列的 node 都連到 n，最後一列連到 n + 1，這樣只需要看 find(parent, n) == find(parent, n + 1) 即可。\nint find(vector\u0026lt;int\u0026gt; \u0026amp;parent, int x){ if (parent[x] != x){ parent[x] = find(parent, parent[x]); } return parent[x]; } void uni(vector\u0026lt;int\u0026gt; \u0026amp;parent, int x, int y){ int p_x = find(parent, x); int p_y = find(parent, y); if (p_x != p_y){ parent[p_x] = p_y; } return; } int latestDayToCross(int row, int col, vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; cells) { int n = cells.size(); vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; grid(row, vector\u0026lt;int\u0026gt; (col, 1)); vector\u0026lt;int\u0026gt; parent(n + 2); for (int i = 0; i \u0026lt; n + 2; i++){ parent[i] = i; } for (int i = n - 1; i \u0026gt;= 0; i--){ int cur_row = cells[i][0] - 1; int cur_col = cells[i][1] - 1; int cur_index = cur_row * col + cur_col; grid[cur_row][cur_col] = 0; if (cur_row == 0){ uni(parent, cur_index, n); } else if (cur_row == row - 1){ uni(parent, cur_index, n + 1); } int dirc[] = {0, -1, 0, 1, 0}; for (int j = 0; j \u0026lt; 4; j++){ int next_row = cur_row + dirc[j]; int next_col = cur_col + dirc[j + 1]; if (next_row \u0026lt; 0 || next_row \u0026gt;= row || next_col \u0026lt; 0 || next_col \u0026gt;= col){ continue; } if (grid[next_row][next_col] == 1){ continue; } int next_index = next_row * col + next_col; uni(parent, cur_index, next_index); } if (find(parent, n) == find(parent, n + 1)){ return i; } } return -1; } time complexity: $O(row \\times col)$\nspace complextiy: $O(row \\times col)$\n","permalink":"http://localhost:1313/blog/leetcode/1970.last-day-where-you-can-still-cross/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/last-day-where-you-can-still-cross/\"\u003ehttps://leetcode.com/problems/last-day-where-you-can-still-cross/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e對總共的天數進行 binary search，然後使用 dfs 來看是否能夠從最上面走到最下面。\u003c/p\u003e\n\u003cp\u003e這邊的 \u003ccode\u003eupdate\u003c/code\u003e 是看 cur(當前的 grid 更新到第幾天) 跟 mid。如果 \u003ccode\u003ecur \u0026lt; mid\u003c/code\u003e，代表需要更新到第 mid 天，因此把 grid 變成 -1。反過來的話則是把 grid 變成 0。\u003cbr\u003e\ndfs 中，把走過的 grid 變成 mid，因此遇到 mid 或是 -1 的時候，代表無法再走下去了。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003elatestDayToCross\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003erow\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ecol\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ecells\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003egrid\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erow\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecol\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ecur\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erow\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ecol\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eupdate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecur\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003egrid\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecells\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epossible\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emid\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003egrid\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003erow\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecol\u003c/span\u003e\u003cspan class=\"p\"\u003e)){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003el\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eupdate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ecur\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003egrid\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ecells\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecur\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecur\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003erow_update\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecells\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ecol_update\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecells\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003egrid\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003erow_update\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ecol_update\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecur\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003erow_update\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecells\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ecol_update\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecells\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003egrid\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003erow_update\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ecol_update\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ecur\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"nf\"\u003epossible\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003egrid\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003erows\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ecols\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003estk\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ecols\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egrid\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003estk\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enot\u003c/span\u003e \u003cspan class=\"n\"\u003estk\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eempty\u003c/span\u003e\u003cspan class=\"p\"\u003e()){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003erow\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecol\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estk\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etop\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003estk\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epop\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erow\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003erows\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003edirc\u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erow\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003edirc\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecol\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003edirc\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003erows\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003ecols\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003econtinue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egrid\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003egrid\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003econtinue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003estk\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003egrid\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emid\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003etime complexity:\u003c/strong\u003e $O(\\log(row \\times col) \\times row \\times col)$\u003cbr\u003e\n\u003cstrong\u003espace complextiy:\u003c/strong\u003e $O(row \\times col)$\u003cbr\u003e\n其中 \u003ccode\u003eupdate\u003c/code\u003e 的複雜度會是 $O(row \\times col)$，因為每一次只會更新 binary search range 的一半，會是 $(row \\times col) \\sum_{k = 1}^{\\log(row \\times col)}\\frac{1}{2^k} = row \\times col$。\u003c/p\u003e","title":"1970. Last Day Where You Can Still Cross"},{"content":"https://leetcode.com/problems/fair-distribution-of-cookies/\n由於這一題數據量不大，因此其中一個方法就是暴力解，直接遍歷所有的可能性。\n用到方法也是非常經典的 backtracking。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 int distributeCookies(vector\u0026lt;int\u0026gt;\u0026amp; cookies, int k) { int n = cookies.size(); if (n == k){ return *max_element(begin(cookies), end(cookies)); } vector\u0026lt;int\u0026gt; distribution(k, 0); int ans = reduce(begin(cookies), end(cookies)); back_track(cookies, distribution, 0, ans); return ans; } void back_track(vector\u0026lt;int\u0026gt;\u0026amp; cookies, vector\u0026lt;int\u0026gt; \u0026amp;distribution, int cur, int \u0026amp;ans){ int n = cookies.size(); if (cur \u0026gt;= n){ ans = min(ans, *max_element(begin(distribution), end(distribution))); return; } int k = distribution.size(); for (int i = 0; i \u0026lt; k; i++){ distribution[i] += cookies[cur]; back_track(cookies, distribution, cur + 1, ans); distribution[i] -= cookies[cur]; } return; } time complexity: $O(k^n)$\nspace complextiy: $O(k)$\nwhere n = cookies.length\n另一個方法是 dynamic programming。\n由於小朋友是同質的，也就是全部餅乾分給 1 號小朋友或是全部餅乾分給 2 號小朋友，其實並沒有差異，因此可以用 dynamic programming 來記錄這種重複的問題。\n用二進位的數字 mask 來記錄餅乾的使用情況，i 來記錄還剩下幾位小朋友可以分餅乾。\n例如：dp[i = 3][mask = 5] = dp[3][$101_2$] 記錄的就是「在剩下 3 個小朋友，並且第 0，2 塊餅乾可以被分的情況下，拿最多餅乾的小朋友分了是多少餅乾（unfairness）？」。\n此時有 $2^2$ 種分法，也就是\n第 0，2 號餅乾給其中一位小朋友，此時子問題是 dp[2][$000_2$] 第 0 號餅乾給其中一位小朋友，此時子問題是 dp[2][$100_2$] 第 2 號餅乾給其中一位小朋友，此時子問題是 dp[2][$001_2$] 沒有餅乾給其中一位小朋友，此時子問題是 dp[2][$000_2$] 只要在這些情況裡面找最小的 unfairness 就好。至於這個小朋友是誰並不重要，因為小朋友是同質的。\n找 unfairness 的方法也很簡單。\n例如 2 號分法中，unfairness 會是 max(第 0 號餅乾的和, dp[2][$100_2$])，再跟現有的 unfairness 取較小的即可。\n同時使用 sum[mask] 來記錄的就是 mask 中所有餅乾的和，這樣計算子問題的時候也會比較快。\n例如： sum[$101_2$] = 第 0，2 號餅乾的和。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 int distributeCookies(vector\u0026lt;int\u0026gt;\u0026amp; cookies, int k) { int n = cookies.size(); vector\u0026lt;int\u0026gt; sum((1 \u0026lt;\u0026lt; n), 0); for (int i = 1; i \u0026lt; (1 \u0026lt;\u0026lt; n); i++){ for (int j = 0; j \u0026lt; n; j++){ if ((i \u0026amp; (1 \u0026lt;\u0026lt; j)) != 0){ sum[i] += cookies[j]; } } } vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; dp(k + 1, vector\u0026lt;int\u0026gt; ((1 \u0026lt;\u0026lt; n), INT_MAX)); dp[0][0] = 0; for (int i = 1; i \u0026lt;= k; i++){ for (int mask = 1; mask \u0026lt; (1 \u0026lt;\u0026lt; n); mask++){ // submask means one child get \u0026#34;submask\u0026#34; this much of cookies, which is sum[submask] for (int submask = 0; submask \u0026lt;= mask; submask++){ if ((submask | mask) == mask){ // check submask is valid or not dp[i][mask] = min(dp[i][mask], max(sum[submask], dp[i - 1][mask ^ submask])); } } } } return dp[k][(1 \u0026lt;\u0026lt; n) - 1]; } time complexity: $O(2^n \\times n + k \\times 2^n \\times 2^n)$\nspace complextiy: $O(k \\times 2^n)$\nwhere n = cookies.length\n但是其實還可以再優化一下，因為在遍歷 submask 的時候，其實遍歷了很多不符合條件的 submask。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 int distributeCookies(vector\u0026lt;int\u0026gt;\u0026amp; cookies, int k) { int n = cookies.size(); vector\u0026lt;int\u0026gt; sum((1 \u0026lt;\u0026lt; n), 0); for (int i = 1; i \u0026lt; (1 \u0026lt;\u0026lt; n); i++){ for (int j = 0; j \u0026lt; n; j++){ if ((i \u0026amp; (1 \u0026lt;\u0026lt; j)) != 0){ sum[i] += cookies[j]; } } } vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; dp(k + 1, vector\u0026lt;int\u0026gt; ((1 \u0026lt;\u0026lt; n), INT_MAX)); dp[0][0] = 0; for (int i = 1; i \u0026lt;= k; i++){ for (int mask = 1; mask \u0026lt; (1 \u0026lt;\u0026lt; n); mask++){ for (int submask = mask; submask != 0; submask = (submask - 1) \u0026amp; mask){ // 改了這裡 dp[i][mask] = min(dp[i][mask], max(sum[submask], dp[i - 1][mask ^ submask])); } } } return dp[k][(1 \u0026lt;\u0026lt; n) - 1]; } 上面這段 code 我覺得最精華的部分在於 submask = (submask - 1) \u0026amp; mask。這樣只會遍歷所有的子問題，而不會遍歷到其他不相干的狀況。\n接下來研究一下下面這段 code 的複雜度。\n1 2 3 4 5 for (int mask = 1; mask \u0026lt; (1 \u0026lt;\u0026lt; n); mask++){ for (int submask = mask; submask != 0; submask = (submask - 1) \u0026amp; mask){ dp[i][mask] = min(dp[i][mask], max(sum[submask], dp[i - 1][mask ^ submask])); } } mask 如果有 k 個 1 bit，那麼會有 $2^k$ 個 submask。\n而 mask 從 1 遍歷到 (1 \u0026laquo; n)，總共會有\n$\\binom{n}{1}$ 個 mask 有 1 個 1 bit\n$\\binom{n}{2}$ 個 mask 有 2 個 1 bit\n\u0026hellip;\n$\\binom{n}{n}$ 個 mask 有 n 個 1 bit\n所以複雜度會是 $\\sum_{k = 1}^n \\binom{n}{k} \\times 2^k$，而這個剛剛好就是 $(1+2)^n$ 的展開式。也就是說，這段 code 的複雜度就是 $O(3^n)$。\n最後整體的複雜度就是\ntime complexity: $O(2^n \\times n + k \\times 3^n)$\nspace complextiy: $O(k \\times 2^n)$\nwhere n = cookies.length\n","permalink":"http://localhost:1313/blog/leetcode/2305.fair-distribution-of-cookies/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/fair-distribution-of-cookies/\"\u003ehttps://leetcode.com/problems/fair-distribution-of-cookies/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e由於這一題數據量不大，因此其中一個方法就是暴力解，直接遍歷所有的可能性。\u003c/p\u003e\n\u003cp\u003e用到方法也是非常經典的 backtracking。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003edistributeCookies\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ecookies\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecookies\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003emax_element\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecookies\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecookies\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003edistribution\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eans\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecookies\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecookies\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eback_track\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecookies\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edistribution\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eans\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eans\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eback_track\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ecookies\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003edistribution\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ecur\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eans\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecookies\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecur\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eans\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eans\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003emax_element\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edistribution\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edistribution\u003c/span\u003e\u003cspan class=\"p\"\u003e)));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edistribution\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003edistribution\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003ecookies\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ecur\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eback_track\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecookies\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edistribution\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecur\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eans\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003edistribution\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-=\u003c/span\u003e \u003cspan class=\"n\"\u003ecookies\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ecur\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cstrong\u003etime complexity:\u003c/strong\u003e $O(k^n)$\u003cbr\u003e\n\u003cstrong\u003espace complextiy:\u003c/strong\u003e $O(k)$\u003cbr\u003e\nwhere \u003ccode\u003en = cookies.length\u003c/code\u003e\u003c/p\u003e","title":"2305. Fair Distribution of Cookies"},{"content":"今天來複習一下常見遍歷樹的方式。\nRecursive way Inorder traversal 先拜訪 left subtree，再依序拜訪 root node 跟 right subtree。\nvoid Inorder_traversal(TreeNode *node){ if (node == NULL){ return; } Inorder_traversal(node-\u0026gt;left); cout \u0026lt;\u0026lt; node-\u0026gt;val \u0026lt;\u0026lt; \u0026#34; \u0026#34;; Inorder_traversal(node-\u0026gt;rihgt); return; } Preorder traversal 先拜訪 root node，再依序拜訪 left subtree 跟 right subtree。\nvoid Preorder_traversal(TreeNode *node){ if (node == NULL){ return; } cout \u0026lt;\u0026lt; node-\u0026gt;val \u0026lt;\u0026lt; \u0026#34; \u0026#34;; Preorder_traversal(node-\u0026gt;left); Preorder_traversal(node-\u0026gt;rihgt); return; } Postorder traversal 先依序拜訪 left subtree 跟 right subtree，再拜訪 root node。\nvoid Postorder_traversal(TreeNode *node){ if (node == NULL){ return; } Postorder_traversal(node-\u0026gt;left); Postorder_traversal(node-\u0026gt;rihgt); cout \u0026lt;\u0026lt; node-\u0026gt;val \u0026lt;\u0026lt; \u0026#34; \u0026#34;; return; } 可以看到用 recursive 寫的話，三種方式的 code 基本上長一樣，而且複雜度也都一樣，只是差在遍歷 root node 的時間不一樣。\ntime complexity: $O(n)$\nspace complextiy: $O(h)$, where $h = $ tree height\nIterative way 但是我覺得比較有趣的是 iterative 的方式，三種方式各有要注意的地方。\nInorder traversal 不斷往左邊走，走的過程中把 current push 到 stack 裡面，直到 current 變成 NULL current = stack.top() 往右邊走 重複步驟 1 由於 Inorder traversal 的順序是 left subtree -\u0026gt; root node -\u0026gt; right subtree，因此步驟 1 要不斷往左邊走。\n當 current == NULL 的時候，代表沒有 left subtree 了，此時 stack.top() 就會是剛剛的 root node，因此讓 current = stack.top()，並且印出來。\n接下來往右邊走，等同於遍歷 right subtree，最後重複步驟 1 直到整個過程結束。\nvoid Inorder_traversal(TreeNode *node){ stack\u0026lt;TreeNode*\u0026gt; stk; TreeNode *cur = node; while (not stk.empty() || cur != NULL){ while (cur != NULL){ stk.push(cur); cur = cur-\u0026gt;left; } cur = stk.top(); stk.pop(); cout \u0026lt;\u0026lt; cur-\u0026gt;val \u0026lt;\u0026lt; \u0026#34; \u0026#34;; cur = cur-\u0026gt;right; } return; } Preorder traversal 這邊的 code 基本上跟 Inorder traversal 長一樣，唯一的差別就是印出來的時機。\n由於 Preorder traversal 的順序是 root node -\u0026gt; left subtree -\u0026gt; right subtree，因此在走到 left subtree 之前，就要先印出來。\nvoid Preorder_traversal(TreeNode *node){ stack\u0026lt;TreeNode*\u0026gt; stk; TreeNode *cur = node; while (not stk.empty() || cur != NULL){ while (cur != NULL){ cout \u0026lt;\u0026lt; cur-\u0026gt;val \u0026lt;\u0026lt; \u0026#34; \u0026#34;; stk.push(cur); cur = cur-\u0026gt;left; } cur = stk.top(); stk.pop(); cur = cur-\u0026gt;right; } return; } 不過我還有看到另外一個方法，思路不太一樣。\n這個的想法比較簡單，不斷 push 右邊跟左邊的節點，就可以保證左邊的節點一直在 stack 的上面，進而實現 Preorder traversal。\nvoid Preorder_traversal(TreeNode *node){ stack\u0026lt;TreeNode*\u0026gt; stk; stk.push(node); while (not stk.empty()){ cur = stk.top(); stk.pop(); cout \u0026lt;\u0026lt; cur-\u0026gt;val \u0026lt;\u0026lt; \u0026#34; \u0026#34;; if (cur-\u0026gt;right != NULL){ stk.push(cur-\u0026gt;right) } if (cur-\u0026gt;left != NULL){ stk.push(cur-\u0026gt;left) } } return; } 不過可以發現 cur-\u0026gt;left 在 push 進去之後，立刻就被 pop 出來，因此實際上可以不需要 push 進去。\n下面這段 code 跟 Preorder 的第一段長得很像，但是想法不太一樣。\n第一段是往左邊走的時候 push current，並且 pop 的時候再往右邊走。\n這邊是往左邊走的時候 push right child，pop 的時候就是右邊的節點，基本上是一樣的方法。\n要特別注意的是，這邊需要檢查 stack 是否為空的，原因是如果 cur-\u0026gt;right == NULL，此時並不會 push 任何東西到 stack 裡面。可以用 2 為 root，1 為 left child 的 binary tree 想想看，如果此時沒有檢查 stack 是否為空，會出現錯誤。\nvoid Preorder_traversal(TreeNode *node){ stack\u0026lt;TreeNode*\u0026gt; stk; TreeNode *cur = node; while (not stk.empty() || cur != NULL){ while (cur != NULL){ cout \u0026lt;\u0026lt; cur-\u0026gt;val \u0026lt;\u0026lt; \u0026#34; \u0026#34;; if (cur-\u0026gt;right != NULL){ stk.push(cur-\u0026gt;right); } cur = cur-\u0026gt;left; } if (not stk.empty()){ cur = stk.top(); stk.pop(); } } return; } Postorder traversal Postorder traversal 的順序是 left subtree -\u0026gt; right subtree -\u0026gt; root node，其實可以反過來做，也就是 root node -\u0026gt; right subtree -\u0026gt; left subtree 然後再反轉結果就好（如果是把順序存到 vector 裡面的話）。\nroot node -\u0026gt; right subtree -\u0026gt; left subtree 就是剛剛做過的 Preorder traversal，只是 left subtre、right subtree 反過來而已。\nvector\u0026lt;int\u0026gt; Postorder_traversal(TreeNode *node){ vector\u0026lt;int\u0026gt; result; stack\u0026lt;TreeNode*\u0026gt; stk; TreeNode *cur = node; while (not stk.empty() || cur != NULL){ while (cur != NULL){ result.push_back(cur-\u0026gt;val); stk.push(cur); cur = cur-\u0026gt;right; } cur = stk.top(); stk.pop(); cur = cur-\u0026gt;left; } reverse(begin(result), end(result)); return result; } 不過這樣不太有效率，因為需要額外的空間來儲存印出來的順序。\nPostorder traversal 難的地方在於在遍歷 right subtree 之後，還要回到 root。\n在前面的 Preorder 跟 Inorder traversal 中，當把 root pop 出來之後，接下來往右走就好，因為接下來都不會再用到 root node。\n但是 Postorder traversal 中，往右走之後，還要想辦法回到 root。\n有一個聰明的方法就是 push 兩次 root node。\n如果是第一次 pop root node（也就是現在要拜訪 right subtree），那麼此時 cur == stk.top()，選擇往右走。\n如果是第二次 pop root node（也就是現在要拜訪 root node），那麼此時只要印出來就好。\nvoid Postorder_traversal(TreeNode *node){ stack\u0026lt;TreeNode*\u0026gt; stk; TreeNode *cur = node; while (not stk.empty() || cur != NULL){ while (cur != NULL){ stk.push(cur); stk.push(cur); cur = cur-\u0026gt;left; } cur = stk.top(); stk.pop(); if (not stk.empty() \u0026amp;\u0026amp; cur == stk.top()){ cur = cur-\u0026gt;right; } else { cout \u0026lt;\u0026lt; cur-\u0026gt;val \u0026lt;\u0026lt; \u0026#34; \u0026#34;; cur = NULL; } } return; } 參考資料 https://shubo.io/iterative-binary-tree-traversal/ https://www.geeksforgeeks.org/iterative-preorder-traversal/ https://www.geeksforgeeks.org/iterative-postorder-traversal-using-stack/ ","permalink":"http://localhost:1313/blog/posts/tree-traversal/","summary":"\u003cp\u003e今天來複習一下常見遍歷樹的方式。\u003c/p\u003e\n\u003ch2 id=\"recursive-way\"\u003eRecursive way\u003c/h2\u003e\n\u003ch3 id=\"inorder-traversal\"\u003eInorder traversal\u003c/h3\u003e\n\u003cp\u003e先拜訪 left subtree，再依序拜訪 root node 跟 right subtree。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eInorder_traversal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eInorder_traversal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eInorder_traversal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003erihgt\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"preorder-traversal\"\u003ePreorder traversal\u003c/h3\u003e\n\u003cp\u003e先拜訪 root node，再依序拜訪 left subtree 跟 right subtree。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003ePreorder_traversal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ePreorder_traversal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ePreorder_traversal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003erihgt\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"postorder-traversal\"\u003ePostorder traversal\u003c/h3\u003e\n\u003cp\u003e先依序拜訪 left subtree 跟 right subtree，再拜訪 root node。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003ePostorder_traversal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTreeNode\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ePostorder_traversal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ePostorder_traversal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003erihgt\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eval\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e可以看到用 recursive 寫的話，三種方式的 code 基本上長一樣，而且複雜度也都一樣，只是差在遍歷 root node 的時間不一樣。\u003cbr\u003e\n\u003cstrong\u003etime complexity:\u003c/strong\u003e $O(n)$\u003cbr\u003e\n\u003cstrong\u003espace complextiy:\u003c/strong\u003e $O(h)$, where $h = $ tree height\u003c/p\u003e","title":"Tree traversal"},{"content":"https://leetcode.com/problems/count-of-integers/\n這題一開始我往 digital root 的方向去想，但是發現思路似乎錯了，而且 num 的範圍超過了 long long int，完全不知道如何下手。看到解答後整個茅塞頓開，這題非常有趣。\n這題可以分成兩個部分，先求小於等於 num2 並且滿足條件的數字個數，然後再減去小於等於 num1 並且滿足條件的數字個數，最後再檢查 num1 本身是否滿足條件。\n（如果這一題的 num1, num2 都是數字的話，可以減去小於等於 num1 - 1 中滿足條件的個數就好）\n來看一個範例， num = \u0026quot;268\u0026quot;，要怎麼找到滿足條件的個數呢？\n可以從最高位數開始，建造出一個新的 string，並且當這個 string 建造完成時，檢查其是否滿足條件。\n首先第一位可以填 0, 1, 2（不能超過 2），那麼第二位可以填哪一些呢？\n如果第一位是填 0, 1，那第二位可以隨便填，也就是 0 到 9 都可以填，因為不管後面怎麼填，都不會超過 268。但是如果第一位是填 2 的話，那麼第二位只能填 0, 1, 2, 3, 4, 5, 6（不能超過 6）。\n最後是第三位，如果前面填 26 的話，第三位只能填 0, 1, 2, 3, 4, 5, 6, 7, 8（不能超過 8），其他情況都可以隨便填入 0 到 9。\n我們再用一個 boolean 來記錄是否可以隨便填數字，然後使用 dp 來解。\n這個時候可以寫下 dp 的關係式了\ndp[i][flag][sum] = 前 i 位(1 indexed)的和為 sum，並且接下來 （可以/不可以）隨便填數字，有多少種填數字的方法使得 digit sum 滿足條件\nflag = 1 代表不能隨便填數字，也就是第 i 位只能填 0 到 num[i] - '0'。\nflag = 0 代表可以隨便填數字，也就是 0 到 9 都可以填。\ndp[i][0][sum] = dp[i + 1][flag][sum + j] for j from 0 to 9\ndp[i][1][sum] = dp[i + 1][0][sum + j] for j from 0 to (num[i] - '0' - 1) + dp[i + 1][1][sum + num[i] - '0']\n一樣用上面的例子來看， dp[0][1][0] 就是什麼都還沒填，並且不能隨便填數字的情況下，有多少數字滿足條件。\n而他的關係式 dp[0][1][0] = dp[1][0][0] + dp[1][0][1] + dp[1][1][2]，也就是計算填入 0 (dp[1][0][0])，填入 1 (dp[1][0][1])，填入 2 (dp[1][1][2]) 的總和。\nint mod = 1e9 + 7; int count(string num1, string num2, int min_sum, int max_sum) { int cnt = 0; for (char c: num1){ cnt += c - \u0026#39;0\u0026#39;; } if (cnt \u0026gt;= min_sum \u0026amp;\u0026amp; cnt \u0026lt;= max_sum){ cnt = 1; } else { cnt = 0; } int ans = under(n2, min_sum, max_sum) - under(n1, min_sum, max_sum) + cnt; ans = (ans + mod) % mod; return ans; } int under(string \u0026amp;num, int min_sum, int max_sum){ int memo[24][2][401]; memset(memo, -1, sizeof(memo)); function\u0026lt;int(int, int, int)\u0026gt; dp = [\u0026amp;](int index, int flag, int sum){ if (index == num.size()){ // 已經填完了，檢查是否符合條件 if (sum \u0026gt;= min_sum \u0026amp;\u0026amp; sum \u0026lt;= max_sum){ return 1; } else { return 0; } } if (memo[index][flag][sum] != -1){ // 計算過的問題，直接回傳結果 return memo[index][flag][sum]; } int maxi = 9; if (flag == 1){ // 如果不能隨便填的話，最多只能填 num[index] - \u0026#39;0\u0026#39; maxi = num[index] - \u0026#39;0\u0026#39;; } int cnt = 0; for (int i = 0; i \u0026lt;= maxi; i++){ if (flag == 1 \u0026amp;\u0026amp; i == num[index] - \u0026#39;0\u0026#39;) cnt = (cnt + dp(index + 1, 1, sum + i)) % mod; else cnt = (cnt + dp(index + 1, 0, sum + i)) % mod; } memo[index][flag][sum] = cnt; return cnt; }; return dp(0, 1, 0); } time complexity: $O(n \\times m)$\nspace complextiy: $O(n \\times m)$\nwhere n = num.size(), m = max_sum\n","permalink":"http://localhost:1313/blog/leetcode/2719.count-of-integers/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/count-of-integers/\"\u003ehttps://leetcode.com/problems/count-of-integers/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e這題一開始我往 digital root 的方向去想，但是發現思路似乎錯了，而且 \u003ccode\u003enum\u003c/code\u003e 的範圍超過了 \u003ccode\u003elong long int\u003c/code\u003e，完全不知道如何下手。看到解答後整個茅塞頓開，這題非常有趣。\u003c/p\u003e\n\u003cp\u003e這題可以分成兩個部分，先求小於等於 \u003ccode\u003enum2\u003c/code\u003e 並且滿足條件的數字個數，然後再減去小於等於 \u003ccode\u003enum1\u003c/code\u003e 並且滿足條件的數字個數，最後再檢查 \u003ccode\u003enum1\u003c/code\u003e 本身是否滿足條件。\u003cbr\u003e\n（如果這一題的 \u003ccode\u003enum1, num2\u003c/code\u003e 都是數字的話，可以減去小於等於 \u003ccode\u003enum1 - 1\u003c/code\u003e 中滿足條件的個數就好）\u003c/p\u003e\n\u003cp\u003e來看一個範例， \u003ccode\u003enum = \u0026quot;268\u0026quot;\u003c/code\u003e，要怎麼找到滿足條件的個數呢？\u003c/p\u003e\n\u003cp\u003e可以從最高位數開始，建造出一個新的 string，並且當這個 string 建造完成時，檢查其是否滿足條件。\u003c/p\u003e\n\u003cp\u003e首先第一位可以填 \u003ccode\u003e0, 1, 2\u003c/code\u003e（不能超過 2），那麼第二位可以填哪一些呢？\u003cbr\u003e\n如果第一位是填 \u003ccode\u003e0, 1\u003c/code\u003e，那第二位可以隨便填，也就是 \u003ccode\u003e0\u003c/code\u003e 到 \u003ccode\u003e9\u003c/code\u003e 都可以填，因為不管後面怎麼填，都不會超過 268。但是如果第一位是填 \u003ccode\u003e2\u003c/code\u003e 的話，那麼第二位只能填 \u003ccode\u003e0, 1, 2, 3, 4, 5, 6\u003c/code\u003e（不能超過 6）。\u003cbr\u003e\n最後是第三位，如果前面填 \u003ccode\u003e26\u003c/code\u003e 的話，第三位只能填 \u003ccode\u003e0, 1, 2, 3, 4, 5, 6, 7, 8\u003c/code\u003e（不能超過 8），其他情況都可以隨便填入 \u003ccode\u003e0\u003c/code\u003e 到 \u003ccode\u003e9\u003c/code\u003e。\u003c/p\u003e","title":"2719. Count of Integers"},{"content":"https://leetcode.com/problems/scramble-string/\n如果 s1 跟 s2 中出現 character 的頻率不一樣的話，回傳 false 即可。\n如果一樣的話，那麼可以試著切切看。\n對於 s1，如果切成 s1 = s1[1: i] + s1[i + 1: n]，長度爲 i 以及 n - i 的 substring，那麼 s2 可以切成 s2 = s2[1: i] + s2[i + 1: n] 或是 s2 = s2[1: n - i - 1] + s2[n - i: n]。\n接著再比較兩組 substring 是否爲 scramble string 即可。\n這邊可以用 unordered_map 來記錄算過的子問題，也可以用一般的矩陣來記錄。所以其實這題有點 recursion + dp 的感覺。\n以下是沒有記錄子問題的 code，直接跑會 TLE。\nbool isScramble(string s1, string s2) { int freq[26] = {}; int n = s1.size(); if (n == 1){ return s1 == s2; } for (int i = 0; i \u0026lt; n; i++){ freq[s1[i] - \u0026#39;a\u0026#39;]++; freq[s2[i] - \u0026#39;a\u0026#39;]--; } for (int i = 0; i \u0026lt; 26; i++){ if (freq[i] != 0){ return false; } } for (int i = 1; i \u0026lt; n; i++){ string s1_substring1 = s1.substr(0, i); string s1_substring2 = s1.substr(i); string s2_substring1 = s2.substr(0, i); string s2_substring2 = s2.substr(i); string s2_substring3 = s2.substr(0, n - i); string s2_substring4 = s2.substr(n - i); if (isScramble(s1_substring1, s2_substring1) \u0026amp;\u0026amp; isScramble(s1_substring2, s2_substring2)){ return true; } if (isScramble(s1_substring1, s2_substring4) \u0026amp;\u0026amp; isScramble(s1_substring2, s2_substring3)){ return true; } } return false; } 加上 unordered_map 的方式\nunordered_map\u0026lt;string, bool\u0026gt; mp; bool isScramble(string s1, string s2) { if (mp.find(s1 + s2) != end(mp)){ return mp[s1 + s2]; } int freq[26] = {}; int n = s1.size(); if (n == 1){ return s1 == s2; } for (int i = 0; i \u0026lt; n; i++){ freq[s1[i] - \u0026#39;a\u0026#39;]++; freq[s2[i] - \u0026#39;a\u0026#39;]--; } for (int i = 0; i \u0026lt; 26; i++){ if (freq[i] != 0){ mp[s1 + s2] = false; return false; } } for (int i = 1; i \u0026lt; n; i++){ string s1_substring1 = s1.substr(0, i); string s1_substring2 = s1.substr(i); string s2_substring1 = s2.substr(0, i); string s2_substring2 = s2.substr(i); string s2_substring3 = s2.substr(0, n - i); string s2_substring4 = s2.substr(n - i); if (isScramble(s1_substring1, s2_substring1) \u0026amp;\u0026amp; isScramble(s1_substring2, s2_substring2)){ mp[s1 + s2] = true; return true; } if (isScramble(s1_substring1, s2_substring4) \u0026amp;\u0026amp; isScramble(s1_substring2, s2_substring3)){ mp[s1 + s2] = true; return true; } } mp[s1 + s2] = false; return false; } 用矩陣記錄的方式\nbool isScramble(string s1, string s2) { int n = s1.size(); vector\u0026lt;vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026gt; memo(n, vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; (n, vector\u0026lt;int\u0026gt; (n + 1, -1))); function\u0026lt;int(int, int, int)\u0026gt; dp = [\u0026amp;](int start_1, int start_2, int length){ if (length == 1){ return s1[start_1] == s2[start_2]? 1: 0; } if (memo[start_1][start_2][length] != -1){ return memo[start_1][start_2][length]; } int freq[26] = {}; for (int i = 0; i \u0026lt; length; i++){ freq[s1[start_1 + i] - \u0026#39;a\u0026#39;]++; freq[s2[start_2 + i] - \u0026#39;a\u0026#39;]--; } for (int i = 0; i \u0026lt; 26; i++){ if (freq[i] != 0){ memo[start_1][start_2][length] = 0; return 0; } } for (int i = 1; i \u0026lt; length; i++){ if (dp(start_1, start_2, i) == 1 \u0026amp;\u0026amp; dp(start_1 + i, start_2 + i, length - i) == 1){ memo[start_1][start_2][i] = 1; return 1; } if (dp(start_1, start_2 + length - i, i) == 1 \u0026amp;\u0026amp; dp(start_1 + i, start_2, length - i) == 1){ memo[start_1][start_2][i] = 1; return 1; } } memo[start_1][start_2][length] = 0; return 0; }; return dp(0, 0, n) == 1; } memo[start_1][start_2][length] 代表的是「s1[start_1: start_1 + length - 1] 以及 s2[start_2: start_2 + length - 1] 是否爲 scramble string」。\n至於這題的複雜度有點難分析。在不做 dp 的情況下，時間複雜度會是 $O(5^n)$\n$$ \\begin{align*} T(n) \u0026amp;= 2((T(1) + T(n - 1)) + (T(2) + T(n - 2)) + \u0026hellip; + (T(n - 1) + T(1)))\\\\ \u0026amp;= 4(T(1) + T(2) + \u0026hellip; + T(n - 1))\\\\ \u0026amp;= 4T(n - 1) + 4(T(1) + T(2) + \u0026hellip; + T(n))\\\\ \u0026amp;= 4T(n - 1) + T(n - 1)\\\\ \u0026amp;= 5T(n - 1)\\\\ \u0026amp;= O(5^n) \\end{align*} $$\n如果使用矩陣來記錄，那麼時間複雜度會是 $O(n^4)$。\n有 $O(n^3)$ 個格子要填，而每填一個格子需要 $O(n)$ 的時間。\n如果用 unordered_map 來記錄，時間複雜度「應該」也會是 $O(n^4)$。\n這邊比較不確定的地方是，用 string 當作 key 時，unordered_map 其實並不是 $O(1)$，而是 $O(n)$，因此不太確定複雜度會不會提高。\n","permalink":"http://localhost:1313/blog/leetcode/87.scramble-string/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/scramble-string/\"\u003ehttps://leetcode.com/problems/scramble-string/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e如果 \u003ccode\u003es1\u003c/code\u003e 跟 \u003ccode\u003es2\u003c/code\u003e 中出現 character 的頻率不一樣的話，回傳 false 即可。\u003c/p\u003e\n\u003cp\u003e如果一樣的話，那麼可以試著切切看。\u003cbr\u003e\n對於 \u003ccode\u003es1\u003c/code\u003e，如果切成 \u003ccode\u003es1 = s1[1: i] + s1[i + 1: n]\u003c/code\u003e，長度爲 \u003ccode\u003ei\u003c/code\u003e 以及 \u003ccode\u003en - i\u003c/code\u003e 的 substring，那麼 \u003ccode\u003es2\u003c/code\u003e 可以切成 \u003ccode\u003es2 = s2[1: i] + s2[i + 1: n]\u003c/code\u003e 或是 \u003ccode\u003es2 = s2[1: n - i - 1] + s2[n - i: n]\u003c/code\u003e。\u003cbr\u003e\n接著再比較兩組 substring 是否爲 scramble string 即可。\u003c/p\u003e\n\u003cp\u003e這邊可以用 \u003ccode\u003eunordered_map\u003c/code\u003e 來記錄算過的子問題，也可以用一般的矩陣來記錄。所以其實這題有點 recursion + dp 的感覺。\u003c/p\u003e\n\u003cp\u003e以下是沒有記錄子問題的 code，直接跑會 TLE。\u003c/p\u003e","title":"87. Scramble String"},{"content":"https://leetcode.com/problems/maximize-score-after-n-operations/\n這題一開始我用 greedy 的方式做，寫完才發現 greedy 事實上會錯。\n首先，這一題需要知道所有的子集的最佳解。也就是要知道經過 1 次操作後的各種組合最佳解，然後再用這個結果推到經過 2 次操作後的各種組合最佳解。以此類推，直到找到經過 n / 2 次操作後的最佳解。\n例如 nums = [1,2,3,4,5,6]。用 6 個 bit 來記錄選了哪些數字。\n$110000_2$ 就是代表「在只有第 3, 4, 5, 6 個數字可以選的情況下，此時最佳解」。並且用 dp[$110000_2$] 來記錄這個結果。\\\n假設想要求 dp[$110000_2$]，也就是「第 3, 4, 5, 6 個數字可以選的情況下，此時最佳解」，有以下的選擇：\n選第 3, 4 個數字，結果會是 2 * gcd(nums[3], nums[4]) + dp[$111100_2$] 選第 3, 5 個數字，結果會是 2 * gcd(nums[3], nums[5]) + dp[$111010_2$] 選第 3, 6 個數字，結果會是 2 * gcd(nums[3], nums[6]) + dp[$111001_2$] 選第 4, 5 個數字，結果會是 2 * gcd(nums[4], nums[5]) + dp[$110110_2$] 選第 4, 6 個數字，結果會是 2 * gcd(nums[4], nums[6]) + dp[$110101_2$] 選第 5, 6 個數字，結果會是 2 * gcd(nums[5], nums[6]) + dp[$110011_2$] dp[$110000_2$] 就是上面這些選擇的最大值。\n之所以是 2 * gcd(x, y)，是因爲 $110000_2$ 有 4 個 0，所以選數字的話，會是第 2 次選（4 / 2 = 2）。\n但是問題是，要怎麼知道哪些數字可以選，哪些不行呢？\n這時候可以用兩個 for loop 來遍歷這些 bit，\nfor (int i = 0; i \u0026lt; n; i++) for (int j = i + 1; j \u0026lt; n; j++) int pick = (1 \u0026lt;\u0026lt; i) + (1 \u0026lt;\u0026lt; j); 如果 pick 跟當前的選擇 state 做 \u0026amp; operation 爲 0，那就代表這是一個合法的選擇。\nint maxScore(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int n = nums.size(); int k = n / 2; vector\u0026lt;int\u0026gt; memo(1 \u0026lt;\u0026lt; n, 0); function\u0026lt;int(int)\u0026gt; dp = [\u0026amp;](int state){ if (state == (1 \u0026lt;\u0026lt; n) - 1){ return 0; } if (memo[state] \u0026gt; 0){ return memo[state]; } for (int i = 0; i \u0026lt; n; i++){ for (int j = i + 1; j \u0026lt; n; j++){ int pick = (1 \u0026lt;\u0026lt; i) + (1 \u0026lt;\u0026lt; j); if ((pick \u0026amp; state) == 0){ int ones = __builtin_popcount(state); int ith = (n - ones) / 2; memo[state] = max(memo[state], gcd(nums[i], nums[j]) * ith + dp(state + pick)); } } } return memo[state]; }; return dp(0); } state == (1 \u0026lt;\u0026lt; n) - 1 代表 state 是全部爲 1 的數字，也就是沒有任何數字可以選，此時回傳 0。\nith = (n - ones) / 2 就是計算當前的操作是第幾次操作，也就是 0 bit 的數量除以 2。\ntime complexity: $2^n \\times n^2$\nspace complextiy: $2^n$\n或是也可以用 Gosper\u0026rsquo;s Hack 直接找到有偶數個 1 的所有組合，然後做類似的操作，也可以解出這一題。\n","permalink":"http://localhost:1313/blog/leetcode/1799.maximize-score-after-n-operations/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/maximize-score-after-n-operations/\"\u003ehttps://leetcode.com/problems/maximize-score-after-n-operations/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e這題一開始我用 greedy 的方式做，寫完才發現 greedy 事實上會錯。\u003c/p\u003e\n\u003cp\u003e首先，這一題需要知道所有的子集的最佳解。也就是要知道經過 1 次操作後的各種組合最佳解，然後再用這個結果推到經過 2 次操作後的各種組合最佳解。以此類推，直到找到經過 \u003ccode\u003en / 2\u003c/code\u003e 次操作後的最佳解。\u003c/p\u003e\n\u003cp\u003e例如 \u003ccode\u003enums = [1,2,3,4,5,6]\u003c/code\u003e。用 6 個 bit 來記錄選了哪些數字。\u003cbr\u003e\n$110000_2$ 就是代表「在只有第 3, 4, 5, 6 個數字可以選的情況下，此時最佳解」。並且用 dp[$110000_2$] 來記錄這個結果。\\\u003c/p\u003e\n\u003cp\u003e假設想要求 dp[$110000_2$]，也就是「第 3, 4, 5, 6 個數字可以選的情況下，此時最佳解」，有以下的選擇：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e選第 3, 4 個數字，結果會是 2 * gcd(nums[3], nums[4]) + dp[$111100_2$]\u003c/li\u003e\n\u003cli\u003e選第 3, 5 個數字，結果會是 2 * gcd(nums[3], nums[5]) + dp[$111010_2$]\u003c/li\u003e\n\u003cli\u003e選第 3, 6 個數字，結果會是 2 * gcd(nums[3], nums[6]) + dp[$111001_2$]\u003c/li\u003e\n\u003cli\u003e選第 4, 5 個數字，結果會是 2 * gcd(nums[4], nums[5]) + dp[$110110_2$]\u003c/li\u003e\n\u003cli\u003e選第 4, 6 個數字，結果會是 2 * gcd(nums[4], nums[6]) + dp[$110101_2$]\u003c/li\u003e\n\u003cli\u003e選第 5, 6 個數字，結果會是 2 * gcd(nums[5], nums[6]) + dp[$110011_2$]\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003edp[$110000_2$] 就是上面這些選擇的最大值。\u003cbr\u003e\n之所以是 2 * gcd(x, y)，是因爲 $110000_2$ 有 4 個 0，所以選數字的話，會是第 2 次選（4 / 2 = 2）。\u003c/p\u003e","title":"1799. Maximize Score After N Operations"},{"content":"這是在寫 1799. Maximize Score After N Operations 時遇到的問題。\n簡單來說，我想要解決的問題是「找到 n 個物品中取 k 個的所有組合」。而 Gosper\u0026rsquo;s Hack 可以有效率地找到 n 個 bit 中 k 個 bit 爲 1 的所有組合，剛剛好對應了我的問題。\nGosper\u0026rsquo;s Hack 的原理就是，從滿足條件（n 個 bit 中 k 個 bit 爲 1）的數字中，從最小的數字，一路找到最大的。\n如果想找「5 個 bit 中 2 個 bit 爲 1」的組合，那麼 Gosper\u0026rsquo;s Hack 會依序找到\n00011 00101 00110 01001 01010 01100 10001 10010 10100 11000 首先，滿足條件的數字中，最小的數字很容易就找到，就是把所有的 1 塞到最右邊去，也就是\nint state = (1 \u0026lt;\u0026lt; k) - 1; 接下來比較難的問題是，要如何有效率地找到下一個數字。\n找到下一個數字，分成兩個步驟\n把最右邊的 $01$ 變成 $10$ 把剛剛 $10$ 右邊的 $1$ 全部推到最右邊去 看一個範例：有數字 $10011110_2$，他的下一個數字應該是多少？\n根據上面的步驟，$10011100_2$ 的下一個數字就是 $10100111_2$\n爲什麼這樣可以找到下一個數字？\n對於一個二進位的數字，想要找到比他大而且也是擁有 k 個 1 的數字，一定是把最後一個 1 之前的 0 變成 1，然後這個 1 （原本是 0 的 1）後面的數字越小越好，同時也要維持總共 k 個 1。\n例如： 要找到比 $10011110_2$ 大的數字，有以下選擇\n$11$xxxxxx：把第一個 $0$ 變成 $1$\n$101$xxxxx：把第二個 $0$ 變成 $1$\n$111$xxxxx：把第一、二個 $0$ 變成 $1$\n後面的 x 代表填入 $0$ 或是 $1$ 都可以。\n但是要從這些選擇裡面找到最小的，一定是\n只把一個 $0$ 變成 $1$ 這個 $0$ 要越右邊越好 從上面的三個選擇中，最小選項就是 「把第二個 $0$ 變成 $1$」。\n接下來只需要煩惱後面的 x 要填入什麼數字。\n爲了要維持 5 個 $1$，這些 x 裡面應該要出現 3 個 $1$（$101$xxxxx 已經有 2 個 $1$），而想要讓這個數字最小，一定是把這 3 個 $1$ 放到最右邊。\n所以最後才有 $10100111_2$。\n步驟 1 中選擇「最右邊」的原因，是因爲要從比當前數字大的選擇中找到最小的數字，而 「$01$ 變成 $10$」 則是爲了維持 1 的數量不變。\n步驟 2 中把 「$1$ 全部推到最右邊去」則是爲了讓後面的數字越小越好，而最小數字的就是 1 全部都在後面。\n接下來看一下程式的部分\nvoid GospersHack(int k, int n) { int state = (1 \u0026lt;\u0026lt; k) - 1; while (state \u0026lt; (1 \u0026lt;\u0026lt; n)) { // do something in current state int c = state \u0026amp; -state; int r = state + c; state = (((r ^ state) \u0026gt;\u0026gt; 2) / c) | r; } } 一樣用 $10011110_2$ 來舉例 $$ \\begin{align*} \\text{state} \u0026amp;= 10\\textcolor{red}{01}\\textcolor{yellow}{111}0_2\\\\ \\text{c} \u0026amp;= 00000010_2\\\\ \\text{r} = \\text{state} + \\text{c} \u0026amp;= 10\\textcolor{red}{10}0000_2\\\\ \\text{r \\^ state} \u0026amp;= 00\\textcolor{red}{11}\\textcolor{yellow}{111}0_2\\\\ \\text{((r \\^ state) / c) \u0026raquo; 2} \u0026amp;= 00000\\textcolor{yellow}{111}_2\\\\ \\text{((r \\^ state) / c) \u0026raquo; 2 | r} \u0026amp;= 10\\textcolor{red}{10}0\\textcolor{yellow}{111}_2\\\\ \\end{align*} $$ 紅色的數字就是 「最右邊的 $01$」，黃色則是步驟 2 中 「右邊的 $1$」。\nc 得到的數字是「最右邊的 1」\nr 得到的數字是「最右邊的 $01$ 變成 $10$」，然後右邊都變成 0。\nr ^ state 就是 r 跟 state 之間哪幾個 bit 不一樣。會不一樣的 bit 其實就是紅色跟黃色數字。\n((r ^ state) / c) \u0026gt;\u0026gt; 2 就是把這些 1 推到最右邊，然後再減少 2 個 1，就是步驟 2 在做的事情。\n最後再把 r 跟 ((r ^ state) / c) \u0026gt;\u0026gt; 2 做 OR，就可以得到結果。\n可是程式寫的是 ((r ^ state) \u0026gt;\u0026gt; 2) / c 而不是 ((r ^ state) / c) \u0026gt;\u0026gt; 2，第二個網站有寫到，\nGosper chose to use ((r ^ set) \u0026raquo; 2) / c) instead of ((r ^ set) / c) \u0026raquo; 2. Why? I believe he did so because some CPUs use the shift-and-subtract method to perform division and stop as soon as the remainder is 0, so dividing by a small number is faster. Thus, in some CPUs, we can expect ((r ^ set) \u0026raquo; 2) / c) to be marginally faster than ((r ^ set) / c) \u0026raquo; 2.\n看起來是因爲寫 ((r ^ state) \u0026gt;\u0026gt; 2) / c 效率會更好，所以才這樣做。\n1: https://zhuanlan.zhihu.com/p/360512296 2: https://programmingforinsomniacs.blogspot.com/2018/03/gospers-hack-explained.html\n","permalink":"http://localhost:1313/blog/posts/gospers-hack/","summary":"\u003cp\u003e這是在寫 \u003ca href=\"https://leetcode.com/problems/maximize-score-after-n-operations/\"\u003e1799. Maximize Score After N Operations\u003c/a\u003e 時遇到的問題。\u003c/p\u003e\n\u003cp\u003e簡單來說，我想要解決的問題是「找到 n 個物品中取 k 個的所有組合」。而 Gosper\u0026rsquo;s Hack 可以有效率地找到 n 個 bit 中 k 個 bit 爲 1 的所有組合，剛剛好對應了我的問題。\u003c/p\u003e\n\u003cp\u003eGosper\u0026rsquo;s Hack 的原理就是，從滿足條件（n 個 bit 中 k 個 bit 爲 1）的數字中，從最小的數字，一路找到最大的。\u003c/p\u003e\n\u003cp\u003e如果想找「5 個 bit 中 2 個 bit 爲 1」的組合，那麼 Gosper\u0026rsquo;s Hack 會依序找到\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e00011\n00101\n00110\n01001\n01010\n01100\n10001\n10010\n10100\n11000\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e首先，滿足條件的數字中，最小的數字很容易就找到，就是把所有的 1 塞到最右邊去，也就是\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003estate\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e接下來比較難的問題是，要如何有效率地找到下一個數字。\u003c/p\u003e\n\u003cp\u003e找到下一個數字，分成兩個步驟\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e把最右邊的 $01$ 變成 $10$\u003c/li\u003e\n\u003cli\u003e把剛剛 $10$ 右邊的 $1$ 全部推到最右邊去\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e看一個範例：有數字 $10011110_2$，他的下一個數字應該是多少？\u003cbr\u003e\n根據上面的步驟，$10011100_2$ 的下一個數字就是 $10100111_2$\u003c/p\u003e","title":"Gosper's Hack"},{"content":"https://leetcode.com/problems/maximum-number-of-moves-in-a-grid/\n用 prev 來記錄前一個 column 的第 i 格是否能夠走到，cur 來記錄目前 column 的第 i 格是否能夠走到。\n在 grid[i][j] 的時候，檢查 grid[i - 1][j - 1], grid[i][j - 1], grid[i + 1][j - 1] 是否小於 grid[i][j]，並且還要同時滿足對應的 prev[i - 1], prev[i], prev[i + 1] 爲 true。\n如果在跑過 jth column 後沒有任何爲 true，那麼代表沒辦法再繼續走下去了，可以回傳結果。\nint maxMoves(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; grid) { int steps = 0; int cols = grid[0].size(); int rows = grid.size(); vector\u0026lt;bool\u0026gt; prev(rows, true); for (int j = 1; j \u0026lt; cols; j++){ vector\u0026lt;bool\u0026gt; cur(rows, false); bool stop = true; for (int i = 0; i \u0026lt; rows; i++){ for (int k = max(0, i - 1); k \u0026lt;= min(i + 1, rows - 1); k++){ if (prev[k] \u0026amp;\u0026amp; grid[k][j - 1] \u0026lt; grid[i][j]){ cur[i] = true; stop = false; } } } swap(prev, cur); if (stop){ return steps; } else { steps++; } } return steps; } time complexity: $O(rows \\times cols)$\nspace complextiy: $O(rows)$\n當然也可以用 dfs + dp 來解這一題。\ndfs(row, col) 會回傳「從 grid[row][col] 開始走，能走幾步」。\n注意當 col == cols - 1 時要回傳 0，因爲已經抵達右邊的邊界，沒辦法繼續走下去。\n這個方法時間複雜度會跟上面一樣，因爲每一個 dfs(row, col) 都只會算過一次，算過之後就會存在 dp[row][col] 裡面。但是空間複雜度會比較大。\nint maxMoves(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; grid) { int rows = grid.size(); int cols = grid[0].size(); vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; dp(rows, vector\u0026lt;int\u0026gt; (cols, -1)); function\u0026lt;int(int, int)\u0026gt; dfs = [\u0026amp;](int row, int col){ if (col \u0026gt;= cols - 1){ return 0; } if (dp[row][col] != -1){ return dp[row][col]; } int steps = 0; for (int r = max(row - 1, 0); r \u0026lt;= min(row + 1, rows - 1); r++){ if (grid[row][col] \u0026lt; grid[r][col + 1]){ steps = max(steps, 1 + dfs(r, col + 1)); } } dp[row][col] = steps; return steps; }; int ans = 0; for (int r = 0; r \u0026lt; rows; r++){ ans = max(ans, dfs(r, 0)); } return ans; } time complexity: $O(rows \\times cols)$\nspace complextiy: $O(rows \\times cols)$\n","permalink":"http://localhost:1313/blog/leetcode/2684.maximum-number-of-moves-in-a-grid/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/maximum-number-of-moves-in-a-grid/\"\u003ehttps://leetcode.com/problems/maximum-number-of-moves-in-a-grid/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e用 \u003ccode\u003eprev\u003c/code\u003e 來記錄前一個 column 的第 i 格是否能夠走到，\u003ccode\u003ecur\u003c/code\u003e 來記錄目前 column 的第 i 格是否能夠走到。\u003cbr\u003e\n在 \u003ccode\u003egrid[i][j]\u003c/code\u003e 的時候，檢查 \u003ccode\u003egrid[i - 1][j - 1], grid[i][j - 1], grid[i + 1][j - 1]\u003c/code\u003e 是否小於 \u003ccode\u003egrid[i][j]\u003c/code\u003e，並且還要同時滿足對應的 \u003ccode\u003eprev[i - 1], prev[i], prev[i + 1]\u003c/code\u003e 爲 \u003ccode\u003etrue\u003c/code\u003e。\u003cbr\u003e\n如果在跑過 jth column 後沒有任何爲 \u003ccode\u003etrue\u003c/code\u003e，那麼代表沒辦法再繼續走下去了，可以回傳結果。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emaxMoves\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003egrid\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003esteps\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ecols\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egrid\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003erows\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egrid\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eprev\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erows\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ecols\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ecur\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003erows\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003estop\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003erows\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003erows\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eprev\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003egrid\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003egrid\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"n\"\u003ecur\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"n\"\u003estop\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eswap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eprev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecur\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estop\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003esteps\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003esteps\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003esteps\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003etime complexity:\u003c/strong\u003e $O(rows \\times cols)$\u003cbr\u003e\n\u003cstrong\u003espace complextiy:\u003c/strong\u003e $O(rows)$\u003c/p\u003e","title":"2684. Maximum Number of Moves in a Grid"},{"content":"https://leetcode.com/problems/minimum-cost-of-a-path-with-special-roads/\n這是一題 SSSP(Single-Source Shortest Path) 問題，第一個想法就是直接用 Dijkstra 解決。但是這題跟其他問題不一樣的地方在於，這個 graph 是無限大的，因爲我們要在二維平面找最短距離，而二維平面沒有邊界。因此，什麼時候要結束 Dijkstra algorithm 變成了新的問題。\n首先，從 start 到 target 的最短距離只會有兩種情況，\n有經過 special road 沒有經過 special road 所以只需要找到 start 到各個 special road 的終點的最短距離，最後再看看 start 到 target 的最短距離是多少即可。 同樣地，從 start 到 special road 的終點的最短距離也只會有以上的兩種情況，所以跑 Dijkstra 的時候，只需要不斷比較有無使用 special road 的 cost。\nint minimumCost(vector\u0026lt;int\u0026gt;\u0026amp; start, vector\u0026lt;int\u0026gt;\u0026amp; target, vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; specialRoads) { int n = specialRoads.size(); vector\u0026lt;int\u0026gt; shortest(n, INT_MAX); // 記錄從 start 到第 i 個 specialRoad 終點的最短距離 priority_queue\u0026lt;pair\u0026lt;int, int\u0026gt;, vector\u0026lt;pair\u0026lt;int, int\u0026gt;\u0026gt;, greater\u0026lt;\u0026gt;\u0026gt; pq; for (int i = 0; i \u0026lt; n; i++){ int x1 = specialRoads[i][0]; int y1 = specialRoads[i][1]; int x2 = specialRoads[i][2]; int y2 = specialRoads[i][3]; int cost = specialRoads[i][4]; int with_road = abs(start[0] - x1) + abs(start[1] - y1) + cost; // 有使用 specialRoad int without_road = abs(start[0] - x2) + abs(start[1] - y2); // 沒有使用 specialRoad pq.push({min(with_road, without_road), i}); } while (not pq.empty()){ auto [distance, index] = pq.top(); pq.pop(); if (shortest[index] != INT_MAX){ continue; } shortest[index] = distance; for (int i = 0; i \u0026lt; n; i++){ if (shortest[i] != INT_MAX){ continue; } int x1 = specialRoads[i][0]; int y1 = specialRoads[i][1]; int x2 = specialRoads[i][2]; int y2 = specialRoads[i][3]; int cost = specialRoads[i][4]; int with_road = abs(specialRoads[index][2] - x1) + abs(specialRoads[index][3] - y1) + cost; int without_road = abs(specialRoads[index][2] - x2) + abs(specialRoads[index][3] - y2); pq.push({distance + min(with_road, without_road), i}); } } int ans = abs(start[0] - target[0]) + abs(start[1] - target[1]); // 最後檢查從第 i 個 specialRoad 的終點到 target 的距離 // 如果更短的話就更新最小值 for (int i = 0; i \u0026lt; n; i++){ ans = min(ans, shortest[i] + abs(specialRoads[i][2] - target[0]) + abs(specialRoads[i][3] - target[1])); } return ans; } time complexity: $O(n^2 \\log n)$\nspace complextiy: $O(n^2)$\nwhere n = specialRoads.size()\n解完之後看了一下 leetcode discussion，發現大家的解法似乎簡單一些，但是目前還沒看懂，理解之後再更新。\n","permalink":"http://localhost:1313/blog/leetcode/2662.minimum-cost-of-a-path-with-special-roads/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/minimum-cost-of-a-path-with-special-roads/\"\u003ehttps://leetcode.com/problems/minimum-cost-of-a-path-with-special-roads/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e這是一題 SSSP(Single-Source Shortest Path) 問題，第一個想法就是直接用 Dijkstra 解決。但是這題跟其他問題不一樣的地方在於，這個 graph 是無限大的，因爲我們要在二維平面找最短距離，而二維平面沒有邊界。因此，什麼時候要結束 Dijkstra algorithm 變成了新的問題。\u003c/p\u003e\n\u003cp\u003e首先，從 start 到 target 的最短距離只會有兩種情況，\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e有經過 special road\u003c/li\u003e\n\u003cli\u003e沒有經過 special road\n所以只需要找到 start 到各個 special road 的終點的最短距離，最後再看看 start 到 target 的最短距離是多少即可。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e同樣地，從 start 到 special road 的終點的最短距離也只會有以上的兩種情況，所以跑 Dijkstra 的時候，只需要不斷比較有無使用 special road 的 cost。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003eminimumCost\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003especialRoads\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003especialRoads\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eshortest\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eINT_MAX\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 記錄從 start 到第 i 個 specialRoad 終點的最短距離\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003epriority_queue\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003epair\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003egreater\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003epq\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ex1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003especialRoads\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ey1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003especialRoads\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ex2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003especialRoads\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ey2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003especialRoads\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ecost\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003especialRoads\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ewith_road\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eabs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003ex1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eabs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003ey1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003ecost\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 有使用 specialRoad\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ewithout_road\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eabs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003ex2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eabs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003ey2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 沒有使用 specialRoad\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"n\"\u003epq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e\u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ewith_road\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ewithout_road\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enot\u003c/span\u003e \u003cspan class=\"n\"\u003epq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eempty\u003c/span\u003e\u003cspan class=\"p\"\u003e()){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003edistance\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eindex\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etop\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003epq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epop\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eshortest\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eindex\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eINT_MAX\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003econtinue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eshortest\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eindex\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edistance\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eshortest\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eINT_MAX\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003econtinue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ex1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003especialRoads\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ey1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003especialRoads\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ex2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003especialRoads\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ey2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003especialRoads\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ecost\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003especialRoads\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ewith_road\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eabs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003especialRoads\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eindex\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003ex1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eabs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003especialRoads\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eindex\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003ey1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003ecost\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ewithout_road\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eabs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003especialRoads\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eindex\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003ex2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eabs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003especialRoads\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eindex\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003ey2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003epq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e\u003cspan class=\"n\"\u003edistance\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ewith_road\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ewithout_road\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eans\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eabs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eabs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// 最後檢查從第 i 個 specialRoad 的終點到 target 的距離\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// 如果更短的話就更新最小值\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eans\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eans\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eshortest\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eabs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003especialRoads\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eabs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003especialRoads\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eans\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003etime complexity:\u003c/strong\u003e $O(n^2 \\log n)$\u003cbr\u003e\n\u003cstrong\u003espace complextiy:\u003c/strong\u003e $O(n^2)$\u003cbr\u003e\nwhere \u003ccode\u003en = specialRoads.size()\u003c/code\u003e\u003c/p\u003e","title":"2662. Minimum Cost of a Path With Special Roads"},{"content":"https://leetcode.com/problems/lexicographical-numbers/\n這題雖然標成 bfs，但是我覺得 bfs 的解法並沒有那麼直觀，但還是先來講講 bfs 的方法。\n解法一 對於任何數字，比這個數字多一位的數字中，最小（字典序）的就是加一個 0 在後面，最大的就是加一個 9 在後面。\n因此可以建構出一棵樹，並且這棵樹用 preorder traversal 遍歷的話，剛剛好會是字典序從小到大排列。這邊只列出這棵樹的前面兩層，實際上這棵樹是無限層的。\nk / \\ 10*k ... 10*k+9 所以只需要遍歷以 1 到 9 爲根的這九棵樹就好，並且當節點大於 n 的時候可以不用遍歷下去。\nvector\u0026lt;int\u0026gt; lexicalOrder(int n) { vector\u0026lt;int\u0026gt; ans; function\u0026lt;void(int)\u0026gt; dfs = [\u0026amp;](int i){ if (i \u0026gt; n){ return; } ans.push_back(i); for (int j = 0; j \u0026lt;= 9; j++){ dfs(i * 10 + j); } return; }; for (int i = 1; i \u0026lt;= 9; i++){ dfs(i); } return ans; } time complexity: $O(n)$\nspace complextiy: $O(\\log n)$\n空間複雜度是 $\\log n$ 的原因是這棵樹每多一層，數字會變成 10 倍，所以最多只會有 $\\log_{10} n$ 那麼多層。\n解法二 第二個解法是我覺得比較直觀的方法，也就是直接從字典序下手。\n假設現在想要知道數字 k 的下一個數字（字典序的排列），最小的就會是 10k ，但如果 10k 大於 n 的話該怎麼辦呢？\n那麼最小的就是 k+1，但如果 k+1 大於 n 的話或是 k+1 需要進位該怎麼辦呢？\n這時候最小的數字，就是把 k 減少位數，直到末位不爲 9，然後再加 1。\n末位爲 9 的時候再加上 1，其實等於把倒數第二位加 1，然後末位變成 0。但是這個時候把末位的 0 直接去掉，可以得到字典序更小的數字，因此需要不斷地把末位的 9 去掉，直到沒有 9 爲止。\n用 k = 192, n = 192 來當範例。\n10k = 1920 \u0026gt; n ，因此不能選擇 1920。\nk/10 = 19，末位爲 9，因此需要再減少位數。\nk/10 = 1，末位不爲 9，此時符合條件，因此下一個數字爲 2。\n接下來就是不斷找字典序的下一個數字，直到找到 n 個數字爲止。\nvector\u0026lt;int\u0026gt; lexicalOrder(int n) { vector\u0026lt;int\u0026gt; ans = {1}; int i = 1; while (ans.size() \u0026lt; n){ if (i * 10 \u0026lt;= n){ i *= 10; } else { while (i + 1 \u0026gt; n || i % 10 == 9){ i /= 10; } i++; } ans.push_back(i); } return ans; } time complexity: $O(n)$\nspace complextiy: $O(1)$\n","permalink":"http://localhost:1313/blog/leetcode/386.lexicographical-numbers/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/lexicographical-numbers/\"\u003ehttps://leetcode.com/problems/lexicographical-numbers/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e這題雖然標成 bfs，但是我覺得 bfs 的解法並沒有那麼直觀，但還是先來講講 bfs 的方法。\u003c/p\u003e\n\u003ch1 id=\"解法一\"\u003e解法一\u003c/h1\u003e\n\u003cp\u003e對於任何數字，比這個數字多一位的數字中，最小（字典序）的就是加一個 0 在後面，最大的就是加一個 9 在後面。\u003c/p\u003e\n\u003cp\u003e因此可以建構出一棵樹，並且這棵樹用 preorder traversal 遍歷的話，剛剛好會是字典序從小到大排列。這邊只列出這棵樹的前面兩層，實際上這棵樹是無限層的。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e       k\n    /     \\\n10*k ... 10*k+9\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e所以只需要遍歷以 1 到 9 爲根的這九棵樹就好，並且當節點大於 n 的時候可以不用遍歷下去。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003elexicalOrder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eans\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003efunction\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003edfs\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e](\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eans\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epush_back\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003edfs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003edfs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eans\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003etime complexity:\u003c/strong\u003e $O(n)$\u003cbr\u003e\n\u003cstrong\u003espace complextiy:\u003c/strong\u003e $O(\\log n)$\u003cbr\u003e\n空間複雜度是 $\\log n$ 的原因是這棵樹每多一層，數字會變成 10 倍，所以最多只會有 $\\log_{10} n$ 那麼多層。\u003c/p\u003e\n\u003ch1 id=\"解法二\"\u003e解法二\u003c/h1\u003e\n\u003cp\u003e第二個解法是我覺得比較直觀的方法，也就是直接從字典序下手。\u003c/p\u003e\n\u003cp\u003e假設現在想要知道數字 k 的下一個數字（字典序的排列），最小的就會是 10k ，但如果 10k 大於 n 的話該怎麼辦呢？\u003c/p\u003e","title":"386. Lexicographical Numbers"},{"content":"今天寫到 leetcode 258. Add Digits (https://leetcode.com/problems/add-digits/)，發現了這個有趣的題目。題目本身不難，但是 follow up 要求寫出 O(1) 時間複雜度的解法，因此卡了一下。\n看到 wiki (https://en.wikipedia.org/wiki/Digital_root#Congruence_formula) 才發現這樣的問題被叫做 Digital Root，而且還可以在不同進位下討論，挺有趣的。\n先看一個簡單的範例：\n有一個 5 進位 的數字 14324 （這是用 5 進位表示），把這個數字的每一位相加然後用 5 進位表示，直到剩下一位，這個數字會是多少？\n1 + 4 + 3 + 2 + 4 = 14（10 進位） = 24（5 進位）\n2 + 4 = 6（10 進位） = 11（5 進位）\n1 + 1 = 2（5 進位）\n這個數字會是 2。但是計算很麻煩，因爲要在 5 進位上面做運算，是人類很不收悉的進位。\n簡單的方法就是把所有的計算都換到 10 進位上面。 有小標的 5 就是指這個數字是 5 進位的。\n$$ 14324_5 = 1 \\times 5^4 + 4 \\times 5^3 + 3 \\times 5^2 + 2 \\times 5^1 + 4 \\times 5^0 $$\n$$ \\begin{align*} 14324_5 \\mod 4 \u0026amp;= 1 \\times 5^4 + 4 \\times 5^3 + 3 \\times 5^2 + 2 \\times 5^1 + 4 \\times 5^0 \\mod 4\\\\ \u0026amp;= 1 \\times (4 + 1)^4 + 4 \\times (4 + 1)^3 + 3 \\times (4 + 1)^2 + 2 \\times (4 + 1)^1 + 4 \\times (4 + 1)^0 \\mod 4 \\\\ \u0026amp;= 1 + 4 + 3 + 2 + 4 \\mod 4 \\\\ \u0026amp;= 14 \\mod 4 = 24_5 \\mod 4 \\\\ \u0026amp;= 2 \\times 5^1 + 4 \\times 5^0 \\mod 4 \\\\ \u0026amp;= 2 + 4 \\mod 4 \\\\ \u0026amp;= 6 \\mod 4 = 11_5 \\mod 4 \\\\ \u0026amp;= 1 \\times 5^1 + 1 \\times 5^0 \\mod 4 \\\\ \u0026amp;= 2 \\mod 4 \\end{align*} $$\n因爲 $(n + 1)^k \\mod n = 1 \\mod n$，所以把 5 進位換到 10 進位再模 4，其實就會等於 5 進位的每一位相加再模 4。反過來說，10 進位模 4，其實等於換到 5 進位後再每一位相加。\n結論就是，換到 10 進位再模 4 就是我們要的結果。\n總結一下，因爲$(n + 1)^k \\mod n = 1 \\mod n$，所以對於 $n + 1$ 進位的數字，換成 10 進位再模 $n$ 就會是要的結果。\n但是還有一些小地方要處理，例如 10 進位的 18，應該要算出 9 (1 + 8)，但是直接模的話會得出 0。所以對於模完爲 0 的數字，需要特別處理，才會有 wiki 上面的式子\n$$ dr_b(n)= \\begin{cases} 0 \u0026amp;n = 0,\\\\ b-1 \u0026amp;n\\neq 0, n \\equiv 0 \\mod (b - 1),\\\\ n \\mod (b - 1) \u0026amp;n\\not\\equiv 0 \\mod (b - 1) \\end{cases} $$\n","permalink":"http://localhost:1313/blog/posts/digital-root/","summary":"\u003cp\u003e今天寫到 leetcode 258. Add Digits (\u003ca href=\"https://leetcode.com/problems/add-digits/\"\u003ehttps://leetcode.com/problems/add-digits/\u003c/a\u003e)，發現了這個有趣的題目。題目本身不難，但是 follow up 要求寫出 O(1) 時間複雜度的解法，因此卡了一下。\u003c/p\u003e\n\u003cp\u003e看到 wiki (\u003ca href=\"https://en.wikipedia.org/wiki/Digital_root#Congruence_formula\"\u003ehttps://en.wikipedia.org/wiki/Digital_root#Congruence_formula\u003c/a\u003e) 才發現這樣的問題被叫做 Digital Root，而且還可以在不同進位下討論，挺有趣的。\u003c/p\u003e\n\u003cp\u003e先看一個簡單的範例：\u003cbr\u003e\n有一個 5 進位 的數字 14324 （這是用 5 進位表示），把這個數字的每一位相加然後用 5 進位表示，直到剩下一位，這個數字會是多少？\u003c/p\u003e\n\u003cp\u003e1 + 4 + 3 + 2 + 4 = 14（10 進位） = 24（5 進位）\u003cbr\u003e\n2 + 4 = 6（10 進位）  = 11（5 進位）\u003cbr\u003e\n1 + 1 = 2（5 進位）\u003c/p\u003e\n\u003cp\u003e這個數字會是 2。但是計算很麻煩，因爲要在 5 進位上面做運算，是人類很不收悉的進位。\u003c/p\u003e\n\u003cp\u003e簡單的方法就是把所有的計算都換到 10 進位上面。\n有小標的 5 就是指這個數字是 5 進位的。\u003c/p\u003e","title":"Digital Root / Repeated digital sum"},{"content":"https://leetcode.com/problems/validate-stack-sequences/\n用 pop_idx 來記錄目前需要 pop 第幾個元素（popped 裡面的）。創造出 stack 並且看看當前 stack.top() 的元素是不是等於 popped[pop_idx]，不斷 pop 直到 stack.top() != popped[pop_idx]。\nbool validateStackSequences(vector\u0026lt;int\u0026gt;\u0026amp; pushed, vector\u0026lt;int\u0026gt;\u0026amp; popped) { stack\u0026lt;int\u0026gt; stk; int pop_idx = 0; for (int push: pushed){ stk.push(push); while (not stk.empty() \u0026amp;\u0026amp; stk.top() == popped[pop_idx]){ stk.pop(); pop_idx++; } } return stk.size() == 0; } 比較有趣的是，我們不用檢查 pop_idx \u0026lt; popped.size()，原因是一共會 push n 次，所以最多只會 pop n 次。當 pop_idx == n 時，其實也代表已經 push 完了，會跳出 for 迴圈。\ntime complexity: O( n )\nspace complextiy: O( n )\n跟其他 stack 的問題一樣，可以直接用 vector 來模擬 stack 的運作，優化空間複雜度。\npush_idx 是 vector 要塞入新元素的位置。push_idx - 1 就會是 vector 中最上面的元素。\nbool validateStackSequences(vector\u0026lt;int\u0026gt;\u0026amp; pushed, vector\u0026lt;int\u0026gt;\u0026amp; popped) { int n = pushed.size(); int push_idx = 0; int pop_idx = 0; for (int push: pushed){ pushed[push_idx] = push; push_idx++; while (push_idx - 1 \u0026gt;= 0 \u0026amp;\u0026amp; pushed[push_idx - 1] == popped[pop_idx]){ push_idx--; pop_idx++; } } return push_idx == 0; } time complexity: O( n )\nspace complextiy: O( 1 )\n","permalink":"http://localhost:1313/blog/leetcode/946.validate-stack-sequences/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/validate-stack-sequences/\"\u003ehttps://leetcode.com/problems/validate-stack-sequences/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e用 \u003ccode\u003epop_idx\u003c/code\u003e 來記錄目前需要 pop 第幾個元素（popped 裡面的）。創造出 stack 並且看看當前 \u003ccode\u003estack.top()\u003c/code\u003e 的元素是不是等於 \u003ccode\u003epopped[pop_idx]\u003c/code\u003e，不斷 pop 直到 \u003ccode\u003estack.top() != popped[pop_idx]\u003c/code\u003e。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"nf\"\u003evalidateStackSequences\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003epushed\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003epopped\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estack\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003estk\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003epop_idx\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nl\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003epushed\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003estk\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enot\u003c/span\u003e \u003cspan class=\"n\"\u003estk\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eempty\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003estk\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etop\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003epopped\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003epop_idx\u003c/span\u003e\u003cspan class=\"p\"\u003e]){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003estk\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epop\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003epop_idx\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003estk\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e比較有趣的是，我們不用檢查 \u003ccode\u003epop_idx \u0026lt; popped.size()\u003c/code\u003e，原因是一共會 push n 次，所以最多只會 pop n 次。當 \u003ccode\u003epop_idx == n\u003c/code\u003e 時，其實也代表已經 push 完了，會跳出 for 迴圈。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003etime complexity:\u003c/strong\u003e O( n )\u003cbr\u003e\n\u003cstrong\u003espace complextiy:\u003c/strong\u003e O( n )\u003c/p\u003e\n\u003cp\u003e跟其他 stack 的問題一樣，可以直接用 vector 來模擬 stack 的運作，優化空間複雜度。\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003epush_idx\u003c/code\u003e 是 vector 要塞入新元素的位置。\u003ccode\u003epush_idx - 1\u003c/code\u003e 就會是 vector 中最上面的元素。\u003c/p\u003e","title":"946. Validate Stack Sequences"},{"content":"https://leetcode.com/problems/number-of-ways-to-form-a-target-string-given-a-dictionary/\n首先，在組合出 target 的過程，取哪一個 word 其實不重要，重要的是取了第幾個 character。我們可以把 words 裡面的資訊變成 freq[i][j]，freq[i][j]爲「words 中，第 i 個 (0 indexed) character 出現 j 這個英文字母的次數」。\n例如： words = [\u0026quot;acca\u0026quot;,\u0026quot;bbbb\u0026quot;,\u0026quot;caca\u0026quot;]，那麼 freq[3][0] 就是「words 中，第 3 個 character 出現 \u0026lsquo;a\u0026rsquo; 這個英文字母的次數」，也就是 2。\n接下來定義 dp[i][j] 爲 「每一個 word 的前 i 位 (1 indexed) 配出 target 的前 j 位 (1 indexed) 的方法數」。下面文字的部分沒有特別講都是 1 indexed。\n對於 dp[i][j]，\n如果決定在第 i 位選出 target 的第 j 位，那麼方法數就是 dp[i - 1][j - 1] * freq[i - 1][target[j] - 'a']（freq 是 0 indexed）。\n如果決定不在第 i 位選出 target 的第 j 位，那麼方法數就是 dp[i - 1][j] 。\n例如： words = [\u0026quot;acca\u0026quot;,\u0026quot;bbbb\u0026quot;,\u0026quot;caca\u0026quot;], target = \u0026quot;aba\u0026quot;，dp[3][2] 等於在問 words = [\u0026quot;acc\u0026quot;,\u0026quot;bbb\u0026quot;,\u0026quot;cac\u0026quot;], target = \u0026quot;ab\u0026quot; 的方法數。\n如果決定在第 3 位選出 target 的第 2 位（也就是 \u0026lsquo;b\u0026rsquo;），那麼有 dp[2][1] * 1（因爲只有 \u0026quot;bbb\u0026quot; 的第 3 位是 'b'） 種方法數。\n如果不選的話，那麼有 dp[2][2] 種方法數。\n當 j == 0，一共有 1 種方法數，也就是什麼都不選。\n當 i \u0026lt; j，一共有 0 種方法數，因爲不可能選到。\nint numWays(vector\u0026lt;string\u0026gt;\u0026amp; words, string target) { int n = words[0].size(); int m = target.size(); int mod = 1e9 + 7; vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; freq(n, vector\u0026lt;int\u0026gt; (26, 0)); for (string word: words){ for (int i = 0; i \u0026lt; n; i++){ freq[i][word[i] - \u0026#39;a\u0026#39;]++; } } // memo[i][j] = first i characters in word, ways to form target[j:] vector\u0026lt;vector\u0026lt;long long\u0026gt;\u0026gt; memo(n + 1, vector\u0026lt;long long\u0026gt; (m + 1, 0)); function\u0026lt;long long(int, int)\u0026gt; dp = [\u0026amp;](int i, int j) -\u0026gt; long long { if (j == 0){ return 1; } if (i \u0026lt; j){ return 0; } if (memo[i][j] \u0026gt; 0){ return memo[i][j]; } memo[i][j] = (dp(i - 1, j) + dp(i - 1, j - 1) * freq[i - 1][target[j - 1] - \u0026#39;a\u0026#39;]) % mod; return memo[i][j]; }; return dp(n, m); } time complexity: O( nk + nm )\nspace complextiy: O( 26n + nm )\nwhere n = words[0].size(), m = target.size(), k = words.size()\n也可以改成 bottom up 的寫法：\nint numWays(vector\u0026lt;string\u0026gt;\u0026amp; words, string target) { int n = words[0].size(); int m = target.size(); int mod = 1e9 + 7; vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; freq(n, vector\u0026lt;int\u0026gt; (26, 0)); for (string word: words){ for (int i = 0; i \u0026lt; n; i++){ freq[i][word[i] - \u0026#39;a\u0026#39;]++; } } vector\u0026lt;vector\u0026lt;long long\u0026gt;\u0026gt; memo(n + 1, vector\u0026lt;long long\u0026gt; (m + 1, 0)); for (int i = 0; i \u0026lt;= n; i++){ for (int j = 0; j \u0026lt;= i \u0026amp;\u0026amp; j \u0026lt;= m; j++){ if (j == 0){ memo[i][j] = 1; } else { memo[i][j] = (memo[i - 1][j] + memo[i - 1][j - 1] * freq[i - 1][target[j - 1] - \u0026#39;a\u0026#39;]) % mod; } } } return memo[n][m]; } 計算 memo[i] 時只有用到 memo[i - 1]，可以進一步優化空間複雜度。\nint numWays(vector\u0026lt;string\u0026gt;\u0026amp; words, string target) { int n = words[0].size(); int m = target.size(); int mod = 1e9 + 7; vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; freq(n, vector\u0026lt;int\u0026gt; (26, 0)); for (string word: words){ for (int i = 0; i \u0026lt; n; i++){ freq[i][word[i] - \u0026#39;a\u0026#39;]++; } } vector\u0026lt;long long\u0026gt; memo(m + 1, 0), prev(m + 1, 0); for (int i = 0; i \u0026lt;= n; i++){ for (int j = 0; j \u0026lt;= i \u0026amp;\u0026amp; j \u0026lt;= m; j++){ if (j == 0){ memo[j] = 1; } else { memo[j] = (prev[j] + prev[j - 1] * freq[i - 1][target[j - 1] - \u0026#39;a\u0026#39;]) % mod; } } swap(memo, prev); } return prev[m]; } space complextiy: O( 26n + m )\n實際上空間複雜度可以再優化，前面的 freq 可以不用先算。\nint numWays(vector\u0026lt;string\u0026gt;\u0026amp; words, string target) { int n = words[0].size(); int m = target.size(); int mod = 1e9 + 7; vector\u0026lt;long long\u0026gt; memo(m + 1, 0), prev(m + 1, 0); prev[0] = 1; for (int i = 1; i \u0026lt;= n; i++){ vector\u0026lt;int\u0026gt; freq(26, 0); for (string \u0026amp;word: words){ freq[word[i - 1] - \u0026#39;a\u0026#39;]++; } for (int j = 0; j \u0026lt;= i \u0026amp;\u0026amp; j \u0026lt;= m; j++){ if (j == 0){ memo[j] = 1; } else { memo[j] = (prev[j] + prev[j - 1] * freq[target[j - 1] - \u0026#39;a\u0026#39;]) % mod; } } swap(memo, prev); } return prev[m]; } space complextiy: O( n + m )\n","permalink":"http://localhost:1313/blog/leetcode/1639.number-of-ways-to-form-a-target-string-given-a-dictionary/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/number-of-ways-to-form-a-target-string-given-a-dictionary/\"\u003ehttps://leetcode.com/problems/number-of-ways-to-form-a-target-string-given-a-dictionary/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e首先，在組合出 target 的過程，取哪一個 word 其實不重要，重要的是取了第幾個 character。我們可以把 words 裡面的資訊變成 \u003ccode\u003efreq[i][j]\u003c/code\u003e，\u003ccode\u003efreq[i][j]\u003c/code\u003e爲「words 中，第 i 個 (0 indexed) character 出現 j 這個英文字母的次數」。\u003c/p\u003e\n\u003cp\u003e例如： \u003ccode\u003ewords = [\u0026quot;acca\u0026quot;,\u0026quot;bbbb\u0026quot;,\u0026quot;caca\u0026quot;]\u003c/code\u003e，那麼 \u003ccode\u003efreq[3][0]\u003c/code\u003e 就是「words 中，第 3 個 character 出現 \u0026lsquo;a\u0026rsquo; 這個英文字母的次數」，也就是 2。\u003c/p\u003e\n\u003cp\u003e接下來定義 \u003ccode\u003edp[i][j]\u003c/code\u003e 爲 「每一個 word 的前 i 位 (1 indexed) 配出 target 的前 j 位 (1 indexed) 的方法數」。下面文字的部分沒有特別講都是 1 indexed。\u003c/p\u003e\n\u003cp\u003e對於 \u003ccode\u003edp[i][j]\u003c/code\u003e，\u003cbr\u003e\n如果決定在第 i 位選出 target 的第 j 位，那麼方法數就是 \u003ccode\u003edp[i - 1][j - 1] * freq[i - 1][target[j] - 'a']\u003c/code\u003e（freq 是 0 indexed）。\u003cbr\u003e\n如果決定不在第 i 位選出 target 的第 j 位，那麼方法數就是 \u003ccode\u003edp[i - 1][j] \u003c/code\u003e。\u003c/p\u003e","title":"1639. Number of Ways to Form a Target String Given a Dictionary"},{"content":"https://leetcode.com/problems/minimize-the-total-price-of-the-trips/\n基本上這題分爲兩個步驟，\n找出經過所有節點的次數 在樹上跑過一次 dp，看減半過後的最佳解 我們先看第一個步驟要怎麼做。\n先把 edges 變成 adjacency list g。接下來對於 trips[i]，可以從 trips[i][0] 跑過 dfs 或是 bfs 直到經過 trips[i][1]。\n用 freq 來記錄經過各個節點的次數， parent 來記錄 「以 trips[i][0] 爲 root，各個節點的 parent 是誰」。\n當經過 trips[i][1] 時可以跳出 queue，並且從 trips[i][1] 開始，往上走，邊走邊更新 freq 直到我們抵達 root。\nvector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; g(n); for (auto e: edges){ g[e[0]].push_back(e[1]); g[e[1]].push_back(e[0]); } vector\u0026lt;int\u0026gt; freq(n, 0); for (auto trip: trips){ int start = trip[0]; int end = trip[1]; queue\u0026lt;int\u0026gt; q; vector\u0026lt;bool\u0026gt; visited(n, false); vector\u0026lt;int\u0026gt; parent(n, -1); q.push(start); visited[start] = true; while (not q.empty()){ int cur = q.front(); q.pop(); if (cur == end){ break; } for (int next: g[cur]){ if (not visited[next]){ q.push(next); parent[next] = cur; visited[next] = true; } } } for (int i = end; i \u0026gt;= 0; i = parent[i]){ freq[i]++; } } 或是用 recursion 的方式：\nfor (auto trip: trips){ int start = trip[0]; int end = trip[1]; function\u0026lt;bool(int, int)\u0026gt; dfs = [\u0026amp;](int cur, int p){ if (cur == end){ freq[cur]++; return true; } for (int next: g[cur]){ if (next != p \u0026amp;\u0026amp; dfs(next, cur)){ freq[cur]++; return true; } } return false; }; dfs(start, -1); } dfs(n, p) 會回傳 true 如果以 n 爲 root 的 subtree 包含了 end 這個節點。\n可以看著這個圖想想看。\n接下來第二個步驟就是在樹上 dp。\n定義 dp(i) 爲「0 爲 root 時，以 i 爲 root 的 subtree 在選擇減半與不減半的 minimal cost」。\ndp(i)[0] 是減半的 minimal cost，dp(i)[1] 是不減半的 minimal cost。\n看起來有點饒口，可以搭配下面這張圖。\ndp(5) 的意思就是 「5 爲 root 的 subtree （也就是 5, 1, 6 這個樹）在選擇減半與不減半（price[5] 減半與不減半）的 minimal cost」\n對於 dp(i)，如果選擇減半的話，i 這個節點的 cost 是 freq[i] * price[i] / 2，但是代價是 i 的 children 都不能減半。\n不選擇減半的話，i 這個節點的 cost 是 freq[i] * price[i]，但是 i 的 children 可以選擇減半（可以減半，但是不一定要）。\n所以對於 i，不減半的最佳選擇就是 freq[i] * price[i] + sum(min(dp(j)[0], dp(j)[1]))，j 是 i 的 children。\n減半的最佳選擇就是 freq[i] * price[i] / 2 + sum((dp(j)[1])，j 是 i 的 children。\nfunction\u0026lt;pair\u0026lt;int, int\u0026gt;(int, int)\u0026gt; dp = [\u0026amp;](int cur, int prev) -\u0026gt; pair\u0026lt;int, int\u0026gt;{ int no_half = freq[cur] * price[cur]; int half = no_half / 2; for (int next: g[cur]){ if (next == prev){ continue; } auto [half_next, no_half_next] = dp(next, cur); no_half += min(half_next, no_half_next); half += no_half_next; } return {half, no_half}; }; auto ans = dp(0, -1); return min(ans.first, ans.second); ","permalink":"http://localhost:1313/blog/leetcode/2646.minimize-the-total-price-of-the-trips/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/minimize-the-total-price-of-the-trips/\"\u003ehttps://leetcode.com/problems/minimize-the-total-price-of-the-trips/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e基本上這題分爲兩個步驟，\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e找出經過所有節點的次數\u003c/li\u003e\n\u003cli\u003e在樹上跑過一次 dp，看減半過後的最佳解\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e我們先看第一個步驟要怎麼做。\u003c/p\u003e\n\u003cp\u003e先把 \u003ccode\u003eedges\u003c/code\u003e 變成 adjacency list \u003ccode\u003eg\u003c/code\u003e。接下來對於 \u003ccode\u003etrips[i]\u003c/code\u003e，可以從 \u003ccode\u003etrips[i][0]\u003c/code\u003e 跑過 dfs 或是 bfs 直到經過 \u003ccode\u003etrips[i][1]\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e用 \u003ccode\u003efreq\u003c/code\u003e 來記錄經過各個節點的次數， \u003ccode\u003eparent\u003c/code\u003e 來記錄 「以 \u003ccode\u003etrips[i][0]\u003c/code\u003e 爲 root，各個節點的 parent 是誰」。\u003c/p\u003e\n\u003cp\u003e當經過 \u003ccode\u003etrips[i][1]\u003c/code\u003e 時可以跳出 queue，並且從 \u003ccode\u003etrips[i][1]\u003c/code\u003e 開始，往上走，邊走邊更新 \u003ccode\u003efreq\u003c/code\u003e 直到我們抵達 root。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eg\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"nl\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eedges\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]].\u003c/span\u003e\u003cspan class=\"n\"\u003epush_back\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]].\u003c/span\u003e\u003cspan class=\"n\"\u003epush_back\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003efreq\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"nl\"\u003etrip\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003etrips\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etrip\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eend\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etrip\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003equeue\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003evisited\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eparent\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003evisited\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enot\u003c/span\u003e \u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eempty\u003c/span\u003e\u003cspan class=\"p\"\u003e()){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ecur\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efront\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epop\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecur\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nl\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eg\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ecur\u003c/span\u003e\u003cspan class=\"p\"\u003e]){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enot\u003c/span\u003e \u003cspan class=\"n\"\u003evisited\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e]){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003eparent\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecur\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003evisited\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eparent\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003efreq\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e或是用 recursion 的方式：\u003c/p\u003e","title":"2646. Minimize the Total Price of the Trips"},{"content":"https://leetcode.com/problems/longest-palindromic-subsequence/\n這題是很有趣的 dp 問題，題目不難，但是有很多不同的解法。不同的解法也考驗著你對 dp 收悉的程度。\n解法一 解法一其實有點偷吃步，把問題轉化爲較收悉的問題再處理。\n對於 string s，我們考慮 s_reverse，也就是 s 反過來之後的結果。\n例如 s = \u0026quot;abcde\u0026quot;，那麼 s_reverse = \u0026quot;edcba\u0026quot;。\n問題就變成了找 s 跟 reverse_s 的 longest common subsequence。\nint longestPalindromeSubseq(string s) { string s_reverse = s; reverse(begin(s), end(s)); int n = s.size(); vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; dp(n + 1, vector\u0026lt;int\u0026gt; (n + 1, 0)); for (int i = 1; i \u0026lt;= n; i++){ for (int j = 1; j \u0026lt;= n; j++){ if (s[i - 1] == s_reverse[j - 1]){ dp[i][j] = 1 + dp[i - 1][j - 1]; } else { dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]); } } } return dp[n][n]; } time complexity: $O( n^2 )$\nspace complextiy: $O( n^2 )$\n解法二 定義 dp[i][j] 爲 s[i, ..., j] 中最長的迴文子序列。\n對於 dp[i][j]，\n若 s[i] == s[j]，那麼最長迴文子序列就是 dp[i + 1][j - 1] + 2。\n例如：s[i: j] = \u0026quot;bbbab\u0026quot;，問題就被轉化爲找出 s[i + 1: j - 1] = \u0026quot;bba\u0026quot; 並且 +2，這個 +2 來自於我們選取 s[i] 跟 s[j]。\n若 s[i] != s[j]，那麼最長迴文子序列就是 max(dp[i + 1][j], dp[i][j - 1])。\n例如：s[i: j] = \u0026quot;bbbabc\u0026quot;，問題就被轉化爲找出 s[i + 1: j] = \u0026quot;bbabc\u0026quot;以及 s[i: j - 1] = \u0026quot;bbbab 中較長的一個。\n在計算上圖的黃色格子時，我們會需要綠色格子（s[i] == s[j]）以及紅色格子（s[i] != s[j]）的結果。\n但問題是，要如何遍歷 i 跟 j？\n如果直接用兩個 for loop 遍歷，綠色格子以及下方的紅色格子還沒有計算過，因此會出問題。\n可以斜著遍歷，從左上到右下，保證在遇到子問題時，子問題都有被計算過。\n上圖的數字是計算的順序。\nint longestPalindromeSubseq(string s) { int n = s.size(); vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; dp(n, vector\u0026lt;int\u0026gt; (n, 0)); for (int i = 0; i \u0026lt; n; i++){ dp[i][i] = 1; } for (int space = 1; space \u0026lt; n; space++){ for (int i = 0; i + space \u0026lt; n; i++){ if (s[i] == s[i + space]){ dp[i][i + space] = 2 + dp[i + 1][i + space - 1]; } else { dp[i][i + space] = max(dp[i + 1][i + space], dp[i][i + space - 1]); } } } return dp[0][n - 1]; } time complexity: $O( n^2 )$\nspace complextiy: $O( n^2 )$\n解法三 解法二是斜著遍歷，事實上我們也可以從最後一列往回遍歷。\n上圖的數字是計算的順序。\nint longestPalindromeSubseq(string s) { int n = s.size(); vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; dp(n, vector\u0026lt;int\u0026gt; (n, 0)); for (int i = n - 1; i \u0026gt;= 0; i--){ dp[i][i] = 1; for (int j = i + 1; j \u0026lt; n; j++){ if (s[i] == s[j]){ dp[i][j] = 2 + dp[i + 1][j - 1]; } else { dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]); } } } return dp[0][n - 1]; } time complexity: $O( n^2 )$\nspace complextiy: $O( n^2 )$\n解法三可以再優化（解法二其實也可以，但是 dp 需要重新定義，比較麻煩），由於計算 dp[i] 這一列時，只會用到 dp[i + 1] 的結果，因此可以改爲：\nint longestPalindromeSubseq(string s) { int n = s.size(); vector\u0026lt;int\u0026gt; dp(n, 0), prev(n, 0); for (int i = n - 1; i \u0026gt;= 0; i--){ dp[i] = 1; for (int j = i + 1; j \u0026lt; n; j++){ if (s[i] == s[j]){ dp[j] = 2 + prev[j - 1]; } else { dp[j] = max(dp[j - 1], prev[j]); } } swap(dp, prev); } return prev[n - 1]; } time complexity: $O( n^2 )$\nspace complextiy: $O( n )$\n","permalink":"http://localhost:1313/blog/leetcode/516.longest-palindromic-subsequence/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/longest-palindromic-subsequence/\"\u003ehttps://leetcode.com/problems/longest-palindromic-subsequence/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e這題是很有趣的 dp 問題，題目不難，但是有很多不同的解法。不同的解法也考驗著你對 dp 收悉的程度。\u003c/p\u003e\n\u003ch2 id=\"解法一\"\u003e解法一\u003c/h2\u003e\n\u003cp\u003e解法一其實有點偷吃步，把問題轉化爲較收悉的問題再處理。\u003c/p\u003e\n\u003cp\u003e對於 string s，我們考慮 s_reverse，也就是 s 反過來之後的結果。\u003cbr\u003e\n例如 \u003ccode\u003es = \u0026quot;abcde\u0026quot;\u003c/code\u003e，那麼 \u003ccode\u003es_reverse = \u0026quot;edcba\u0026quot;\u003c/code\u003e。\u003cbr\u003e\n問題就變成了找 s 跟 reverse_s 的 longest common subsequence。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003elongestPalindromeSubseq\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003es_reverse\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ereverse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003edp\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003es_reverse\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003edp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003edp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003edp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003edp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003edp\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003etime complexity:\u003c/strong\u003e  $O( n^2 )$\u003cbr\u003e\n\u003cstrong\u003espace complextiy:\u003c/strong\u003e $O( n^2 )$\u003c/p\u003e\n\u003ch2 id=\"解法二\"\u003e解法二\u003c/h2\u003e\n\u003cp\u003e定義 \u003ccode\u003edp[i][j]\u003c/code\u003e 爲 \u003ccode\u003es[i, ..., j]\u003c/code\u003e 中最長的迴文子序列。\u003c/p\u003e\n\u003cp\u003e對於 \u003ccode\u003edp[i][j]\u003c/code\u003e，\u003cbr\u003e\n若 \u003ccode\u003es[i] == s[j]\u003c/code\u003e，那麼最長迴文子序列就是 \u003ccode\u003edp[i + 1][j - 1] + 2\u003c/code\u003e。\u003cbr\u003e\n例如：\u003ccode\u003es[i: j] = \u0026quot;bbbab\u0026quot;\u003c/code\u003e，問題就被轉化爲找出 \u003ccode\u003es[i + 1: j - 1] = \u0026quot;bba\u0026quot;\u003c/code\u003e 並且 +2，這個 +2 來自於我們選取 \u003ccode\u003es[i]\u003c/code\u003e 跟 \u003ccode\u003es[j]\u003c/code\u003e。\u003cbr\u003e\n若 \u003ccode\u003es[i] != s[j]\u003c/code\u003e，那麼最長迴文子序列就是 \u003ccode\u003emax(dp[i + 1][j], dp[i][j - 1])\u003c/code\u003e。\u003cbr\u003e\n例如：\u003ccode\u003es[i: j] = \u0026quot;bbbabc\u0026quot;\u003c/code\u003e，問題就被轉化爲找出 \u003ccode\u003es[i + 1: j] = \u0026quot;bbabc\u0026quot;\u003c/code\u003e以及 \u003ccode\u003es[i: j - 1] = \u0026quot;bbbab\u003c/code\u003e 中較長的一個。\u003c/p\u003e","title":"516.Longest Palindromic Subsequence"},{"content":"https://leetcode.com/problems/maximum-value-of-k-coins-from-piles/\n這題是稍微複雜一點的 dynamic programming 的問題。\n定義 dp[i][j] 爲 「在前 i 堆裡面選 j 次中最多硬幣的數量」。\n對於 dp[i][j] ，\n若是我在第 i 堆選 0 次，那麼我得到的硬幣數量是 dp[i - 1][j]\n若是我在第 i 堆選 1 次，那麼我得到的硬幣數量是 dp[i - 1][j - 1] + piles[i][0]\n若是我在第 i 堆選 2 次，那麼我得到的硬幣數量是 dp[i - 1][j - 2] + piles[i][0] + piles[i][1]\n\u0026hellip;\n若是我在第 i 堆選 k 次，那麼我得到的硬幣數量是 dp[i - 1][j - k] + piles[i][0] + piles[i][1] + ... + piles[i][k]\n\u0026hellip;\n若是我在第 i 堆選 j 次，那麼我得到的硬幣數量是 dp[i - 1][0] + piles[i][0] + piles[i][1] + ... + piles[i][j]\n但是這邊要注意 k \u0026lt;= min(piles[i].size(), j)，因爲第 i 堆最多只能選 piles[i].size() 那麼多次。\n也就是說 dp[i][j] = max(dp[i - 1][j - k] + (piles[i][k])) for k = 0 to min(piles[i].size(), j)。\n那接下來就直接跑過 i, j 然後把上面的關係式套進去就好了。\nint maxValueOfCoins(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; piles, int K) { int n = piles.size(); vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; dp(n + 1, vector\u0026lt;int\u0026gt; (K + 1, 0)); for (int i = 1; i \u0026lt;= n; i++){ int size = piles[i - 1].size(); // 第 i 堆對應的 index 是 i - 1 int prefix = 0; for (int j = 1; j \u0026lt;= K; j++){ int prefix = 0; dp[i][j] = dp[i - 1][j]; for (int k = 1; k \u0026lt;= size \u0026amp;\u0026amp; k \u0026lt;= j; k++){ prefix += piles[i - 1][k - 1]; dp[i][j] = max(dp[i][j], prefix + dp[i - 1][j - k]); } } } return dp[n][K]; } 一樣也可以寫成 top down 的做法：\nint maxValueOfCoins(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; piles, int K) { int n = piles.size(); vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; memo(n + 1, vector\u0026lt;int\u0026gt; (K + 1, 0)); return dp(memo, piles, n, K); } int dp(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; \u0026amp;memo, vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; piles, int i, int j){ if (i == 0 || j == 0){ return 0; } if (memo[i][j] \u0026gt; 0){ return memo[i][j]; } int best = dp(memo, piles, i - 1, j); int prefix = 0; int size = piles[i - 1].size(); for (int k = 1; k \u0026lt;= j \u0026amp;\u0026amp; k \u0026lt;= size; k++){ prefix += piles[i - 1][k - 1]; best = max(best, dp(memo, piles, i - 1, j - k) + prefix); } memo[i][j] = best; return best; } time complexity: O( K * m ) where m = sum(piles[i].size())\n當計算 dp[i][j] 時，for loop 要跑 piles[i - 1].size() 次，所以計算 dp[1][j] 到 dp[n][j] 要跑 sum(piles[i].size()) 次。而 j 要從 1 跑到 K，所以總共要跑 K * sum(piles[i].size()) 次。\nspace complextiy: O( n * K )\n","permalink":"http://localhost:1313/blog/leetcode/2218.maximum-value-of-k-coins-from-piles/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/maximum-value-of-k-coins-from-piles/\"\u003ehttps://leetcode.com/problems/maximum-value-of-k-coins-from-piles/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e這題是稍微複雜一點的 dynamic programming 的問題。\u003c/p\u003e\n\u003cp\u003e定義 \u003ccode\u003edp[i][j]\u003c/code\u003e  爲 「在前 i 堆裡面選 j 次中最多硬幣的數量」。\u003c/p\u003e\n\u003cp\u003e對於 \u003ccode\u003edp[i][j]\u003c/code\u003e ，\u003cbr\u003e\n若是我在第 i 堆選 0 次，那麼我得到的硬幣數量是 \u003ccode\u003edp[i - 1][j]\u003c/code\u003e\u003cbr\u003e\n若是我在第 i 堆選 1 次，那麼我得到的硬幣數量是 \u003ccode\u003edp[i - 1][j - 1] + piles[i][0]\u003c/code\u003e\u003cbr\u003e\n若是我在第 i 堆選 2 次，那麼我得到的硬幣數量是 \u003ccode\u003edp[i - 1][j - 2] + piles[i][0] + piles[i][1]\u003c/code\u003e\u003cbr\u003e\n\u0026hellip;\u003cbr\u003e\n若是我在第 i 堆選 k 次，那麼我得到的硬幣數量是 \u003ccode\u003edp[i - 1][j - k] + piles[i][0] + piles[i][1] + ... + piles[i][k]\u003c/code\u003e\u003cbr\u003e\n\u0026hellip;\u003cbr\u003e\n若是我在第 i 堆選 j 次，那麼我得到的硬幣數量是 \u003ccode\u003edp[i - 1][0] + piles[i][0] + piles[i][1] + ... + piles[i][j]\u003c/code\u003e\u003c/p\u003e","title":"2218.Maximum Value of K Coins From Piles"},{"content":"今天在打 code 的時候遇到一個問題：\n我想要遍歷 set 的同時，把符合條件的元素刪掉。\n假設我想要刪除 set 中所有小於 10 的元素。一開始我寫出這樣的東西，\nset\u0026lt;int\u0026gt; new_set = {1, 3, 4, 6, 7, 10, 15}; for (auto it = new_set.begin(); it != new_set.end() \u0026amp;\u0026amp; it* \u0026lt; 10; it++){ new_set.erase(it); } 跑了之後發現雖然沒有報錯，但是 set 似乎沒有變成我預想的樣子。\n簡單來說當 erase(it) 跑完之後， it 就不見了。it++ 的時候會有無法預期的錯誤。\n上網找了一下1，發現了有人跟我一樣遇到一樣的問題。\n一開始看到了這個2解決的辦法：\nset\u0026lt;int\u0026gt; new_set = {1, 3, 4, 6, 7, 10, 15}; // C++03 for (auto it = new_set.begin(); it != new_set.end() \u0026amp;\u0026amp; it* \u0026lt; 10;){ new_set.erase(it++); } 我就很納悶，new_set.erase(it++) 跟 new_set.erase(it), it++ 這樣不是一樣的效果嗎？\n繼續查下去發現 3 這段話，\ni is incremented before calling erase, and the previous value is passed to the function. A function\u0026rsquo;s arguments have to be fully evaluated before the function is called.\n對於一個 function f(int i)， f(i++) 做的其實是先 i = i + 1，但是進到 f 的時候會傳入原本的 i，也就是 +1 之前的 i。\n這就是上面 new_set.erase(it++) 會對的原因。\n當然 C++ 有提供比較好的工具。C++11之後， erase 事實上會回傳下一個 iterator，所以可以改成這樣：\nset\u0026lt;int\u0026gt; new_set = {1, 3, 4, 6, 7, 10, 15}; // C++11 for (auto it = new_set.begin(); it != new_set.end() \u0026amp;\u0026amp; it* \u0026lt; 10;){ it = new_set.erase(it); } 或是更一般的寫法：\nfor (auto it = new_set.begin(); it != new_set.end();){ if (it satisfies some condition){ it = new_set.erase(it); } else { it++; } } https://stackoverflow.com/questions/2874441/deleting-elements-from-stdset-while-iterating\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://stackoverflow.com/questions/263945/what-happens-if-you-call-erase-on-a-map-element-while-iterating-from-begin-to/263958#263958\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://stackoverflow.com/questions/596162/can-you-remove-elements-from-a-stdlist-while-iterating-through-it\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"http://localhost:1313/blog/posts/c++-set-erase/","summary":"\u003cp\u003e今天在打 code 的時候遇到一個問題：\u003cbr\u003e\n我想要遍歷 set 的同時，把符合條件的元素刪掉。\u003c/p\u003e\n\u003cp\u003e假設我想要刪除 set 中所有小於 10 的元素。一開始我寫出這樣的東西，\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eset\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003enew_set\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003eit\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enew_set\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"n\"\u003eit\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003enew_set\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003enew_set\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eerase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e跑了之後發現雖然沒有報錯，但是 set 似乎沒有變成我預想的樣子。\u003cbr\u003e\n簡單來說當 \u003ccode\u003eerase(it)\u003c/code\u003e 跑完之後， \u003ccode\u003eit\u003c/code\u003e 就不見了。\u003ccode\u003eit++\u003c/code\u003e 的時候會有無法預期的錯誤。\u003c/p\u003e\n\u003cp\u003e上網找了一下\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e1\u003c/a\u003e\u003c/sup\u003e，發現了有人跟我一樣遇到一樣的問題。\u003cbr\u003e\n一開始看到了這個\u003csup id=\"fnref:2\"\u003e\u003ca href=\"#fn:2\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e2\u003c/a\u003e\u003c/sup\u003e解決的辦法：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eset\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003enew_set\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// C++03\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003eit\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enew_set\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"n\"\u003eit\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003enew_set\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e;){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003enew_set\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eerase\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e我就很納悶，\u003ccode\u003enew_set.erase(it++)\u003c/code\u003e 跟 \u003ccode\u003enew_set.erase(it), it++\u003c/code\u003e 這樣不是一樣的效果嗎？\u003c/p\u003e\n\u003cp\u003e繼續查下去發現 \u003csup id=\"fnref:3\"\u003e\u003ca href=\"#fn:3\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e3\u003c/a\u003e\u003c/sup\u003e 這段話，\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003ei is incremented before calling erase, and the previous value is passed to the function. A function\u0026rsquo;s arguments have to be fully evaluated before the function is called.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e對於一個 function \u003ccode\u003ef(int i)\u003c/code\u003e， \u003ccode\u003ef(i++)\u003c/code\u003e 做的其實是先 \u003ccode\u003ei = i + 1\u003c/code\u003e，但是進到 \u003ccode\u003ef\u003c/code\u003e 的時候會傳入原本的 \u003ccode\u003ei\u003c/code\u003e，也就是 +1 之前的 \u003ccode\u003ei\u003c/code\u003e。\u003cbr\u003e\n這就是上面 \u003ccode\u003enew_set.erase(it++)\u003c/code\u003e 會對的原因。\u003c/p\u003e","title":"C++ 中遍歷 set 的同時刪除元素"},{"content":"Leetcode 連結\n解法一 首先我們需要找出小於 1000 的所有質數，我們可以使用 Sieve of Eratosthenes 來快速找出這些質數。\nvector\u0026lt;int\u0026gt; Sieve(){ vector\u0026lt;bool\u0026gt; p(1001, true); p[0] = p[1] = false; for (int i = 2; i * i \u0026lt;= 1000; i++){ if (p[i]){ for (int j = i * i; j \u0026lt;= 1000; j += i){ p[j] = false; } } } vector\u0026lt;int\u0026gt; primes; for (int i = 0; i \u0026lt;= 1000; i++){ if (p[i]){ primes.push_back(i); } } return primes; // primes 是小於1000的所有質數所成的陣列 } 接下來我們想要讓 nums 變成嚴格遞增的陣列。\n若是我們從前面處理到後面，想要讓陣列變成嚴格遞增的，在處理 nums[i] 時，nums[i] 能變得越小越好，同時不能小於等於 nums[i - 1]。\n也就是說我們想要找到最大的質數使得 nums[i] - prime \u0026gt; nums[i - 1]，移項後發現這個質數要滿足 prime \u0026lt; nums[i] - nums[i - 1]，我們可以使用 binary search 快速找到這樣的質數。\nbool primeSubOperation(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int n = nums.size(); for (int i = 0; i \u0026lt; n; i++){ // 利用 binary search 找到第一個大於等於 nums[i] - nums[i - 1] 的質數 // 他的前一個就會是小於 nums[i] - nums[i - 1] 的質數 auto it = lower_bound(primes.begin(), primes.end(), i == 0? nums[i]: nums[i] - nums[i - 1]); if (it != primes.begin()){ nums[i] -= *prev(it); } // 做完操作後若是發現不滿足 nums[i - 1] \u0026lt; nums[i]，回傳 false if (i \u0026gt; 0 \u0026amp;\u0026amp; nums[i] \u0026lt;= nums[i - 1]){ return false; } } return true; } 解法二 若是我們從後面處理到前面，那就要反過來處理。在處理 nums[i] 時，nums[i] 在扣除質數後能越大越好，同時不能大於等於 nums[i + 1]。\n也就是說我們想要找到最小的質數使得 nums[i] - prime \u0026lt; nums[i + 1]，移項後發現這個質數要滿足 prime \u0026gt; nums[i] - nums[i + 1]。\nbool primeSubOperation(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int n = nums.size(); // 注意現在是後面處理到前面 for (int i = n - 2; i \u0026gt;= 0; i--){ // nums[i] \u0026lt; nums[i + 1]，什麼都不用做 if (nums[i] \u0026lt; nums[i + 1]){ continue; } // 利用 binary search 找到第一個大於 nums[i] - nums[i + 1] 的質數 auto it = upper_bound(primes.begin(), primes.end(), nums[i] - nums[i + 1]); // 找到的prime要小於原本的數 if (it != primes.end() \u0026amp;\u0026amp; *it \u0026lt; nums[i]){ nums[i] -= *it; } // 做完操作後若是發現不滿足 nums[i] \u0026lt; nums[i + 1]，回傳 false if (nums[i] \u0026gt;= nums[i + 1]){ return false; } } return true; } 這題有很多特殊的情況要考慮： it 會不會是 prime.begin() 或是 prime.end()，找到的質數會不會大於原本的數。\n當初在打週賽的時候處理很久，最後直接遍歷所有的質數（不使用 binary search）發現也會過，不過還是把好的解法寫一遍，多練習一下。\n","permalink":"http://localhost:1313/blog/leetcode/2601.prime-subtraction-operation/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/prime-subtraction-operation/\"\u003eLeetcode 連結\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"解法一\"\u003e解法一\u003c/h3\u003e\n\u003cp\u003e首先我們需要找出小於 1000 的所有質數，我們可以使用 Sieve of Eratosthenes 來快速找出這些質數。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eSieve\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1001\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1000\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1000\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eprimes\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1000\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eprimes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epush_back\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eprimes\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// primes 是小於1000的所有質數所成的陣列\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e接下來我們想要讓 \u003ccode\u003enums\u003c/code\u003e 變成嚴格遞增的陣列。\u003c/p\u003e\n\u003cp\u003e若是我們從前面處理到後面，想要讓陣列變成嚴格遞增的，在處理 \u003ccode\u003enums[i]\u003c/code\u003e 時，\u003ccode\u003enums[i]\u003c/code\u003e 能變得越小越好，同時不能小於等於 \u003ccode\u003enums[i - 1]\u003c/code\u003e。\u003cbr\u003e\n也就是說我們想要找到最大的質數使得 \u003ccode\u003enums[i] - prime \u0026gt; nums[i - 1]\u003c/code\u003e，移項後發現這個質數要滿足 \u003ccode\u003eprime \u0026lt; nums[i] - nums[i - 1]\u003c/code\u003e，我們可以使用 binary search 快速找到這樣的質數。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"nf\"\u003eprimeSubOperation\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e// 利用 binary search 找到第一個大於等於 nums[i] - nums[i - 1] 的質數\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"c1\"\u003e// 他的前一個就會是小於 nums[i] - nums[i - 1] 的質數\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003eit\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elower_bound\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eprimes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003eprimes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eit\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eprimes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e()){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e-=\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eprev\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eit\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e// 做完操作後若是發現不滿足 nums[i - 1] \u0026lt; nums[i]，回傳 false\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"解法二\"\u003e解法二\u003c/h3\u003e\n\u003cp\u003e若是我們從後面處理到前面，那就要反過來處理。在處理 \u003ccode\u003enums[i]\u003c/code\u003e 時，\u003ccode\u003enums[i]\u003c/code\u003e 在扣除質數後能越大越好，同時不能大於等於 \u003ccode\u003enums[i + 1]\u003c/code\u003e。\u003cbr\u003e\n也就是說我們想要找到最小的質數使得 \u003ccode\u003enums[i] - prime \u0026lt; nums[i + 1]\u003c/code\u003e，移項後發現這個質數要滿足 \u003ccode\u003eprime \u0026gt; nums[i] - nums[i + 1]\u003c/code\u003e。\u003c/p\u003e","title":"2601. Prime Subtraction Operation"},{"content":"Leetcode 連結\n解法一 這題最簡單的方法就是用兩個 for loop 來遍歷所有的組合。當找到兩個數字相加等於 target 的時候就回傳兩個數字的 index。\nvector\u0026lt;int\u0026gt; twoSum(vector\u0026lt;int\u0026gt;\u0026amp; nums, int target) { int n = nums.size(); for (int i = 0; i \u0026lt; n; i++){ for (int j = i + 1; j \u0026lt; n; j++){ if (nums[i] + nums[j] == target){ return {i, j}; } } } return {-1, -1}; // didn\u0026#39;t find any pair } time complexity: O(n^2)\nspace complextiy: O(1)\n解法二 試想一下，當我們在 nums[i] 的時候，我們想要找的是什麼？\n其實我們想知道在 nums[i] 之前， target - nums[i] 這個數字有在沒有出現過，而且出現過的話要能立刻知道這個數字的 index。\n我們可以利用 hash map ，key = i, value = nums[i] 來存取數字跟 index 的關係。\n也就是說，當我們在 nums[i] 的時候，我們去 hash map 裡面看說 target - nums[i] 有沒有出現過。出現過的話，那代表我們找到這樣的 pair，回傳這個組合的 index 即可。\n這邊要注意的是，要先找 target - nums[i] 是否出現過，再把 mp[nums[i]] = i 加入 hash map 中，避免重複使用同一個數字。\n例如 nums = [1, 1], target = 2，如果先把 key value pair {1, 0} 加入，則會直接回傳 {0, 0}，得到錯誤的解答。\nvector\u0026lt;int\u0026gt; twoSum(vector\u0026lt;int\u0026gt;\u0026amp; nums, int target) { int n = nums.size(); unordered_map\u0026lt;int, int\u0026gt; mp; for (int i = 0; i \u0026lt; n; i++){ if (mp.find(target - nums[i]) != mp.end()){ return {mp[target - nums[i]], i}; } mp[nums[i]] = i; } return {-1, -1}; // didn\u0026#39;t find any pair } time complexity: O(n)\nspace complextiy: O(n)\n","permalink":"http://localhost:1313/blog/leetcode/1.two-sum/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/two-sum/\"\u003eLeetcode 連結\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"解法一\"\u003e解法一\u003c/h3\u003e\n\u003cp\u003e這題最簡單的方法就是用兩個 for loop 來遍歷所有的組合。當找到兩個數字相加等於 \u003ccode\u003etarget\u003c/code\u003e 的時候就回傳兩個數字的 index。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003etwoSum\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evector\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e \u003cspan class=\"c1\"\u003e// didn\u0026#39;t find any pair\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003etime complexity:\u003c/strong\u003e O(n^2)\u003cbr\u003e\n\u003cstrong\u003espace complextiy:\u003c/strong\u003e O(1)\u003c/p\u003e\n\u003ch3 id=\"解法二\"\u003e解法二\u003c/h3\u003e\n\u003cp\u003e試想一下，當我們在 \u003ccode\u003enums[i]\u003c/code\u003e 的時候，我們想要找的是什麼？\u003cbr\u003e\n其實我們想知道在 \u003ccode\u003enums[i]\u003c/code\u003e 之前， \u003ccode\u003etarget - nums[i]\u003c/code\u003e 這個數字有在沒有出現過，而且出現過的話要能立刻知道這個數字的 index。\u003c/p\u003e\n\u003cp\u003e我們可以利用 hash map ，\u003ccode\u003ekey = i, value = nums[i]\u003c/code\u003e 來存取數字跟 index 的關係。\u003cbr\u003e\n也就是說，當我們在 \u003ccode\u003enums[i]\u003c/code\u003e 的時候，我們去 hash map 裡面看說 \u003ccode\u003etarget - nums[i]\u003c/code\u003e 有沒有出現過。出現過的話，那代表我們找到這樣的 pair，回傳這個組合的 index 即可。\u003c/p\u003e\n\u003cp\u003e這邊要注意的是，要先找 \u003ccode\u003etarget - nums[i]\u003c/code\u003e 是否出現過，再把 \u003ccode\u003emp[nums[i]] = i\u003c/code\u003e 加入 hash map 中，避免重複使用同一個數字。\u003cbr\u003e\n例如 \u003ccode\u003enums = [1, 1], target = 2\u003c/code\u003e，如果先把 key value pair \u003ccode\u003e{1, 0}\u003c/code\u003e 加入，則會直接回傳 \u003ccode\u003e{0, 0}\u003c/code\u003e，得到錯誤的解答。\u003c/p\u003e","title":"1. Two Sum"},{"content":"This is the leetcode menu.\nBinary Search 1970. Last Day Where You Can Still Cross\nDisjoint Set 1970. Last Day Where You Can Still Cross\nBacktracking 2305. Fair Distribution of Cookies\nBFS 386. Lexicographical Numbers\n2662. Minimum Cost of a Path With Special Roads(未完成)\nStack 946. Validate Stack Sequences\nHash Map 1. Two Sum\nRecursion 87. Scramble String\nGreedy 2601. Prime Subtraction Operation\nDynamic Programming 矩陣型 1639. Number of Ways to Form a Target String Given a Dictionary\n2218. Maximum Value of K Coins From Piles\n2684. Maximum Number of Moves in a Grid\n2719. Count of Integers 2305. Fair Distribution of Cookies\n樹型 2646. Minimize the Total Price of the Trips\nbitmask 1799. Maximize Score After N Operations\n","permalink":"http://localhost:1313/blog/leetcode/","summary":"\u003cp\u003eThis is the leetcode menu.\u003c/p\u003e\n\u003ch2 id=\"binary-search\"\u003eBinary Search\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"http://localhost:1313/blog/leetcode/1970.last-day-where-you-can-still-cross/\"\u003e1970. Last Day Where You Can Still Cross\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"disjoint-set\"\u003eDisjoint Set\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"http://localhost:1313/blog/leetcode/1970.last-day-where-you-can-still-cross/\"\u003e1970. Last Day Where You Can Still Cross\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"backtracking\"\u003eBacktracking\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"http://localhost:1313/blog/leetcode/2305.fair-distribution-of-cookies/\"\u003e2305. Fair Distribution of Cookies\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"bfs\"\u003eBFS\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"http://localhost:1313/blog/leetcode/386.lexicographical-numbers/\"\u003e386. Lexicographical Numbers\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"http://localhost:1313/blog/leetcode/2662.minimum-cost-of-a-path-with-special-roads/\"\u003e2662. Minimum Cost of a Path With Special Roads\u003c/a\u003e(未完成)\u003c/p\u003e\n\u003ch2 id=\"stack\"\u003eStack\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"http://localhost:1313/blog/leetcode/946.validate-stack-sequences/\"\u003e946. Validate Stack Sequences\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"hash-map\"\u003eHash Map\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"http://localhost:1313/blog/leetcode/1.two-sum/\"\u003e1. Two Sum\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"recursion\"\u003eRecursion\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"http://localhost:1313/blog/leetcode/87.scramble-string/\"\u003e87. Scramble String\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"greedy\"\u003eGreedy\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"http://localhost:1313/blog/leetcode/2601.prime-subtraction-operation/\"\u003e2601. Prime Subtraction Operation\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"dynamic-programming\"\u003eDynamic Programming\u003c/h2\u003e\n\u003ch3 id=\"矩陣型\"\u003e矩陣型\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"http://localhost:1313/blog/leetcode/1639.number-of-ways-to-form-a-target-string-given-a-dictionary/\"\u003e1639. Number of Ways to Form a Target String Given a Dictionary\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"http://localhost:1313/blog/leetcode/2218.maximum-value-of-k-coins-from-piles/\"\u003e2218. Maximum Value of K Coins From Piles\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"http://localhost:1313/blog/leetcode/2684.maximum-number-of-moves-in-a-grid/\"\u003e2684. Maximum Number of Moves in a Grid\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"http://localhost:1313/blog/leetcode/2719.count-of-integers/\"\u003e2719. Count of Integers\u003c/a\u003e\n\u003ca href=\"http://localhost:1313/blog/leetcode/2305.fair-distribution-of-cookies/\"\u003e2305. Fair Distribution of Cookies\u003c/a\u003e\u003c/p\u003e","title":"Leetcode Menu"},{"content":"string1.h\n// string1.h -- fixed and augmented string class definition #ifndef STRING1_H_ #define STRING1_H_ #include \u0026lt;iostream\u0026gt; using std::ostream; using std::istream; class String { private: char * str; // pointer to string int len; // length of string static int num_strings; // number of objects static const int CINLIM = 80; // cin input limit public: // constructors and other methods String(const char * s); // constructor String(); // default constructor String(const String \u0026amp;); // copy constructor ~String(); // destructor int length () const { return len; } // overloaded operator methods String \u0026amp; operator=(const String \u0026amp;); String \u0026amp; operator=(const char *); char \u0026amp; operator[](int i); const char \u0026amp; operator[](int i) const; // overloaded operator friends friend bool operator\u0026lt;(const String \u0026amp;st, const String \u0026amp;st2); friend bool operator\u0026gt;(const String \u0026amp;st1, const String \u0026amp;st2); friend bool operator==(const String \u0026amp;st, const String \u0026amp;st2); friend ostream \u0026amp; operator\u0026lt;\u0026lt;(ostream \u0026amp; os, const String \u0026amp; st); friend istream \u0026amp; operator\u0026gt;\u0026gt;(istream \u0026amp; is, String \u0026amp; st); // static function static int HowMany(); }; #endif string1.cpp\n// string1.cpp -- String class methods #include \u0026lt;cstring\u0026gt; // string.h for some #include \u0026#34;string1.h\u0026#34; // includes \u0026lt;iostream\u0026gt; using std::cin; using std::cout; // initializing static class member int String::num_strings = 0; // static method int String::HowMany() { return num_strings; } // class methods String::String(const char * s) // construct String from C string { len = std::strlen(s); // set size str = new char[len + 1]; // allot storage std::strcpy(str, s); // initialize pointer num_strings++; // set object count } String::String() // default constructor { len = 4; str = new char[1]; // to match delete [] str str[0] = \u0026#39;\\0\u0026#39;; // default string num_strings++; } String::String(const String \u0026amp; st) { num_strings++; // handle static member update len = st.len; // same length str = new char [len + 1]; // allot space std::strcpy(str, st.str); // copy string to new location } String::~String() // necessary destructor { --num_strings; // required delete [] str; // required } // overloaded operator methods // assign a String to a String String \u0026amp; String::operator=(const String \u0026amp; st) { if (this == \u0026amp;st) return *this; delete [] str; len = st.len; str = new char[len + 1]; std::strcpy(str, st.str); return *this; } // assign a C string to a String String \u0026amp; String::operator=(const char * s) { delete [] str; len = std::strlen(s); str = new char[len + 1]; std::strcpy(str, s); return *this; } // read-write char access for non-const String char \u0026amp; String::operator[](int i) { return str[i]; } // read-only char access for const String const char \u0026amp; String::operator[](int i) const { return str[i]; } // overloaded operator friends bool operator\u0026lt;(const String \u0026amp;st1, const String \u0026amp;st2) { return (std::strcmp(st1.str, st2.str) \u0026lt; 0); } bool operator\u0026gt;(const String \u0026amp;st1, const String \u0026amp;st2) { return st2 \u0026lt; st1; } bool operator==(const String \u0026amp;st1, const String \u0026amp;st2) { return (std::strcmp(st1.str, st2.str) == 0); } // simple String output ostream \u0026amp; operator\u0026lt;\u0026lt;(ostream \u0026amp; os, const String \u0026amp; st) { os \u0026lt;\u0026lt; st.str; return os; } // quick and dirty String input istream \u0026amp; operator\u0026gt;\u0026gt;(istream \u0026amp; is, String \u0026amp; st) { char temp[String::CINLIM]; is.get(temp, String::CINLIM); if (is) st = temp; while (is \u0026amp;\u0026amp; is.get() != \u0026#39;\\n\u0026#39;) continue; return is; } ","permalink":"http://localhost:1313/blog/code/string/","summary":"\u003cp\u003estring1.h\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// string1.h -- fixed and augmented string class definition\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#ifndef STRING1_H_\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#define STRING1_H_\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eostream\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eistream\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eString\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eprivate\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// pointer to string\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// length of string\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003enum_strings\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// number of objects\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eCINLIM\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e80\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// cin input limit\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003epublic\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// constructors and other methods\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// constructor\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"c1\"\u003e// default constructor\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// copy constructor\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"c1\"\u003e// destructor\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003elength\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// overloaded operator methods\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"p\"\u003e[](\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"p\"\u003e[](\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// overloaded operator friends\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003efriend\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003est\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003est2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efriend\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003est1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003est2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efriend\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003est\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003est2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efriend\u003c/span\u003e \u003cspan class=\"n\"\u003eostream\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eostream\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003est\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efriend\u003c/span\u003e \u003cspan class=\"n\"\u003eistream\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eistream\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eString\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003est\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// static function\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003eHowMany\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003estring1.cpp\u003c/p\u003e","title":"String Class"},{"content":"studenti.h\n// studenti.h -- defining a Student class using private inheritance #ifndef STUDENTC_H_ #define STUDENTC_H_ #include \u0026lt;iostream\u0026gt; #include \u0026lt;valarray\u0026gt; #include \u0026lt;string\u0026gt; class Student : private std::string, private std::valarray\u0026lt;double\u0026gt; { private: typedef std::valarray\u0026lt;double\u0026gt; ArrayDb; // private method for scores output std::ostream \u0026amp; arr_out(std::ostream \u0026amp; os) const; public: Student() : std::string(\u0026#34;Null Student\u0026#34;), ArrayDb() {} explicit Student(const std::string \u0026amp; s) : std::string(s), ArrayDb() {} explicit Student(int n) : std::string(\u0026#34;Nully\u0026#34;), ArrayDb(n) {} Student(const std::string \u0026amp; s, int n) : std::string(s), ArrayDb(n) {} Student(const std::string \u0026amp; s, const ArrayDb \u0026amp; a) : std::string(s), ArrayDb(a) {} Student(const char * str, const double * pd, int n) : std::string(str), ArrayDb(pd, n) {} ~Student() {} double Average() const; double \u0026amp; operator[](int i); double operator[](int i) const; const std::string \u0026amp; Name() const; // friends // input friend std::istream \u0026amp; operator\u0026gt;\u0026gt;(std::istream \u0026amp; is, Student \u0026amp; stu); // 1 word friend std::istream \u0026amp; getline(std::istream \u0026amp; is, Student \u0026amp; stu); // 1 line // output friend std::ostream \u0026amp; operator\u0026lt;\u0026lt;(std::ostream \u0026amp; os, const Student \u0026amp; stu); }; #endif studenti.cpp\n// studenti.cpp -- Student class using private inheritance #include \u0026#34;studenti.h\u0026#34; using std::ostream; using std::endl; using std::istream; using std::string; // public methods double Student::Average() const { if (ArrayDb::size() \u0026gt; 0) return ArrayDb::sum()/ArrayDb::size(); else return 0; } const string \u0026amp; Student::Name() const { return (const string \u0026amp;) *this; } double \u0026amp; Student::operator[](int i) { return ArrayDb::operator[](i); // use ArrayDb::operator[]() } double Student::operator[](int i) const { return ArrayDb::operator[](i); } // private method ostream \u0026amp; Student::arr_out(ostream \u0026amp; os) const { int i; int lim = ArrayDb::size(); if (lim \u0026gt; 0) { for (i = 0; i \u0026lt; lim; i++) { os \u0026lt;\u0026lt; ArrayDb::operator[](i) \u0026lt;\u0026lt; \u0026#34; \u0026#34;; if (i % 5 == 4) os \u0026lt;\u0026lt; endl; } if (i % 5 != 0) os \u0026lt;\u0026lt; endl; } else os \u0026lt;\u0026lt; \u0026#34; empty array \u0026#34;; return os; } // friends // use String version of operator\u0026gt;\u0026gt;() istream \u0026amp; operator\u0026gt;\u0026gt;(istream \u0026amp; is, Student \u0026amp; stu) { is \u0026gt;\u0026gt; (string \u0026amp;)stu; return is; } // use string friend getline(ostream \u0026amp;, const string \u0026amp;) istream \u0026amp; getline(istream \u0026amp; is, Student \u0026amp; stu) { getline(is, (string \u0026amp;)stu); return is; } // use string version of operator\u0026lt;\u0026lt;() ostream \u0026amp; operator\u0026lt;\u0026lt;(ostream \u0026amp; os, const Student \u0026amp; stu) { os \u0026lt;\u0026lt; \u0026#34;Scores for \u0026#34; \u0026lt;\u0026lt; (const string \u0026amp;) stu \u0026lt;\u0026lt; \u0026#34;:\\n\u0026#34;; stu.arr_out(os); // use private method for scores return os; } ","permalink":"http://localhost:1313/blog/code/c++_primer_plus_studenti/","summary":"\u003cp\u003estudenti.h\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// studenti.h -- defining a Student class using private inheritance\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#ifndef STUDENTC_H_\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#define STUDENTC_H_\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;valarray\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;string\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eStudent\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"k\"\u003eprivate\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003eprivate\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003evalarray\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003edouble\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eprivate\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003evalarray\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003edouble\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eArrayDb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// private method for scores output\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eostream\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003earr_out\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eostream\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003epublic\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eStudent\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Null Student\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eArrayDb\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eexplicit\u003c/span\u003e \u003cspan class=\"nf\"\u003eStudent\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eArrayDb\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eexplicit\u003c/span\u003e \u003cspan class=\"nf\"\u003eStudent\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Nully\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eArrayDb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eStudent\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eArrayDb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eStudent\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eArrayDb\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eArrayDb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eStudent\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003epd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eArrayDb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"n\"\u003eStudent\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"nf\"\u003eAverage\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"p\"\u003e[](\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"p\"\u003e[](\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eName\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// friends\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// input\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003efriend\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eistream\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eistream\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eStudent\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003estu\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 1 word\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003efriend\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eistream\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003egetline\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eistream\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eStudent\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003estu\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 1 line\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// output\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003efriend\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eostream\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eostream\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eStudent\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003estu\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003estudenti.cpp\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// studenti.cpp -- Student class using private inheritance\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026#34;studenti.h\u0026#34;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eostream\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eistream\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// public methods\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003eStudent\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eAverage\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eArrayDb\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eArrayDb\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003eArrayDb\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eStudent\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eName\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eStudent\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"p\"\u003e[](\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eArrayDb\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"p\"\u003e[](\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// use ArrayDb::operator[]()\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003eStudent\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"p\"\u003e[](\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eArrayDb\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"p\"\u003e[](\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// private method\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eostream\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eStudent\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003earr_out\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eostream\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003elim\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eArrayDb\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elim\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003elim\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eos\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eArrayDb\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"p\"\u003e[](\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003eos\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eos\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eos\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34; empty array \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// friends\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// use String version of operator\u0026gt;\u0026gt;()\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eistream\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eistream\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eStudent\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003estu\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eis\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003estu\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eis\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// use string friend getline(ostream \u0026amp;, const string \u0026amp;)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eistream\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003egetline\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eistream\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eStudent\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003estu\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003egetline\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eis\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003estu\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eis\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// use string version of operator\u0026lt;\u0026lt;()\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eostream\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eostream\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eStudent\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003estu\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eos\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Scores for \u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003estu\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;:\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estu\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003earr_out\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// use private method for scores\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"Student Class"},{"content":"// vect.h -- Vector class with \u0026lt;\u0026lt;, mode state #ifndef VECTOR_H_ #define VECTOR_H_ #include \u0026lt;iostream\u0026gt; namespace VECTOR { class Vector { public: enum Mode {RECT, POL}; // RECT for rectangular, POL for Polar modes private: double x; // horizontal value double y; // vertical value double mag; // length of vector double ang; // direction of vector in degrees Mode mode; // RECT or POL // private methods for setting values void set_mag(); void set_ang(); void set_x(); void set_y(); public: Vector(); Vector(double n1, double n2, Mode form = RECT); void reset(double n1, double n2, Mode form = RECT); ~Vector(); double xval() const {return x;} // report x value double yval() const {return y;} // report y value double magval() const {return mag;} // report magnitude double angval() const {return ang;} // report angle void polar_mode(); // set mode to POL void rect_mode(); // set mode to RECT // operator overloading Vector operator+(const Vector \u0026amp; b) const; Vector operator-(const Vector \u0026amp; b) const; Vector operator-() const; Vector operator*(double n) const; // friends friend Vector operator*(double n, const Vector \u0026amp; a); friend std::ostream \u0026amp; operator\u0026lt;\u0026lt;(std::ostream \u0026amp; os, const Vector \u0026amp; v); }; } // end namespace VECTOR #endif // vect.cpp -- methods for the Vector class #include \u0026lt;cmath\u0026gt; #include \u0026#34;vect.h\u0026#34; // includes \u0026lt;iostream\u0026gt; using std::sqrt; using std::sin; using std::cos; using std::atan; using std::atan2; using std::cout; namespace VECTOR { // compute degrees in one radian const double Rad_to_deg = 45.0 / atan(1.0); // should be about 57.2957795130823 // private methods // calculates magnitude from x and y void Vector::set_mag() { mag = sqrt(x * x + y * y); } void Vector::set_ang() { if (x == 0.0 \u0026amp;\u0026amp; y == 0.0) ang = 0.0; else ang = atan2(y, x); } // set x from polar coordinate void Vector::set_x() { x = mag * cos(ang); } // set y from polar coordinate void Vector::set_y() { y = mag * sin(ang); } // public methods Vector::Vector() // default constructor { x = y = mag = ang = 0.0; mode = RECT; } // construct vector from rectangular coordinates if form is r // (the default) or else from polar coordinates if form is p Vector::Vector(double n1, double n2, Mode form) { mode = form; if (form == RECT) { x = n1; y = n2; set_mag(); set_ang(); } else if (form == POL) { mag = n1; ang = n2 / Rad_to_deg; set_x(); set_y(); } else { cout \u0026lt;\u0026lt; \u0026#34;Incorrect 3rd argument to Vector() -- \u0026#34;; cout \u0026lt;\u0026lt; \u0026#34;vector set to 0\\n\u0026#34;; x = y = mag = ang = 0.0; mode = RECT; } } // reset vector from rectangular coordinates if form is // RECT (the default) or else from polar coordinates if // form is POL void Vector:: reset(double n1, double n2, Mode form) { mode = form; if (form == RECT) { x = n1; y = n2; set_mag(); set_ang(); } else if (form == POL) { mag = n1; ang = n2 / Rad_to_deg; set_x(); set_y(); } else { cout \u0026lt;\u0026lt; \u0026#34;Incorrect 3rd argument to Vector() -- \u0026#34;; cout \u0026lt;\u0026lt; \u0026#34;vector set to 0\\n\u0026#34;; x = y = mag = ang = 0.0; mode = RECT; } } Vector::~Vector() // destructor { } void Vector::polar_mode() // set to polar mode { mode = POL; } void Vector::rect_mode() // set to rectangular mode { mode = RECT; } // operator overloading // add two Vectors Vector Vector::operator+(const Vector \u0026amp; b) const { return Vector(x + b.x, y + b.y); } // subtract Vector b from a Vector Vector::operator-(const Vector \u0026amp; b) const { return Vector(x - b.x, y - b.y); } // reverse sign of Vector Vector Vector::operator-() const { return Vector(-x, -y); } // multiply vector by n Vector Vector::operator*(double n) const { return Vector(n * x, n * y); } // friend methods // multiply n by Vector a Vector operator*(double n, const Vector \u0026amp; a) { return a * n; } // display rectangular coordinates if mode is RECT, // else display polar coordinates if mode is POL std::ostream \u0026amp; operator\u0026lt;\u0026lt;(std::ostream \u0026amp; os, const Vector \u0026amp; v) { if (v.mode == Vector::RECT) os \u0026lt;\u0026lt; \u0026#34;(x,y) = (\u0026#34; \u0026lt;\u0026lt; v.x \u0026lt;\u0026lt; \u0026#34;, \u0026#34; \u0026lt;\u0026lt; v.y \u0026lt;\u0026lt; \u0026#34;)\u0026#34;; else if (v.mode == Vector::POL) { os \u0026lt;\u0026lt; \u0026#34;(m,a) = (\u0026#34; \u0026lt;\u0026lt; v.mag \u0026lt;\u0026lt; \u0026#34;, \u0026#34; \u0026lt;\u0026lt; v.ang * Rad_to_deg \u0026lt;\u0026lt; \u0026#34;)\u0026#34;; } else os \u0026lt;\u0026lt; \u0026#34;Vector object mode is invalid\u0026#34;; return os; } } // end namespace VECTOR ","permalink":"http://localhost:1313/blog/code/vector/","summary":"\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// vect.h -- Vector class with \u0026lt;\u0026lt;, mode state\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#ifndef VECTOR_H_\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#define VECTOR_H_\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003eVECTOR\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eVector\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003epublic\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"nc\"\u003eMode\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eRECT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ePOL\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// RECT for rectangular, POL for Polar modes\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003eprivate\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// horizontal value\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// vertical value\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003emag\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// length of vector\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003eang\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// direction of vector in degrees\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"n\"\u003eMode\u003c/span\u003e \u003cspan class=\"n\"\u003emode\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// RECT or POL\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"c1\"\u003e// private methods for setting values\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eset_mag\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eset_ang\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eset_x\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eset_y\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003epublic\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eVector\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eVector\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003en1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003en2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eMode\u003c/span\u003e \u003cspan class=\"n\"\u003eform\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eRECT\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003ereset\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003en1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003en2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eMode\u003c/span\u003e \u003cspan class=\"n\"\u003eform\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eRECT\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"n\"\u003eVector\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"nf\"\u003exval\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e;}\u003c/span\u003e \u003cspan class=\"c1\"\u003e// report x value\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"nf\"\u003eyval\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e;}\u003c/span\u003e \u003cspan class=\"c1\"\u003e// report y value\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"nf\"\u003emagval\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003emag\u003c/span\u003e\u003cspan class=\"p\"\u003e;}\u003c/span\u003e \u003cspan class=\"c1\"\u003e// report magnitude\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"nf\"\u003eangval\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eang\u003c/span\u003e\u003cspan class=\"p\"\u003e;}\u003c/span\u003e \u003cspan class=\"c1\"\u003e// report angle\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003epolar_mode\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"c1\"\u003e// set mode to POL\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003erect_mode\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"c1\"\u003e// set mode to RECT\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"c1\"\u003e// operator overloading\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"n\"\u003eVector\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eVector\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eVector\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eVector\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eVector\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eVector\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"c1\"\u003e// friends\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e        \u003cspan class=\"k\"\u003efriend\u003c/span\u003e \u003cspan class=\"n\"\u003eVector\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eVector\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003efriend\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eostream\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eostream\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eVector\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"c1\"\u003e// end namespace VECTOR\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// vect.cpp -- methods for the Vector class\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;cmath\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026#34;vect.h\u0026#34;\u003c/span\u003e\u003cspan class=\"cp\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// includes \u0026lt;iostream\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003esqrt\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003esin\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecos\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eatan\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eatan2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003eVECTOR\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// compute degrees in one radian\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003eRad_to_deg\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e45.0\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"n\"\u003eatan\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mf\"\u003e1.0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// should be about 57.2957795130823\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// private methods\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// calculates magnitude from x and y\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eVector\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eset_mag\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003emag\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esqrt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eVector\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eset_ang\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.0\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eang\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eang\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eatan2\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// set x from polar coordinate\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eVector\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eset_x\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emag\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ecos\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eang\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// set y from polar coordinate\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eVector\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eset_y\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emag\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003esin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eang\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// public methods\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eVector\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eVector\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"c1\"\u003e// default constructor\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emag\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eang\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003emode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eRECT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// construct vector from rectangular coordinates if form is r\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// (the default) or else from polar coordinates if form is p\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eVector\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eVector\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003en1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003en2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eMode\u003c/span\u003e \u003cspan class=\"n\"\u003eform\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003emode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eform\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eform\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eRECT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003en1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003en2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eset_mag\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eset_ang\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"nf\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eform\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ePOL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003emag\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003en1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eang\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003en2\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"n\"\u003eRad_to_deg\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eset_x\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eset_y\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Incorrect 3rd argument to Vector() -- \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;vector set to 0\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emag\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eang\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003emode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eRECT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// reset vector from rectangular coordinates if form is\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// RECT (the default) or else from polar coordinates if\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// form is POL\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eVector\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e \u003cspan class=\"n\"\u003ereset\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003en1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003en2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eMode\u003c/span\u003e \u003cspan class=\"n\"\u003eform\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003emode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eform\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eform\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eRECT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003en1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003en2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eset_mag\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eset_ang\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"nf\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eform\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ePOL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003emag\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003en1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eang\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003en2\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"n\"\u003eRad_to_deg\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eset_x\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eset_y\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Incorrect 3rd argument to Vector() -- \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;vector set to 0\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emag\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eang\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003emode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eRECT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eVector\u003c/span\u003e\u003cspan class=\"o\"\u003e::~\u003c/span\u003e\u003cspan class=\"n\"\u003eVector\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"c1\"\u003e// destructor\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eVector\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003epolar_mode\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"c1\"\u003e// set to polar mode\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003emode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePOL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eVector\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003erect_mode\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"c1\"\u003e// set to rectangular mode\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003emode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eRECT\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// operator overloading\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// add two Vectors\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eVector\u003c/span\u003e \u003cspan class=\"n\"\u003eVector\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eVector\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nf\"\u003eVector\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// subtract Vector b from a\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eVector\u003c/span\u003e \u003cspan class=\"n\"\u003eVector\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eVector\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nf\"\u003eVector\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// reverse sign of Vector\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eVector\u003c/span\u003e \u003cspan class=\"n\"\u003eVector\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nf\"\u003eVector\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// multiply vector by n\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eVector\u003c/span\u003e \u003cspan class=\"n\"\u003eVector\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nf\"\u003eVector\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// friend methods\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// multiply n by Vector a\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eVector\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003edouble\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eVector\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// display rectangular coordinates if mode is RECT,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// else display polar coordinates if mode is POL\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eostream\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"k\"\u003eoperator\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eostream\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eVector\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emode\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eVector\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eRECT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eos\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;(x,y) = (\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;, \u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;)\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"nf\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emode\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eVector\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ePOL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eos\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;(m,a) = (\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emag\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;, \u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eang\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eRad_to_deg\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;)\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003eos\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Vector object mode is invalid\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"c1\"\u003e// end namespace VECTOR\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"Vector Class"},{"content":"worker0.h\n// worker0.h -- working classes #ifndef WORKER0_H_ #define WORKER0_H_ #include \u0026lt;string\u0026gt; class Worker // an abstract base class { private: std::string fullname; long id; public: Worker() : fullname(\u0026#34;no one\u0026#34;), id(0L) {} Worker(const std::string \u0026amp; s, long n) : fullname(s), id(n) {} virtual ~Worker() = 0; // pure virtual destructor virtual void Set(); virtual void Show() const; }; class Waiter : public Worker { private: int panache; public: Waiter() : Worker(), panache(0) {} Waiter(const std::string \u0026amp; s, long n, int p = 0) : Worker(s, n), panache(p) {} Waiter(const Worker \u0026amp; wk, int p = 0) : Worker(wk), panache(p) {} void Set(); void Show() const; }; class Singer : public Worker { protected: enum {other, alto, contralto, soprano, bass, baritone, tenor}; enum {Vtypes = 7}; private: static char *pv[Vtypes]; // string equivs of voice types int voice; public: Singer() : Worker(), voice(other) {} Singer(const std::string \u0026amp; s, long n, int v = other) : Worker(s, n), voice(v) {} Singer(const Worker \u0026amp; wk, int v = other) : Worker(wk), voice(v) {} void Set(); void Show() const; }; #endif worker0.cpp\n// worker0.cpp -- working class methods #include \u0026#34;worker0.h\u0026#34; #include \u0026lt;iostream\u0026gt; using std::cout; using std::cin; using std::endl; // Worker methods // must implement virtual destructor, even if pure Worker::~Worker() {} void Worker::Set() { cout \u0026lt;\u0026lt; \u0026#34;Enter worker\u0026#39;s name: \u0026#34;; getline(cin, fullname); cout \u0026lt;\u0026lt; \u0026#34;Enter worker\u0026#39;s ID: \u0026#34;; cin \u0026gt;\u0026gt; id; while (cin.get() != \u0026#39;\\n\u0026#39;) continue; } void Worker::Show() const { cout \u0026lt;\u0026lt; \u0026#34;Name: \u0026#34; \u0026lt;\u0026lt; fullname \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; cout \u0026lt;\u0026lt; \u0026#34;Employee ID: \u0026#34; \u0026lt;\u0026lt; id \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; } // Waiter methods void Waiter::Set() { Worker::Set(); cout \u0026lt;\u0026lt; \u0026#34;Enter waiter\u0026#39;s panache rating: \u0026#34;; cin \u0026gt;\u0026gt; panache; while (cin.get() != \u0026#39;\\n\u0026#39;) continue; } void Waiter::Show() const { cout \u0026lt;\u0026lt; \u0026#34;Category: waiter\\n\u0026#34;; Worker::Show(); cout \u0026lt;\u0026lt; \u0026#34;Panache rating: \u0026#34; \u0026lt;\u0026lt; panache \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; } // Singer methods char * Singer::pv[] = {\u0026#34;other\u0026#34;, \u0026#34;alto\u0026#34;, \u0026#34;contralto\u0026#34;, \u0026#34;soprano\u0026#34;, \u0026#34;bass\u0026#34;, \u0026#34;baritone\u0026#34;, \u0026#34;tenor\u0026#34;}; void Singer::Set() { Worker::Set(); cout \u0026lt;\u0026lt; \u0026#34;Enter number for singer\u0026#39;s vocal range:\\n\u0026#34;; int i; for (i = 0; i \u0026lt; Vtypes; i++) { cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026#34;: \u0026#34; \u0026lt;\u0026lt; pv[i] \u0026lt;\u0026lt; \u0026#34; \u0026#34;; if ( i % 4 == 3) cout \u0026lt;\u0026lt; endl; } if (i % 4 != 0) cout \u0026lt;\u0026lt; endl; while (cin \u0026gt;\u0026gt; voice \u0026amp;\u0026amp; (voice \u0026lt; 0 || voice \u0026gt;= Vtypes) ) cout \u0026lt;\u0026lt; \u0026#34;Please enter a value \u0026gt;= 0 and \u0026lt; \u0026#34; \u0026lt;\u0026lt; Vtypes \u0026lt;\u0026lt; endl; while (cin.get() != \u0026#39;\\n\u0026#39;) continue; } void Singer::Show() const { cout \u0026lt;\u0026lt; \u0026#34;Category: singer\\n\u0026#34;; Worker::Show(); cout \u0026lt;\u0026lt; \u0026#34;Vocal range: \u0026#34; \u0026lt;\u0026lt; pv[voice] \u0026lt;\u0026lt; endl; } ","permalink":"http://localhost:1313/blog/code/c++_primer_plus_worker0/","summary":"\u003cp\u003eworker0.h\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// worker0.h -- working classes\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"cp\"\u003e#ifndef WORKER0_H_\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#define WORKER0_H_\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;string\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eWorker\u003c/span\u003e \u003cspan class=\"c1\"\u003e// an abstract base class\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eprivate\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003efullname\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003epublic\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eWorker\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003efullname\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;no one\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0L\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eWorker\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003efullname\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003evirtual\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e\u003cspan class=\"n\"\u003eWorker\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// pure virtual destructor\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003evirtual\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eSet\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003evirtual\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eShow\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eWaiter\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"k\"\u003epublic\u003c/span\u003e \u003cspan class=\"n\"\u003eWorker\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eprivate\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003epanache\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003epublic\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eWaiter\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eWorker\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003epanache\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eWaiter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eWorker\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003epanache\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eWaiter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eWorker\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ewk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eWorker\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ewk\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003epanache\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eSet\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eShow\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eSinger\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"k\"\u003epublic\u003c/span\u003e \u003cspan class=\"n\"\u003eWorker\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eprotected\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eother\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ealto\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003econtralto\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esoprano\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ebass\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ebaritone\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etenor\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eVtypes\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eprivate\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epv\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eVtypes\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"c1\"\u003e// string equivs of voice types\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003evoice\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003epublic\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eSinger\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eWorker\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003evoice\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eother\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eSinger\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003elong\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eother\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eWorker\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003evoice\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eSinger\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eWorker\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ewk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eother\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eWorker\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ewk\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003evoice\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eSet\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eShow\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eworker0.cpp\u003c/p\u003e","title":"Worker0 Class"}]